{"version":3,"sources":["webpack:///../cfme-v2v-0fed6ddaf195/app/javascript/components/dates/TickingIsoElapsedTime.js","webpack:///../cfme-v2v-0fed6ddaf195/app/javascript/react/screens/App/Overview/components/Migrations/InProgressCard.js","webpack:///../cfme-v2v-0fed6ddaf195/app/javascript/react/config/config.js","webpack:///../cfme-v2v-0fed6ddaf195/app/javascript/react/screens/App/common/ShowWizardEmptyState/ShowWizardEmptyState.js","webpack:///../cfme-v2v-0fed6ddaf195/app/javascript/react/screens/App/Overview/screens/PlanWizard/PlanWizardSelectors.js","webpack:///../cfme-v2v-0fed6ddaf195/app/javascript/react/screens/App/common/forms/BootstrapSelect.js","webpack:///../cfme-v2v-0fed6ddaf195/app/javascript/react/screens/App/Mappings/MappingsConstants.js","webpack:///../cfme-v2v-0fed6ddaf195/app/javascript/react/screens/App/common/getMostRecentRequest.js","webpack:///../cfme-v2v-0fed6ddaf195/app/javascript/components/componentRegistry.js","webpack:///(webpack)/buildin/global.js","webpack:///../cfme-v2v-0fed6ddaf195/app/javascript/common/menu.js","webpack:///../cfme-v2v-0fed6ddaf195/app/javascript/redux/common/targetResources/targetResourcesReducer.js","webpack:///../cfme-v2v-0fed6ddaf195/app/javascript/redux/common/providers/providersHelpers.js","webpack:///../cfme-v2v-0fed6ddaf195/app/javascript/data/models/provider.js","webpack:///../cfme-v2v-0fed6ddaf195/app/javascript/redux/common/providers/providersValidators.js","webpack:///../cfme-v2v-0fed6ddaf195/app/javascript/redux/common/providers/providersReducer.js","webpack:///../cfme-v2v-0fed6ddaf195/app/javascript/redux/reducers/index.js","webpack:///../cfme-v2v-0fed6ddaf195/app/javascript/components/dates/ShortDateTime.js","webpack:///../cfme-v2v-0fed6ddaf195/app/javascript/components/dates/RelativeDateTime.js","webpack:///../cfme-v2v-0fed6ddaf195/app/javascript/components/dates/LongDateTime.js","webpack:///../cfme-v2v-0fed6ddaf195/app/javascript/components/dates/IsoDate.js","webpack:///../cfme-v2v-0fed6ddaf195/app/javascript/react/screens/App/common/NotificationList/NotificationListReducer.js","webpack:///../cfme-v2v-0fed6ddaf195/app/javascript/react/screens/App/common/NotificationList/NotificationList.js","webpack:///../cfme-v2v-0fed6ddaf195/app/javascript/react/screens/App/Overview/screens/PlanWizard/components/PlanWizardInstancePropertiesStep/PlanWizardInstancePropertiesStepReducer.js","webpack:///../cfme-v2v-0fed6ddaf195/app/javascript/react/screens/App/Overview/screens/PlanWizard/components/PlanWizardInstancePropertiesStep/PlanWizardInstancePropertiesStepActions.js","webpack:///../cfme-v2v-0fed6ddaf195/app/javascript/react/screens/App/Overview/screens/PlanWizard/components/PlanWizardInstancePropertiesStep/components/sortableHeaderCellFormatterWithChildren.js","webpack:///../cfme-v2v-0fed6ddaf195/app/javascript/react/screens/App/Overview/screens/PlanWizard/components/PlanWizardInstancePropertiesStep/components/InlineEdit/CancelButton.js","webpack:///../cfme-v2v-0fed6ddaf195/app/javascript/react/screens/App/Overview/screens/PlanWizard/components/PlanWizardInstancePropertiesStep/components/InlineEdit/ConfirmButton.js","webpack:///../cfme-v2v-0fed6ddaf195/app/javascript/react/screens/App/Overview/screens/PlanWizard/components/PlanWizardInstancePropertiesStep/components/TableInlineEditRow/closestPolyfill.js","webpack:///../cfme-v2v-0fed6ddaf195/app/javascript/react/screens/App/Overview/screens/PlanWizard/components/PlanWizardInstancePropertiesStep/components/TableInlineEditRow/TableConfirmButtonsRow.js","webpack:///../cfme-v2v-0fed6ddaf195/app/javascript/react/screens/App/Overview/screens/PlanWizard/components/PlanWizardInstancePropertiesStep/components/TableInlineEditRow/TableInlineEditRow.js","webpack:///../cfme-v2v-0fed6ddaf195/app/javascript/react/screens/App/Overview/screens/PlanWizard/components/PlanWizardInstancePropertiesStep/components/PlanWizardInstancePropertiesStepTable.js","webpack:///../cfme-v2v-0fed6ddaf195/app/javascript/react/screens/App/Overview/screens/PlanWizard/components/PlanWizardInstancePropertiesStep/PlanWizardInstancePropertiesStep.js","webpack:///../cfme-v2v-0fed6ddaf195/app/javascript/data/models/serviceTemplateAnsiblePlaybook.js","webpack:///../cfme-v2v-0fed6ddaf195/app/javascript/data/models/serviceTemplateAnsiblePlaybooks.js","webpack:///../cfme-v2v-0fed6ddaf195/app/javascript/react/screens/App/Overview/screens/PlanWizard/components/PlanWizardAdvancedOptionsStep/PlanWizardAdvancedOptionsStepValidators.js","webpack:///../cfme-v2v-0fed6ddaf195/app/javascript/react/screens/App/Overview/screens/PlanWizard/components/PlanWizardAdvancedOptionsStep/PlanWizardAdvancedOptionsStepReducer.js","webpack:///../cfme-v2v-0fed6ddaf195/app/javascript/react/screens/App/Overview/screens/PlanWizard/components/PlanWizardAdvancedOptionsStep/PlanWizardAdvancedOptionsStepActions.js","webpack:///../cfme-v2v-0fed6ddaf195/app/javascript/react/screens/App/Overview/screens/PlanWizard/components/PlanWizardAdvancedOptionsStep/components/PlanWizardAdvancedOptionsStepTable/vmSelectionCellFormatter.js","webpack:///../cfme-v2v-0fed6ddaf195/app/javascript/react/screens/App/Overview/screens/PlanWizard/components/PlanWizardAdvancedOptionsStep/components/PlanWizardAdvancedOptionsStepTable/vmSelectionHeaderCellFormatter.js","webpack:///../cfme-v2v-0fed6ddaf195/app/javascript/react/screens/App/Overview/screens/PlanWizard/components/PlanWizardAdvancedOptionsStep/components/PlanWizardAdvancedOptionsStepTable/PlanWizardAdvancedOptionsStepTable.js","webpack:///../cfme-v2v-0fed6ddaf195/app/javascript/react/screens/App/Overview/screens/PlanWizard/components/PlanWizardAdvancedOptionsStep/PlanWizardAdvancedOptionsStep.js","webpack:///../cfme-v2v-0fed6ddaf195/app/javascript/react/screens/App/Overview/screens/PlanWizard/PlanWizardReducer.js","webpack:///../cfme-v2v-0fed6ddaf195/app/javascript/react/screens/App/Overview/screens/PlanWizard/components/PlanWizardScheduleStep/PlanWizardScheduleStep.js","webpack:///../cfme-v2v-0fed6ddaf195/app/javascript/react/screens/App/Overview/screens/PlanWizard/components/PlanWizardScheduleStep/index.js","webpack:///../cfme-v2v-0fed6ddaf195/app/javascript/react/screens/App/Overview/screens/PlanWizard/components/PlanWizardGeneralStep/PlanWizardGeneralStep.js","webpack:///../cfme-v2v-0fed6ddaf195/app/javascript/react/screens/App/Overview/screens/PlanWizard/components/PlanWizardGeneralStep/index.js","webpack:///../cfme-v2v-0fed6ddaf195/app/javascript/react/screens/App/Overview/screens/PlanWizard/PlanWizardBody.js","webpack:///../cfme-v2v-0fed6ddaf195/app/javascript/react/screens/App/Overview/screens/PlanWizard/helpers.js","webpack:///../cfme-v2v-0fed6ddaf195/app/javascript/react/screens/App/Overview/screens/PlanWizard/PlanWizard.js","webpack:///../cfme-v2v-0fed6ddaf195/app/javascript/react/screens/App/Overview/screens/PlanWizard/components/PlanWizardResultsStep/PlanWizardResultsStepReducer.js","webpack:///../cfme-v2v-0fed6ddaf195/app/javascript/react/screens/App/Overview/screens/PlanWizard/components/PlanWizardResultsStep/PlanWizardResultsStepActions.js","webpack:///../cfme-v2v-0fed6ddaf195/app/javascript/react/screens/App/Overview/screens/PlanWizard/components/PlanWizardResultsStep/helpers.js","webpack:///../cfme-v2v-0fed6ddaf195/app/javascript/react/screens/App/Overview/screens/PlanWizard/components/PlanWizardResultsStep/PlanWizardResultsStep.js","webpack:///../cfme-v2v-0fed6ddaf195/app/javascript/react/screens/App/Overview/screens/PlanWizard/components/PlanWizardVMStep/PlanWizardVMStepReducer.js","webpack:///../cfme-v2v-0fed6ddaf195/app/javascript/react/screens/App/Overview/screens/PlanWizard/components/PlanWizardVMStep/PlanWizardVMStepActions.js","webpack:///../cfme-v2v-0fed6ddaf195/app/javascript/react/screens/App/Overview/screens/PlanWizard/components/PlanWizardVMStep/components/CSVDropzoneField.js","webpack:///../cfme-v2v-0fed6ddaf195/app/javascript/react/screens/App/Overview/screens/PlanWizard/components/PlanWizardVMStep/components/vmSelectionCellFormatter.js","webpack:///../cfme-v2v-0fed6ddaf195/app/javascript/react/screens/App/Overview/screens/PlanWizard/components/PlanWizardVMStep/components/vmSelectionHeaderCellFormatter.js","webpack:///../cfme-v2v-0fed6ddaf195/app/javascript/react/screens/App/Overview/screens/PlanWizard/components/PlanWizardVMStep/components/PlanWizardVMStepTable.js","webpack:///../cfme-v2v-0fed6ddaf195/app/javascript/react/screens/App/Overview/screens/PlanWizard/components/PlanWizardVMStep/PlanWizardVMStep.js","webpack:///../cfme-v2v-0fed6ddaf195/app/javascript/react/screens/App/Mappings/screens/MappingWizard/components/MappingWizardResultsStep/MappingWizardResultsStepReducer.js","webpack:///../cfme-v2v-0fed6ddaf195/app/javascript/react/screens/App/Mappings/screens/MappingWizard/components/MappingWizardResultsStep/MappingWizardResultsStepActions.js","webpack:///../cfme-v2v-0fed6ddaf195/app/javascript/react/screens/App/Mappings/screens/MappingWizard/components/MappingWizardResultsStep/helpers.js","webpack:///../cfme-v2v-0fed6ddaf195/app/javascript/react/screens/App/Mappings/screens/MappingWizard/components/MappingWizardResultsStep/MappingWizardResultsStep.js","webpack:///../cfme-v2v-0fed6ddaf195/app/javascript/react/screens/App/Mappings/screens/MappingWizard/components/MappingWizardNetworksStep/MappingWizardNetworksStepReducer.js","webpack:///../cfme-v2v-0fed6ddaf195/app/javascript/react/screens/App/Mappings/screens/MappingWizard/components/MappingWizardNetworksStep/MappingWizardNetworksStepActions.js","webpack:///../cfme-v2v-0fed6ddaf195/app/javascript/react/screens/App/Mappings/screens/MappingWizard/components/MappingWizardNetworksStep/helpers.js","webpack:///../cfme-v2v-0fed6ddaf195/app/javascript/react/screens/App/Mappings/screens/MappingWizard/components/MappingWizardNetworksStep/components/NetworksStepForm/NetworksStepForm.js","webpack:///../cfme-v2v-0fed6ddaf195/app/javascript/react/screens/App/Mappings/screens/MappingWizard/components/MappingWizardNetworksStep/MappingWizardNetworksStep.js","webpack:///../cfme-v2v-0fed6ddaf195/app/javascript/react/screens/App/Mappings/screens/MappingWizard/components/MappingWizardDatastoresStep/MappingWizardDatastoresStepReducer.js","webpack:///../cfme-v2v-0fed6ddaf195/app/javascript/react/screens/App/Mappings/screens/MappingWizard/components/MappingWizardDatastoresStep/MappingWizardDatastoresStepActions.js","webpack:///../cfme-v2v-0fed6ddaf195/app/javascript/react/screens/App/Mappings/screens/MappingWizard/components/MappingWizardDatastoresStep/MappingWizardDatastoresStepSelectors.js","webpack:///../cfme-v2v-0fed6ddaf195/app/javascript/react/screens/App/Mappings/screens/MappingWizard/components/MappingWizardDatastoresStep/components/DatastoresStepForm/DatastoresStepForm.js","webpack:///../cfme-v2v-0fed6ddaf195/app/javascript/react/screens/App/Mappings/screens/MappingWizard/components/MappingWizardDatastoresStep/MappingWizardDatastoresStep.js","webpack:///../cfme-v2v-0fed6ddaf195/app/javascript/react/screens/App/Mappings/screens/MappingWizard/components/MappingWizardClustersStep/MappingWizardClustersStepReducer.js","webpack:///../cfme-v2v-0fed6ddaf195/app/javascript/react/screens/App/Mappings/screens/MappingWizard/components/MappingWizardClustersStep/MappingWizardClustersStepActions.js","webpack:///../cfme-v2v-0fed6ddaf195/app/javascript/react/screens/App/Mappings/screens/MappingWizard/components/MappingWizardClustersStep/helpers.js","webpack:///../cfme-v2v-0fed6ddaf195/app/javascript/react/screens/App/Mappings/screens/MappingWizard/components/MappingWizardClustersStep/components/ClustersStepTreeView.js","webpack:///../cfme-v2v-0fed6ddaf195/app/javascript/react/screens/App/Mappings/screens/MappingWizard/components/MappingWizardClustersStep/components/ClustersStepForm/ClustersStepForm.js","webpack:///../cfme-v2v-0fed6ddaf195/app/javascript/react/screens/App/Mappings/screens/MappingWizard/components/MappingWizardClustersStep/MappingWizardClustersStep.js","webpack:///(webpack)/buildin/module.js","webpack:///../cfme-v2v-0fed6ddaf195/app/javascript/react/screens/App/Mappings/screens/MappingWizard/helpers.js","webpack:///../cfme-v2v-0fed6ddaf195/app/javascript/react/screens/App/Mappings/screens/MappingWizard/components/MappingWizardGeneralStep/MappingWizardGeneralStepReducer.js","webpack:///../cfme-v2v-0fed6ddaf195/app/javascript/react/screens/App/Mappings/screens/MappingWizard/components/MappingWizardGeneralStep/MappingWizardGeneralStepActions.js","webpack:///../cfme-v2v-0fed6ddaf195/app/javascript/react/screens/App/Mappings/screens/MappingWizard/components/MappingWizardGeneralStep/helpers.js","webpack:///../cfme-v2v-0fed6ddaf195/app/javascript/react/screens/App/Mappings/screens/MappingWizard/components/MappingWizardGeneralStep/MappingWizardGeneralStep.js","webpack:///../cfme-v2v-0fed6ddaf195/app/javascript/react/screens/App/Mappings/screens/MappingWizard/MappingWizardReducer.js","webpack:///../cfme-v2v-0fed6ddaf195/app/javascript/react/screens/App/Mappings/screens/MappingWizard/MappingWizardSelectors.js","webpack:///../cfme-v2v-0fed6ddaf195/app/javascript/react/screens/App/Mappings/screens/MappingWizard/components/WarningModal/WarningModal.js","webpack:///../cfme-v2v-0fed6ddaf195/app/javascript/react/screens/App/Mappings/screens/MappingWizard/MappingWizardBody.js","webpack:///../cfme-v2v-0fed6ddaf195/app/javascript/react/screens/App/Mappings/screens/MappingWizard/MappingWizard.js","webpack:///../cfme-v2v-0fed6ddaf195/app/javascript/react/screens/App/Mappings/helpers.js","webpack:///../cfme-v2v-0fed6ddaf195/app/javascript/react/screens/App/Plan/PlanConstants.js","webpack:///../cfme-v2v-0fed6ddaf195/app/javascript/data/models/networks.js","webpack:///../cfme-v2v-0fed6ddaf195/app/javascript/data/models/datastores.js","webpack:///../cfme-v2v-0fed6ddaf195/app/javascript/data/models/clusters.js","webpack:///../cfme-v2v-0fed6ddaf195/app/javascript/react/screens/App/Mappings/MappingsValidators.js","webpack:///../cfme-v2v-0fed6ddaf195/app/javascript/react/screens/App/Mappings/MappingsReducer.js","webpack:///../cfme-v2v-0fed6ddaf195/app/javascript/react/screens/App/Mappings/components/InfrastructureMappingsList/components/MappingTarget.js","webpack:///../cfme-v2v-0fed6ddaf195/app/javascript/react/screens/App/Mappings/components/InfrastructureMappingsList/components/MappingSource.js","webpack:///../cfme-v2v-0fed6ddaf195/app/javascript/react/screens/App/Mappings/components/DeleteInfrastructureMappingConfirmationModal/DeleteInfrastructureMappingConfirmationModal.js","webpack:///../cfme-v2v-0fed6ddaf195/app/javascript/react/screens/App/Mappings/components/InfrastructureMappingsList/InfrastructureMappingsList.js","webpack:///../cfme-v2v-0fed6ddaf195/app/javascript/react/screens/App/Mappings/Mappings.js","webpack:///../cfme-v2v-0fed6ddaf195/app/javascript/redux/common/providers/providersConstants.js","webpack:///../cfme-v2v-0fed6ddaf195/app/javascript/react/screens/App/Plan/helpers.js","webpack:///../cfme-v2v-0fed6ddaf195/app/javascript/react/screens/App/Plan/PlanReducer.js","webpack:///../cfme-v2v-0fed6ddaf195/app/javascript/react/screens/App/Plan/PlanActions.js","webpack:///../cfme-v2v-0fed6ddaf195/app/javascript/react/screens/App/Plan/components/PlanRequestDetailList/PlanRequestDetailListConstants.js","webpack:///../cfme-v2v-0fed6ddaf195/app/javascript/react/screens/App/Plan/components/PlanEmptyState.js","webpack:///../cfme-v2v-0fed6ddaf195/app/javascript/react/screens/App/Plan/components/PlanVmsList.js","webpack:///../cfme-v2v-0fed6ddaf195/app/javascript/react/screens/App/Plan/components/PlanRequestDetailList/PlanRequestDetailList.js","webpack:///../cfme-v2v-0fed6ddaf195/app/javascript/react/screens/App/Plan/Plan.js","webpack:///../cfme-v2v-0fed6ddaf195/app/javascript/react/screens/App/common/forms/FormField.js","webpack:///../cfme-v2v-0fed6ddaf195/app/javascript/react/screens/App/Settings/SettingsReducer.js","webpack:///../cfme-v2v-0fed6ddaf195/app/javascript/react/screens/App/Settings/screens/ConversionHostsSettings/components/ConversionHostWizard/ConversionHostWizardSelectors.js","webpack:///../cfme-v2v-0fed6ddaf195/app/javascript/react/screens/App/Settings/screens/ConversionHostsSettings/components/ConversionHostWizard/ConversionHostWizardResultsStep/helpers.js","webpack:///../cfme-v2v-0fed6ddaf195/app/javascript/react/screens/App/Settings/screens/ConversionHostsSettings/components/ConversionHostWizard/ConversionHostWizardResultsStep/ConversionHostWizardResultsStep.js","webpack:///../cfme-v2v-0fed6ddaf195/app/javascript/react/screens/App/Settings/screens/ConversionHostsSettings/components/ConversionHostWizard/ConversionHostWizardResultsStep/index.js","webpack:///../cfme-v2v-0fed6ddaf195/app/javascript/react/screens/App/Settings/screens/ConversionHostsSettings/components/ConversionHostWizard/ConversionHostWizardAuthenticationStep/ConversionHostWizardAuthenticationStep.js","webpack:///../cfme-v2v-0fed6ddaf195/app/javascript/react/screens/App/Settings/screens/ConversionHostsSettings/components/ConversionHostWizard/ConversionHostWizardAuthenticationStep/index.js","webpack:///../cfme-v2v-0fed6ddaf195/app/javascript/react/screens/App/common/forms/TypeAheadSelectField.js","webpack:///../cfme-v2v-0fed6ddaf195/app/javascript/react/screens/App/Settings/screens/ConversionHostsSettings/components/ConversionHostWizard/ConversionHostWizardHostsStep/ConversionHostWizardHostsStep.js","webpack:///../cfme-v2v-0fed6ddaf195/app/javascript/react/screens/App/Settings/screens/ConversionHostsSettings/components/ConversionHostWizard/ConversionHostWizardHostsStep/index.js","webpack:///../cfme-v2v-0fed6ddaf195/app/javascript/react/screens/App/common/ListViewToolbar/ListViewToolbar.js","webpack:///../cfme-v2v-0fed6ddaf195/app/javascript/react/screens/App/Settings/screens/ConversionHostsSettings/components/ConversionHostWizard/ConversionHostWizardLocationStep/ConversionHostWizardLocationStep.js","webpack:///../cfme-v2v-0fed6ddaf195/app/javascript/react/screens/App/Settings/screens/ConversionHostsSettings/components/ConversionHostWizard/ConversionHostWizardLocationStep/index.js","webpack:///../cfme-v2v-0fed6ddaf195/app/javascript/react/screens/App/common/ModalWizard/ModalWizardStateProvider.js","webpack:///../cfme-v2v-0fed6ddaf195/app/javascript/react/screens/App/common/ModalWizard/ModalWizardBody.js","webpack:///../cfme-v2v-0fed6ddaf195/app/javascript/react/screens/App/common/ModalWizard/ModalWizard.js","webpack:///../cfme-v2v-0fed6ddaf195/app/javascript/react/screens/App/Settings/screens/ConversionHostsSettings/components/ConversionHostWizard/ConversionHostWizardBody.js","webpack:///../cfme-v2v-0fed6ddaf195/app/javascript/react/screens/App/Settings/screens/ConversionHostsSettings/components/ConversionHostWizard/ConversionHostWizard.js","webpack:///../cfme-v2v-0fed6ddaf195/app/javascript/react/screens/App/Settings/screens/ConversionHostsSettings/components/ConversionHostWizard/index.js","webpack:///../cfme-v2v-0fed6ddaf195/app/javascript/components/dates/MomentDate.js","webpack:///../cfme-v2v-0fed6ddaf195/app/javascript/react/screens/App/common/forms/TextFileInput/TextFileInput.js","webpack:///../cfme-v2v-0fed6ddaf195/app/javascript/react/screens/App/common/forms/TextFileInput/index.js","webpack:///../cfme-v2v-0fed6ddaf195/app/javascript/react/screens/App/Settings/screens/ConversionHostsSettings/components/RetryConversionHostConfirmationModal/RetryConversionHostConfirmationModal.js","webpack:///../cfme-v2v-0fed6ddaf195/app/javascript/react/screens/App/Settings/screens/ConversionHostsSettings/components/RetryConversionHostConfirmationModal/index.js","webpack:///../cfme-v2v-0fed6ddaf195/app/javascript/react/screens/App/Settings/screens/ConversionHostsSettings/components/DeleteConversionHostConfirmationModal.js","webpack:///../cfme-v2v-0fed6ddaf195/app/javascript/react/screens/App/Settings/screens/ConversionHostsSettings/components/ConversionHostRetryButton.js","webpack:///../cfme-v2v-0fed6ddaf195/app/javascript/react/screens/App/Settings/screens/ConversionHostsSettings/components/ConversionHostRemoveButton.js","webpack:///../cfme-v2v-0fed6ddaf195/app/javascript/react/screens/App/Settings/screens/ConversionHostsSettings/components/ConversionHostsListItem.js","webpack:///../cfme-v2v-0fed6ddaf195/app/javascript/react/screens/App/Settings/screens/ConversionHostsSettings/components/ConversionHostsList.js","webpack:///../cfme-v2v-0fed6ddaf195/app/javascript/react/screens/App/Settings/screens/ConversionHostsSettings/components/ConversionHostsEmptyState.js","webpack:///../cfme-v2v-0fed6ddaf195/app/javascript/react/screens/App/Settings/screens/ConversionHostsSettings/ConversionHostsSettings.js","webpack:///../cfme-v2v-0fed6ddaf195/app/javascript/react/screens/App/Settings/screens/ConversionHostsSettings/index.js","webpack:///../cfme-v2v-0fed6ddaf195/app/javascript/react/screens/App/common/forms/NumberInput.js","webpack:///../cfme-v2v-0fed6ddaf195/app/javascript/react/screens/App/Settings/screens/GeneralSettings/GeneralSettings.js","webpack:///../cfme-v2v-0fed6ddaf195/app/javascript/react/screens/App/Settings/screens/GeneralSettings/index.js","webpack:///../cfme-v2v-0fed6ddaf195/app/javascript/react/screens/App/Settings/Settings.js","webpack:///../cfme-v2v-0fed6ddaf195/app/javascript/data/models/playbooks.js","webpack:///../cfme-v2v-0fed6ddaf195/app/javascript/data/models/requests.js","webpack:///../cfme-v2v-0fed6ddaf195/app/javascript/react/screens/App/Overview/OverviewValidators.js","webpack:///../cfme-v2v-0fed6ddaf195/app/javascript/react/screens/App/Overview/OverviewReducer.js","webpack:///../cfme-v2v-0fed6ddaf195/app/javascript/react/screens/App/Overview/components/EditPlanNameModal/EditPlanNameReducer.js","webpack:///../cfme-v2v-0fed6ddaf195/app/javascript/react/screens/App/Overview/components/EditPlanNameModal/EditPlanNameActions.js","webpack:///../cfme-v2v-0fed6ddaf195/app/javascript/react/screens/App/Overview/components/EditPlanNameModal/EditPlanNameModal.js","webpack:///../cfme-v2v-0fed6ddaf195/app/javascript/react/screens/App/Overview/components/Migrations/MigrationsCompletedList.js","webpack:///../cfme-v2v-0fed6ddaf195/app/javascript/react/screens/App/common/ListViewToolbar/paginate.js","webpack:///../cfme-v2v-0fed6ddaf195/app/javascript/react/screens/App/common/ListViewToolbar/sortFilter.js","webpack:///../cfme-v2v-0fed6ddaf195/app/javascript/react/screens/App/common/ListViewToolbar/listFilter.js","webpack:///../cfme-v2v-0fed6ddaf195/app/javascript/react/screens/App/Overview/components/ScheduleMigrationModal/ScheduleMigrationModalBody.js","webpack:///../cfme-v2v-0fed6ddaf195/app/javascript/react/screens/App/Overview/components/Migrations/MigrationsNotStartedList.js","webpack:///../cfme-v2v-0fed6ddaf195/app/javascript/react/screens/App/Overview/components/Migrations/CardFooter.js","webpack:///../cfme-v2v-0fed6ddaf195/app/javascript/react/screens/App/Overview/components/Migrations/CardEmptyState.js","webpack:///../cfme-v2v-0fed6ddaf195/app/javascript/react/screens/App/Overview/components/Migrations/helpers/getPlaybookName.js","webpack:///../cfme-v2v-0fed6ddaf195/node_modules/moment/locale sync ^\\.\\/.*$","webpack:///../cfme-v2v-0fed6ddaf195/app/javascript/react/screens/App/Overview/components/Migrations/InProgressWithDetailCard.js","webpack:///../cfme-v2v-0fed6ddaf195/app/javascript/react/screens/App/Overview/components/Migrations/MigrationsInProgressCard.js","webpack:///../cfme-v2v-0fed6ddaf195/app/javascript/react/screens/App/Overview/components/Migrations/MigrationsInProgressCards.js","webpack:///../cfme-v2v-0fed6ddaf195/app/javascript/react/screens/App/Overview/components/Migrations/Migrations.js","webpack:///../cfme-v2v-0fed6ddaf195/app/javascript/react/screens/App/Overview/components/AggregateCards/ArchivedTransformationPlans/ArchivedTransformationPlans.js","webpack:///../cfme-v2v-0fed6ddaf195/app/javascript/react/screens/App/Overview/components/AggregateCards/FinishedTransformationPlans/FinishedTransformationPlans.js","webpack:///../cfme-v2v-0fed6ddaf195/app/javascript/data/models/schedules.js","webpack:///../cfme-v2v-0fed6ddaf195/app/javascript/react/screens/App/Overview/components/AggregateCards/ActiveTransformationPlans/ActiveTransformationPlans.js","webpack:///../cfme-v2v-0fed6ddaf195/app/javascript/react/screens/App/Overview/components/AggregateCards/NotStartedTransformationPlans/NotStartedTransformationPlans.js","webpack:///../cfme-v2v-0fed6ddaf195/app/javascript/react/screens/App/Overview/components/AggregateCards/index.js","webpack:///../cfme-v2v-0fed6ddaf195/app/javascript/react/screens/App/Overview/Overview.js","webpack:///../cfme-v2v-0fed6ddaf195/app/javascript/react/config/Routes.js","webpack:///../cfme-v2v-0fed6ddaf195/app/javascript/react/screens/App/Overview/screens/PlanWizard/PlanWizardConstants.js","webpack:///../cfme-v2v-0fed6ddaf195/app/javascript/react/index.js","webpack:///../cfme-v2v-0fed6ddaf195/app/javascript/components/mounter.js","webpack:///../cfme-v2v-0fed6ddaf195/app/javascript/common/helpers.js","webpack:///../cfme-v2v-0fed6ddaf195/app/javascript/react/screens/App/Mappings/screens/MappingWizard/components/helpers.js","webpack:///../cfme-v2v-0fed6ddaf195/app/javascript/react/screens/App/Mappings/screens/MappingWizard/MappingWizardActions.js","webpack:///../cfme-v2v-0fed6ddaf195/app/javascript/common/i18nProviderWrapperFactory.js","webpack:///../cfme-v2v-0fed6ddaf195/app/javascript/react/screens/App/Settings/helpers.js","webpack:///../cfme-v2v-0fed6ddaf195/app/javascript/react/screens/App/Settings/SettingsActions.js","webpack:///../cfme-v2v-0fed6ddaf195/app/javascript/react/screens/App/Overview/OverviewActions.js","webpack:///../cfme-v2v-0fed6ddaf195/app/javascript/packs/migration.js","webpack:///../cfme-v2v-0fed6ddaf195/app/javascript/common/i18n.js","webpack:///../cfme-v2v-0fed6ddaf195/app/javascript/react/screens/App/Overview/screens/PlanWizard/components/PlanWizardAdvancedOptionsStep/PlanWizardAdvancedOptionsStepConstants.js","webpack:///../cfme-v2v-0fed6ddaf195/app/javascript/react/screens/App/Overview/screens/PlanWizard/components/PlanWizardVMStep/PlanWizardVMStepConstants.js","webpack:///../cfme-v2v-0fed6ddaf195/app/javascript/react/screens/App/Mappings/screens/MappingWizard/components/MappingWizardNetworksStep/MappingWizardNetworksStepConstants.js","webpack:///../cfme-v2v-0fed6ddaf195/app/javascript/react/screens/App/Mappings/screens/MappingWizard/components/MappingWizardDatastoresStep/MappingWizardDatastoresStepConstants.js","webpack:///../cfme-v2v-0fed6ddaf195/app/javascript/react/screens/App/Mappings/screens/MappingWizard/components/MappingWizardClustersStep/MappingWizardClustersStepConstants.js","webpack:///../cfme-v2v-0fed6ddaf195/app/javascript/redux/common/targetResources/targetResourcesConstants.js","webpack:///../cfme-v2v-0fed6ddaf195/app/javascript/data/schemaHelpers.js","webpack:///../cfme-v2v-0fed6ddaf195/app/javascript/redux/actions/routerActions.js","webpack:///../cfme-v2v-0fed6ddaf195/app/javascript/react/screens/App/common/NotificationList/NotificationConstants.js","webpack:///../cfme-v2v-0fed6ddaf195/app/javascript/react/screens/App/common/StopPropagationOnClick.js","webpack:///../cfme-v2v-0fed6ddaf195/app/javascript/react/screens/App/common/networkKey.js","webpack:///../cfme-v2v-0fed6ddaf195/app/javascript/react/screens/App/Mappings/components/InfrastructureMappingsList/helpers.js","webpack:///../cfme-v2v-0fed6ddaf195/app/javascript/react/config/Toolbar.js","webpack:///../cfme-v2v-0fed6ddaf195/app/javascript/react/screens/App/Mappings/screens/MappingWizard/MappingWizardConstants.js","webpack:///../cfme-v2v-0fed6ddaf195/app/javascript/react/screens/App/common/NotificationList/index.js","webpack:///../cfme-v2v-0fed6ddaf195/app/javascript/react/screens/App/Overview/screens/PlanWizard/components/PlanWizardAdvancedOptionsStep/helpers.js","webpack:///../cfme-v2v-0fed6ddaf195/app/javascript/react/screens/App/Overview/screens/PlanWizard/PlanWizardActions.js","webpack:///../cfme-v2v-0fed6ddaf195/app/javascript/react/screens/App/Mappings/screens/MappingWizard/components/MappingWizardResultsStep/MappingWizardResultsStepConstants.js","webpack:///../cfme-v2v-0fed6ddaf195/app/javascript/react/screens/App/Mappings/screens/MappingWizard/components/DualPaneMapper/DualPaneMapperListItem.js","webpack:///../cfme-v2v-0fed6ddaf195/app/javascript/react/screens/App/Mappings/screens/MappingWizard/components/DualPaneMapper/DualPaneMapperCount.js","webpack:///../cfme-v2v-0fed6ddaf195/app/javascript/react/screens/App/Mappings/screens/MappingWizard/components/DualPaneMapper/DualPaneMapperList.js","webpack:///../cfme-v2v-0fed6ddaf195/app/javascript/react/screens/App/Mappings/screens/MappingWizard/components/DualPaneMapper/DualPaneMapper.js","webpack:///../cfme-v2v-0fed6ddaf195/app/javascript/react/screens/App/Mappings/index.js","webpack:///../cfme-v2v-0fed6ddaf195/app/javascript/react/screens/App/Plan/index.js","webpack:///../cfme-v2v-0fed6ddaf195/app/javascript/react/screens/App/common/WizardErrorState.js","webpack:///../cfme-v2v-0fed6ddaf195/app/javascript/react/screens/App/common/WizardLoadingState.js","webpack:///../cfme-v2v-0fed6ddaf195/app/javascript/react/screens/App/common/ModalWizard/index.js","webpack:///../cfme-v2v-0fed6ddaf195/app/javascript/react/screens/App/Settings/screens/ConversionHostsSettings/ConversionHostsSettingsConstants.js","webpack:///../cfme-v2v-0fed6ddaf195/app/javascript/react/screens/App/Settings/index.js","webpack:///../cfme-v2v-0fed6ddaf195/app/javascript/redux/common/providers/providersActions.js","webpack:///../cfme-v2v-0fed6ddaf195/app/javascript/react/screens/App/common/NotificationList/NotificationListActions.js","webpack:///../cfme-v2v-0fed6ddaf195/app/javascript/react/screens/App/Mappings/screens/MappingWizard/components/MappingWizardGeneralStep/MappingWizardGeneralStepConstants.js","webpack:///../cfme-v2v-0fed6ddaf195/app/javascript/react/screens/App/Mappings/MappingsActions.js","webpack:///../cfme-v2v-0fed6ddaf195/app/javascript/react/screens/App/Overview/components/Migrations/helpers/getPlanScheduleInfo.js","webpack:///../cfme-v2v-0fed6ddaf195/app/javascript/common/API.js","webpack:///../cfme-v2v-0fed6ddaf195/app/javascript/react/screens/App/Overview/components/Migrations/helpers/getMostRecentVMTasksFromRequests.js","webpack:///../cfme-v2v-0fed6ddaf195/app/javascript/components/dates/IsoElapsedTime.js","webpack:///../cfme-v2v-0fed6ddaf195/app/javascript/data/models/plans.js","webpack:///../cfme-v2v-0fed6ddaf195/app/javascript/react/screens/App/Overview/index.js","webpack:///../cfme-v2v-0fed6ddaf195/app/javascript/react/screens/App/Overview/OverviewConstants.js","webpack:///./node_modules/process/browser.js","webpack:///../cfme-v2v-0fed6ddaf195/app/javascript/react/screens/App/Overview/screens/PlanWizard/components/PlanWizardInstancePropertiesStep/PlanWizardInstancePropertiesStepConstants.js","webpack:///../cfme-v2v-0fed6ddaf195/app/javascript/react/screens/App/Overview/screens/PlanWizard/components/PlanWizardInstancePropertiesStep/helpers.js","webpack:///../cfme-v2v-0fed6ddaf195/app/javascript/react/screens/App/Overview/screens/PlanWizard/components/PlanWizardInstancePropertiesStep/index.js","webpack:///../cfme-v2v-0fed6ddaf195/app/javascript/react/screens/App/Overview/screens/PlanWizard/components/PlanWizardAdvancedOptionsStep/index.js","webpack:///../cfme-v2v-0fed6ddaf195/app/javascript/react/screens/App/Overview/screens/PlanWizard/index.js","webpack:///../cfme-v2v-0fed6ddaf195/app/javascript/react/screens/App/Overview/screens/PlanWizard/components/PlanWizardResultsStep/PlanWizardResultsStepConstants.js","webpack:///../cfme-v2v-0fed6ddaf195/app/javascript/react/screens/App/Overview/screens/PlanWizard/components/PlanWizardResultsStep/index.js","webpack:///../cfme-v2v-0fed6ddaf195/app/javascript/react/screens/App/Overview/screens/PlanWizard/components/PlanWizardVMStep/helpers.js","webpack:///../cfme-v2v-0fed6ddaf195/app/javascript/react/screens/App/Overview/screens/PlanWizard/components/common/CustomToolbarFind.js","webpack:///../cfme-v2v-0fed6ddaf195/app/javascript/react/screens/App/Overview/screens/PlanWizard/components/common/searchFilter.js","webpack:///../cfme-v2v-0fed6ddaf195/app/javascript/react/screens/App/Overview/screens/PlanWizard/components/common/rowFilter.js","webpack:///../cfme-v2v-0fed6ddaf195/app/javascript/react/screens/App/Overview/screens/PlanWizard/components/PlanWizardVMStep/index.js","webpack:///../cfme-v2v-0fed6ddaf195/app/javascript/react/screens/App/Mappings/screens/MappingWizard/components/MappingWizardResultsStep/index.js","webpack:///../cfme-v2v-0fed6ddaf195/app/javascript/react/screens/App/Mappings/screens/MappingWizard/components/MappingWizardNetworksStep/MappingWizardNetworksStepSelectors.js","webpack:///../cfme-v2v-0fed6ddaf195/app/javascript/react/screens/App/Mappings/screens/MappingWizard/components/MappingWizardNetworksStep/components/NetworksStepForm/helpers.js","webpack:///../cfme-v2v-0fed6ddaf195/app/javascript/react/screens/App/Mappings/screens/MappingWizard/components/MappingWizardNetworksStep/index.js","webpack:///../cfme-v2v-0fed6ddaf195/app/javascript/react/screens/App/Mappings/screens/MappingWizard/components/MappingWizardDatastoresStep/components/DatastoresStepForm/helpers.js","webpack:///../cfme-v2v-0fed6ddaf195/app/javascript/react/screens/App/Mappings/screens/MappingWizard/components/MappingWizardTreeView/MappingWizardTreeView.js","webpack:///../cfme-v2v-0fed6ddaf195/app/javascript/react/screens/App/Mappings/screens/MappingWizard/components/MappingWizardDatastoresStep/index.js","webpack:///../cfme-v2v-0fed6ddaf195/app/javascript/react/screens/App/Mappings/screens/MappingWizard/components/MappingWizardClustersStep/MappingWizardClustersStepSelectors.js","webpack:///../cfme-v2v-0fed6ddaf195/app/javascript/react/screens/App/Mappings/screens/MappingWizard/components/MappingWizardClustersStep/components/ClustersStepForm/helpers.js","webpack:///../cfme-v2v-0fed6ddaf195/app/javascript/react/screens/App/Mappings/screens/MappingWizard/components/MappingWizardClustersStep/index.js","webpack:///../cfme-v2v-0fed6ddaf195/app/javascript/react/screens/App/Mappings/screens/MappingWizard/components/MappingWizardGeneralStep/index.js","webpack:///../cfme-v2v-0fed6ddaf195/app/javascript/react/screens/App/Mappings/screens/MappingWizard/index.js","webpack:///../cfme-v2v-0fed6ddaf195/app/javascript/components/index.js","webpack:///../cfme-v2v-0fed6ddaf195/app/javascript/common/http.js","webpack:///../cfme-v2v-0fed6ddaf195/app/javascript/redux/common/targetResources/targetResourcesActions.js","webpack:///../cfme-v2v-0fed6ddaf195/app/javascript/react/screens/App/common/forms/SshKeyField.js","webpack:///../cfme-v2v-0fed6ddaf195/app/javascript/react/screens/App/Settings/SettingsConstants.js","webpack:///../cfme-v2v-0fed6ddaf195/app/javascript/react/screens/App/Overview/OverviewSelectors.js","webpack:///../cfme-v2v-0fed6ddaf195/app/javascript/react/screens/App/Overview/helpers.js","webpack:///../cfme-v2v-0fed6ddaf195/app/javascript/data/models/transformationMappings.js","webpack:///../cfme-v2v-0fed6ddaf195/app/javascript/react/screens/App/Overview/components/EditPlanNameModal/EditPlanNameConstants.js","webpack:///../cfme-v2v-0fed6ddaf195/app/javascript/react/screens/App/Overview/screens/PlanWizard/components/PlanWizardGeneralStep/helpers.js","webpack:///../cfme-v2v-0fed6ddaf195/app/javascript/react/screens/App/Overview/components/EditPlanNameModal/index.js","webpack:///../cfme-v2v-0fed6ddaf195/app/javascript/react/screens/App/common/ConfirmModal.js","webpack:///../cfme-v2v-0fed6ddaf195/app/javascript/react/screens/App/Overview/components/Migrations/DeleteMigrationMenuItem.js","webpack:///../cfme-v2v-0fed6ddaf195/app/javascript/react/screens/App/Overview/components/Migrations/ScheduleMigrationButtons.js","webpack:///../cfme-v2v-0fed6ddaf195/app/javascript/react/screens/App/Overview/components/Migrations/MigrationsConstants.js","webpack:///../cfme-v2v-0fed6ddaf195/app/javascript/react/screens/App/Overview/components/ScheduleMigrationModal/ScheduleMigrationModal.js","webpack:///../cfme-v2v-0fed6ddaf195/app/javascript/common/constants.js","webpack:///../cfme-v2v-0fed6ddaf195/app/javascript/react/screens/App/Mappings/components/InfrastructureMappingsList/InfrastructureMappingsListConstants.js","webpack:///../cfme-v2v-0fed6ddaf195/app/javascript/react/screens/App/Overview/components/Migrations/helpers.js","webpack:///../cfme-v2v-0fed6ddaf195/app/javascript/react/screens/App/common/commonUtilitiesHelper.js","webpack:///../cfme-v2v-0fed6ddaf195/app/javascript/react/screens/App/Settings/screens/ConversionHostsSettings/components/ConversionHostWizard/ConversionHostWizardConstants.js"],"names":["__webpack_require__","_IsoElapsedTime","TickingIsoElapsedTime","props","_classCallCheck","this","_this","_possibleConstructorReturn","__proto__","Object","getPrototypeOf","call","state","now","endTime","Date","_tickInterval","dateProps","bind","tick","React","Component","setInterval","clearInterval","_props","startTime","setState","_react2","default","createElement","Fragment","IsoElapsedTime","propTypes","PropTypes","oneOfType","string","instanceOf","defaultProps","_patternflyReact","InProgressCard","_ref","title","children","footer","onClick","_objectWithoutProperties","Grid","Col","sm","md","lg","Card","_extends","id","Array","isArray","matchHeight","Heading","Body","node","func","noop","links","path","component","OverviewContainer","menu_item_id","Settings","PlanContainer","MappingsContainer","redirect","ShowWizardEmptyState","showWizardAction","buttonHref","description","buttonText","iconType","iconName","EmptyState","Icon","type","name","Title","Info","Action","Button","bsStyle","bsSize","href","sprintf","__","_helpers","findEditingPlan","transformationPlans","editingPlanId","find","plan","planWizardOverviewFilter","overview","hidePlanWizard","transformationMappings","editingPlan","planWizardFormFilter","form","planWizardGeneralStep","planWizardVMStep","planWizardInstancePropertiesStep","planWizardAdvancedOptionsStep","planWizardScheduleStep","getCurrentTargetProvider","mappingId","values","infrastructure_mapping","selectedMapping","mapping","getMappingType","transformation_mapping_items","_reduxForm","BootstrapSelect","renderFormGroup","_this$props","input","label","required","data_live_search","options","option_key","option_value","choose_text","_this$props$meta","meta","visited","error","active","disabled","_this$props2","inline_label","stacked_label","labelWidth","controlWidth","allowClear","otherProps","formGroupProps","key","validationState","FormGroup","componentClass","ControlLabel","className","data-live-search","value","map","val","Form","HelpBlock","render","render_within_form","horizontal","prevProps","optionsChanged","some","option","index","prevOption","$","selectpicker","onChange","pre_selected_value","_props2","form_name","_props2$meta","dispatch","onSelect","on","e","focus","target","object","bool","array","number","DELETE_V2V_INFRASTRUCTURE_MAPPING","FETCH_V2V_CLOUD_NETWORKS","FETCH_V2V_CLOUD_TENANTS","FETCH_V2V_CLOUD_VOLUME_TYPES","FETCH_V2V_CLUSTERS","FETCH_V2V_DATASTORES","FETCH_V2V_NETWORKS","FETCH_V2V_TRANSFORMATION_MAPPINGS","HIDE_V2V_DELETE_CONFIRMATION_MODAL","OPEN_V2V_MAPPING_WIZARD_ON_MOUNT","SET_V2V_MAPPING_TO_DELETE","SHOW_V2V_DELETE_CONFIRMATION_MODAL","YES_TO_DELETE_AND_HIDE_DELETE_CONFIRMATION_MODAL","FETCH_CLOUD_TENANTS_URL","FETCH_TRANSFORMATION_MAPPINGS_URL","requests","length","reduce","prev","current","created_on","_i18nProviderWrapperFactory","componentRegistry","registry","register","_ref$name","undefined","_ref$type","_ref$store","store","_ref$data","data","Error","registerMultiple","componentObjs","forEach","obj","getComponent","registeredComponents","keys","join","markup","currentComponent","WrappedComponent","window","it","i18nProviderWrapperFactory","g","Function","eval","_typeof","module","exports","_config","updateVerticalMenu","http","post","activeMenuItem","document","querySelector","classList","remove","link_item","element","split","newActiveMenuItem","add","_targetResourcesConstants","initialState","_seamlessImmutable2","isFetchingTargetClusters","isRejectedTargetClusters","errorFetchingTargetClusters","targetClusters","arguments","action","FETCH_V2V_TARGET_CLUSTERS","set","payload","resources","_providersConstants","sufficientProviders","providers","provider","PROVIDERS","source","includes","hasRsaKey","authentications","auth","authtype","_yup","providersSchema","of","shape","nullable","_schemaHelpers","_provider","validateProviders","validateSchema","_providersValidators","_providersHelpers","isFetchingProviders","isRejectedProviders","errorFetchingProviders","hasSufficientProviders","FETCH_V2V_PROVIDERS","insufficient","_NotificationList","_Plan","_Overview","_Mappings","_Settings","_MappingWizard","_MappingWizardGeneralStep","_MappingWizardClustersStep","_MappingWizardDatastoresStep","_MappingWizardNetworksStep","_MappingWizardResultsStep","_PlanWizard","_PlanWizardVMStep","_PlanWizardResultsStep","_PlanWizardAdvancedOptionsStep","_PlanWizardInstancePropertiesStep","_EditPlanNameModal","notificationListReducers","planReducers","overviewReducers","mappingsReducers","settingsReducers","mappingWizardReducers","mappingWizardGeneralStepReducers","mappingWizardClustersStepReducers","mappingWizardDatastoresStepReducers","mappingWizardNetworksStepReducers","mappingWizardResultsStepReducers","planWizardReducers","planWizardVMStepReducers","planWizardResultsStepReducers","planWizardAdvancedOptionsStepReducers","planWizardInstancePropertiesStepReducers","editPlanNameReducers","formReducer","targetResources","_reactIntl","ShortDateTime","context","date","defaultValue","seconds","intl","formatRelative","secondsFormat","FormattedDate","day","month","hour","second","minute","timeZone","i18n","timezone","contextTypes","intlShape","any","RelativeDateTime","formatDate","year","FormattedRelative","LongDateTime","IsoDate","_NotificationConstants","notifications","newNotification","_v2","header","message","notificationType","persistent","timerdelay","actionEnabled","V2V_NOTIFICATION_ADD","concat","_toConsumableArray","Immutable","asMutable","V2V_NOTIFICATION_REMOVE","filter","notification","_reactRouterDom","NotificationList","removeNotificationAction","ToastNotificationList","TimedToastNotification","onDismiss","onMouseLeave","Link","to","_PlanWizardInstancePropertiesStepConstants","_PlanWizardConstants","tenantsWithAttributes","isFetchingTenantsWithAttributes","isRejectedTenantsWithAttributes","errorTenantsWithAttributes","bestFitFlavors","isFetchingBestFitFlavor","isRejectedBestFitFlavor","errorBestFitFlavor","instancePropertiesRows","isSettingSecurityGroupsAndBestFitFlavors","recalculateBestFitFlavorAndSecurityGroup","QUERY_V2V_OSP_TENANT_ATTRIBUTES","results","QUERY_V2V_OSP_BEST_FIT_FLAVOR","SET_V2V_BEST_FIT_FLAVORS_AND_DEFAULT_SECURITY_GROUPS","_action$payload","vmBestFitFlavors","instancePropertiesRowsUpdatedWithBestFlavor","vmFlavor","existingInstancePropertiesRow","row","vm_id","tenant","tenantsWithAttribute","tenant_id","tenantFlavors","flavors","tenantSecurityGroups","security_groups","bestFitFlavor","bestFitFlavorId","flavor_id","flavor","memory","cpus","bestFitFlavorName","defaultSecurityGroup","default_security_group","defaultSecurityGroupId","defaultSecurityGroupName","bestFlavor","bestGroup","preselectedFlavor","csvInvalidFlavorWarning","preselectedGroup","csvInvalidGroupWarning","csvFields","_existingInstanceProp","osp_flavor","osp_security_group","matchingFlavor","matchingGroup","group","existingVm","config_info","actions","vm","existingFlavor","osp_flavor_id","existingGroup","osp_security_group_id","rowUpdatedWithBestFlavor","target_cluster_name","push","SET_V2V_INSTANCE_PROPERTIES_ROWS","PLAN_WIZARD_EXITED","PLAN_WIZARD_NEXT","stepIDs","vmStep","_getTenantWithAttributesActionCreator","url","tenantIds","API","setFlavorsAndSecurityGroups","queryTenantsWithAttributesAction","attributes","uri","URI","addSearch","expand","toString","response","mappings","result","vmId","source_href_slug","slice","flavorId","best_fit","tenantId","destination_href_slug","_bestFitFlavorActionCreator","flavor_mappings","postBody","Promise","resolve","reject","then","catch","bestFitFlavorAction","instancePropertiesRowsAction","rows","sortableHeaderCellFormatterWithChildren","cellProps","column","sortingColumns","onSort","sortDirection","property","direction","TableHeading","sort","aria-label","CancelButton","ConfirmButton","closest","matches","Element","prototype","msMatchesSelector","webkitMatchesSelector","selector","el","documentElement","contains","nodeType","parentElement","parentNode","TableConfirmButtonsRow","renderChildren","isEditing","Children","toArray","lastCell","pop","lastCellChildren","_inlineEditFormatter$","td","renderEdit","additionalData","tdChildren","cloneElement","apply","renderConfirmButtons","_this2","buttonsClass","buttonsClassName","_ConfirmButton2","messages","confirmButtonLabel","onMouseUp","onConfirm","_CancelButton2","cancelButtonLabel","onCancel","rowClass","shouldComponentUpdate","arrayOf","TableInlineEditRow","last","_TableConfirmButtonsRow2","buttonsPosition","rowDimensions","position","bottom","height","top","tableRendersInModal","right","width","_recompose","PlanWizardInstancePropertiesStepTable","Table","TABLE_SORT_DIRECTION","ASC","editing","pagination","page","perPage","perPageOptions","pageChangeValue","customHeaderFormatters","customHeaderFormattersDefinition","inlineEditController","_ref2","rowData","updatedInstancePropertiesRowOnStandby","onActivate","_ref3","_ref4","updatedRows","_ref5","_ref6","updatedInstanceProp","selectedIndex","getAttribute","updatedRowdata","_defineProperty","renderFlavorName","flavorName","allFitFlavorIdsForVM","renderCsvWarning","warningMessage","OverlayTrigger","overlay","Popover","style","maxWidth","placement","trigger","delay","rootClose","inlineEditFormatter","inlineEditFormatterFactory","renderValue","renderedValue","tenantsWithAttributesById","destinationTenantIdsBySourceClusterId","optionsAttribute","cell","inlineEditSelect","ems_cluster_id","FormControl","opt","renderName","inlineEditButtonsFormatter","padding","getColumns","getSortingColumns","sortableTransform","selectedColumn","byColumn","sortingOrder","defaultSortingOrder","strategy","strategies","byProperty","sortingFormatter","flavorColumnPopoverContent","flavorColumnPopover","_StopPropagationOnClick2","rowSpan","colSpan","transforms","formatters","customFormatters","sortableHeaderCellFormatter","tableCellFormatter","actionHeaderCellFormatter","onFirstPage","setPage","onLastPage","totalPages","onNextPage","onPageInput","onPerPageSelect","eventKey","newPaginationState","onPreviousPage","onSubmit","Number","isNaN","currentRows","_this$state","compose","paginate","sorter","columns","orderBy","Math","ceil","minimalInstancePropertiesRows","_state","sortedPaginatedRows","fluid","PfProvider","striped","bordered","hover","dataTable","inlineEdit","components","body","Header","headerRows","rowKey","onRow","_ref7","rowIndex","role","PaginationRow","viewType","PAGINATION_VIEW","TABLE","pageInputValue","amountOfPages","itemCount","itemsStart","itemsEnd","_react","_OverviewConstants","PlanWizardInstancePropertiesStep","fetchOpenstackTenantUrl","queryOpenstackTenantAttributes","vmStepSelectedVms","bestFitFlavorUrl","shouldPrefillForEditing","targetTenants","item","destination_type","OSP_TENANT","destination_id","sourceAndDestinationHrefSlugsForBestFit","destinationTenantId","source_id","getTenantsById","getDestinationTenantIdsBySourceClusterId","Field","validate","reduxForm","initialValues","instancePropertiesVms","destroyOnUnmount","playbookSchema","_serviceTemplateAnsiblePlaybook","playbooksSchema","_serviceTemplateAnsiblePlaybooks","validatePlaybooks","playbooks","_PlanWizardAdvancedOptionsStepValidators","_PlanWizardAdvancedOptionsStepConstants","isFetchingPlaybooks","isRejectedPlaybooks","errorPlaybooks","vms","FETCH_V2V_PLAYBOOKS","SET_V2V_ADVANCED_OPTIONS_STEP_VMS","RESET_V2V_ADVANCED_OPTIONS_STEP_VMS","_getPlaybooksActionCreator","get","fetchPlaybooksAction","setVmsAction","resetVmsAction","vmSelectionCellFormatter","onSelectRow","playbook","checkboxId","checkboxLabel","scheduleType","match","SelectionCell","Checkbox","checked","isRequired","vmSelectionHeaderCellFormatter","onSelectAllRows","unselectedRows","r","otherCellProps","SelectionHeading","event","PlanWizardAdvancedOptionsStepTable","filteredRows","filteredSearchedRows","updatedSelections","Set","indexOf","selectRow","deselectRow","selectedRowId","onValueKeyPress","keyEvent","currentValue","currentFilterType","filterAdded","stopPropagation","preventDefault","onFindAction","activeFilters","searchFilterValue","onFindExit","preMigration","preMigrationPlaybook","_vmSelectionCellFormatter2","postMigration","postMigrationPlaybook","_this$state2","_rowFilter2","_searchFilter2","clearFilters","removeFilter","updated","updateCurrentValue","field","filterText","selectFilterType","filterType","_this$state3","filterTypes","FILTER_TYPES","_props$meta","pristine","tableFooter","Toolbar","Filter","TypeSelector","onFilterTypeSelected","placeholder","onKeyPress","RightContent","_CustomToolbarFind2","onEnter","onExit","Results","ActiveLabel","List","Item","onRemove","filterData","_BootstrapSelect","PlanWizardAdvancedOptionsStep","onSelectChange","change","preselectPlaybooksForVms","playbookVms","advancedOptionsStepForm","updatePlaybookSelections","applyPlaybookSelections","fetchPlaybooksUrl","Spinner","loading","plansBody","V2V_SET_PLANS_BODY","V2V_SET_PLAN_SCHEDULE","V2V_PLAN_WIZARD_SHOW_ALERT","merge","V2V_PLAN_WIZARD_HIDE_ALERT","_FormField","PlanWizardScheduleStep","targetProvider","migration_plan_choice_radio","FormField","help","_reactRedux","_PlanWizardSelectors","connect","_reduxFormValidators","_constants","PlanWizardGeneralStep","editingOrphanedPlan","showAlertAction","hideAlertAction","msg","transformation_mapping","validation","maxLength","maxLengthWarning","requiredMessage","asyncValidate","asyncBlurFields","_PlanWizardActions","planWizard","prefilledMappingId","transformation_mapping_id","prefilledMappingExists","archivedTransformationPlans","planWizardId","vm_choice_radio","enableReinitialize","keepDirtyOnReinitialize","alertType","PlanWizardBody","nextProps","nextState","JSON","stringify","wizardSteps","_ModalWizard2","loadingTitle","loadingMessage","stepButtonsDisabled","steps","loaded","activeStepIndex","activeStep","goToStep","disableNextStep","createMigrationPlans","planName","planDescription","infrastructureMapping","selectedVms","ospInstanceProperties","_planWizardAdvancedOp","_planWizardAdvancedOp2","pre_service","post_service","prov_type","pre_service_id","post_service_id","PlanWizard","planWizardVMStepContainer","planWizardResultsStepContainer","planWizardAdvancedOptionsStepContainer","planWizardInstancePropertiesStepContainer","getWizardSteps","generalStep","_PlanWizardGeneralStep2","disableGoto","instancePropertiesStep","advancedOptionsStep","scheduleStep","_PlanWizardScheduleStep2","resultsStep","selectedMappingId","getActiveWizardStep","prevStep","resetVmStepAction","setMetadataWithBackButtonClickedAction","max","nextStep","_this$props3","setPlansBodyAction","setPlanScheduleAction","setMigrationsFilterAction","showConfirmModalAction","hideConfirmModalAction","setMetadataWithNextButtonClickedAction","asyncErrors","overwriteCsvConfirmModalProps","goToStepId","icon","dialogClassName","backdropClassName","MIGRATIONS_FILTERS","inProgress","notStarted","min","targetStepIndex","findIndex","step","hidePlanWizardAction","planWizardExitedAction","alertText","onFirstStep","onFinalStep","currentStepProp","currentStepForm","currentStepHasErrors","syncErrors","saveButtonLabel","wizardTitle","Wizard","show","onClose","onExited","backdrop","_PlanWizardBody2","Footer","_PlanWizardResultsStepConstants","isPostingPlans","isRejectedPostingPlans","errorPostingPlans","migrationPlansResult","isPuttingPlans","isRejectedPuttingPlans","errorPuttingPlans","POST_V2V_MIGRATION_PLANS","PUT_V2V_MIGRATION_PLANS","POST_V2V_MIGRATION_REQUESTS","postMigrationRequestsAction","responseMigrationRequest","postMigrationPlansAction","migrationPlans","planSchedule","_postMigrationPlansActionCreator","editMigrationPlansAction","planId","resource","_editMigrationPlansActionCreator","planHasBeenEdited","originalConfigInfo","currentConfigInfo","PlanWizardResultsStep","renderResult","migrationPlanMessage","migrationPlanFollowupMessage","migrationPlanIcon","showVmPowerWarning","postPlansUrl","editPlansUrl","migrationRequestsResult","_WizardLoadingState2","errorData","errorMessage","_WizardErrorState2","migrationPlanSaved","migrationPlanProgress","_PlanWizardVMStepConstants","isValidatingVms","numPendingValidationRequests","isRejectedValidatingVms","validationServiceCalled","errorValidatingVms","valid_vms","invalid_vms","conflict_vms","isQueryingVms","isVmsQueryRejected","vmsQueryError","V2V_VALIDATE_VMS","numPendingRequests","newValidVms","_formatValidVms","valid","newInvalidVms","_formatInvalidVms","invalid","newConflictedVms","_formatConflictVms","conflicted","combineRequests","QUERY_V2V_PLAN_VMS","V2V_VM_STEP_RESET","validateVmsAction","import","service_template_id","csvRows","_validateVmsActionCreator","csvImportAction","reset","csvParseErrorAction","errMsg","queryPreselectedVmsAction","ids","_queryPreselectedVmsActionCreator","CSVDropzoneField","onFileDrop","acceptedFiles","rejectedFiles","handleUnparsedFile","alert","fileHandle","onCSVParseSuccess","onCSVParseFailure","reader","FileReader","onload","csv","parse","err","trimWhiteSpaces","headerRow","mapCSVColumnNameToKey","rowObjects","rowObject","readAsBinaryString","utf8","decode","trim","k","_reactDropzone2","accept","onDrop","getRootProps","getInputProps","isDragActive","open","_classnames2","conflict","selected","disabledRows","PlanWizardVMStepTable","_initialiseProps","initialSelectedRows","warning","selectedRows","discoveryMode","onCsvImportAction","_this3","danger","_state2","selectableRows","_state3","selectedRowIndex","updatedSelectedRows","updatedRow","_state4","_state5","_state6","PlanWizardVMStep","parsedRows","infrastructure_mapping_id","validateVmsUrl","shift","validateVms","showOverwriteCsvConfirmModal","getVmIds","vmNames","isCSVParseError","errorParsingCSV","formSelectedVms","preselectedVmIds","_CSVDropzoneField2","validVms","deep","inValidsVms","conflictVms","combined","rowsWithSelections","oneOf","_MappingWizardResultsStepConstants","isUpdatingMapping","isPostingMappings","isRejectedUpdatingMapping","isRejectedPostingMappings","errorUpdatingMapping","errorPostingMappings","transformationMappingsResult","POST_V2V_TRANSFORM_MAPPINGS","UPDATE_V2V_TRANSFORMATION_MAPPING","fetchTransformationMappingsAction","_MappingWizardConstants","continueToPlanAction","CONTINUE_TO_PLAN","V2V_MAPPING_WIZARD_EXITED","postTransformMappingsAction","transformMappings","_postTransformMappingsActionCreator","updateTransformationMappingAction","transformationMappingBody","_updateTransformationMappingActionCreator","transformationHasBeenEdited","transformation","originalTransformationItems","transformationItem","SOURCE_HREF_SLUGS","source_type","destination","DESTINATION_HREF_SLUGS","normalizeTransformationItem","currentTransformationItems","_MappingsConstants","MappingWizardResultsStep","onContinueToPlanWizard","redirectTo","postMappingsUrl","transformationsBody","editingMapping","fetchTransformationMappingsUrl","_MappingWizardNetworksStepConstants","isFetchingSourceNetworks","isRejectedSourceNetworks","errorSourceNetworks","isFetchingTargetNetworks","isRejectedTargetNetworks","errorTargetNetworks","sourceNetworks","targetNetworks","isFetchingPublicCloudNetworks","isRejectedPublicCloudNetworks","errorPublicCloudNetworks","publicCloudNetworks","FETCH_V2V_SOURCE_NETWORKS","FETCH_V2V_TARGET_NETWORKS","FETCH_V2V_PUBLIC_CLOUD_NETWORKS","_getSourceNetworksActionCreator","lans","lan","providerName","ext_management_system","clusterId","_filterSourceNetworks","_getTargetNetworksActionCreator","fetchSourceNetworksAction","QUERY_ATTRIBUTES","V2V_TARGET_PROVIDER_NETWORK_KEYS","network","_filterTargetNetworks","_getPublicCloudNetworksActionCreator","fetchTargetNetworksAction","targetCloudTenant","_normalizePublicCloudNetworks","fetchPublicCloudNetworksAction","normalizeCloudNetworkHref","normalizedHref","replace","_networkKey","_helpers2","NetworksStepForm","selectedSourceNetworks","selectedTargetNetwork","selectedNode","selectSourceNetwork","sourceNetwork","prevState","selectedSourceNetwork","networkKey","selectTargetNetwork","targetNetwork","addNetworkMapping","_this$props$input","networksStepMappings","selectedCluster","selectedClusterMapping","groupedSourceNetworks","noMappingForTargetCluster","targetClusterWithNetworkMappings","addingToExistingMapping","nodes","networkMapping","networksStepMappingToAdd","clustersMappingWithTreeViewAttrs","targetNetworkWithTreeViewAttrs","sourceNetworkGroupRep","networkGroupingForRep","networkGroupRep","selectNode","_this$props$input2","targetClusterWithNetworksMappings","networksMappings","targetCluster","networksMapping","removeNode","_this$props$input3","updatedNetworksStepMappings","networksStepMapping","updatedMapping","mappingWithTargetNetworkRemoved","updatedNodes","updatedNetworksMappings","mappingWithSourceNetworkRemoved","removeAll","allNetworksMapped","filteredNetworks","groupedTargetNetworks","preLoadingMappings","classes","is-hidden","sourceCounter","_DualPaneMapperCount2","selectedItems","totalItems","sourceNetworksFilter","targetCounter","marginLeft","_DualPaneMapper2","handleButtonClick","validMapping","_DualPaneMapperList2","listTitle","counter","_DualPaneMapperListItem2","text","v_parent_datacenter","handleClick","handleKeyPress","multiProviderTargetLabel","getRepresentatives","_MappingWizardTreeView2","mappingsForTreeView","MappingWizardNetworksStep","clusterMappings","sourceClusters","clusters","clusterMapping","selectSourceCluster","fn","initialize","initialized","mappingWizardNetworksStepForm","createNetworksMappings","updateMappings","_props3","clusterOptions","getClusterOptions","sourceClusterId","_props4","fetchNetworksUrls","sourceCluster","HAS_CLOUD_NETWORKS","public","FETCH_NETWORK_URLS","_MappingWizardDatastoresStepConstants","isFetchingSourceDatastores","isRejectedSourceDatastores","errorSourceDatastores","isFetchingTargetDatastores","isRejectedTargetDatastores","errorTargetDatastores","sourceDatastores","targetDatastores","FETCH_V2V_SOURCE_DATASTORES","FETCH_V2V_TARGET_DATASTORES","_getSourceDatastoresActionCreator","storages","storage","datacenterName","_filterSourceDatastores","_getTargetDatastoresActionCreator","fetchSourceDatastoresAction","V2V_TARGET_PROVIDER_STORAGE_KEYS","_filterTargetDatastores","fetchTargetDatastoresAction","sourceDatastoreFilter","datastoresToFilter","datastoreStepMappings","mappedDatastores","mappedDatastoresArray","targetClusterDatastoreMappings","datastores","datastoreMapping","datastore","mappedDatastore","_MappingWizardDatastoresStepSelectors","DatastoresStepForm","selectedSourceDatastores","selectedTargetDatastore","selectSourceDatastore","sourceDatastore","selectTargetDatastore","targetDatastore","addDatastoreMapping","selectable","targetDatastoreTreeViewInfo","expanded","datastoresStepMappings","targetClusterWithDatastoresMappings","datastoresMappings","datastoresMapping","allDatastoresMapped","filteredDatastores","sourceDatastoreInfo","targetDatastoreInfo","MappingWizardDatastoresStep","mappingWizardDatastoresStepForm","createDatastoresMappings","fetchStoragesUrls","FETCH_STORAGE_URLS","_MappingWizardClustersStepConstants","isFetchingSourceClusters","isRejectedSourceClusters","errorSourceClusters","errorTargetClusters","isQueryingProviders","isRejectedQueryProviders","errorQueryProviders","FETCH_V2V_SOURCE_CLUSTERS","QUERY_V2V_PROVIDERS","fetchSourceClustersAction","_getSourceClustersActionCreator","queryProvidersAction","providerIds","_queryProvidersActionCreator","getProviderIds","cluster","ems_id","ClustersStepTreeView","selectMapping","removeMapping","TreeView","highlightOnSelect","highlightOnHover","_MappingWizardClustersStepSelectors","ClustersStepForm","selectedTargetCluster","selectedSourceClusters","selectTargetCluster","addMapping","clustersStepMappings","clustersStepMapping","updateMapping","createNewMapping","targetClusterWithSourceClusters","noClustersFound","allClustersMapped","filteredClusters","rhvConversionHosts","filteredSourceClusters","sourceClustersFilter","showWarning","RHV","ch","OPENSTACK","providerHasSshKeyPair","TARGET_WARNING_MESSAGES","_ClustersStepTreeView2","MappingWizardClustersStep","fetchClusters","fetchSourceClustersUrl","fetchTargetComputeUrls","fetchTargetClustersAction","queryProvidersUrl","safeToProceed","ospConversionHosts","FETCH_TARGET_COMPUTE_URLS","QUERY_PROVIDERS_URL","webpackPolyfill","deprecate","paths","defineProperty","enumerable","l","i","mappingUrlRegex","getTransformationMappingItemsByDestinationType","createTransformationMappings","mappingWizardGeneralStep","mappingWizardClustersStep","mappingWizardDatastoresStep","mappingWizardNetworksStep","clusterTransformationMappings","clusterTransformationsArray","transformations","clusterTransformations","datastoreTransformationMappings","datastoreTransformationsPerTargetCluster","targetClusterWithDatastoreMappings","datastoreTransformationsForTargetCluster","datastoreTransformationsPerDatastoreMapping","targetDatastoreWithSourceDatastores","datastoreTransformations","networkTransformationMappings","networkTransformationsPerTargetCluster","networkTransformationsForTargetCluster","networkTransformationsPerNetworkMapping","targetNetworkWithSourceNetworks","networkTransformations","getMappedSourceClusters","getSourceClustersWithMappings","idsPerTargetCluster","targetClusterWithMappings","idsForTargetCluster","idsPerMapping","targetObjectWithSourceObjects","idsForSourceObjects","sourceObject","from","groupClusterTransformationItemsByDestinationId","getTransformationMappingItemsBySourceType","determineTargetProvider","TRANSFORMATION_MAPPING_ITEM_DESTINATION_TYPES","openstack","_MappingWizardGeneralStepConstants","conversionHosts","isFetchingConversionHosts","isRejectedConversionHosts","errorFetchingConversionHosts","SET_V2V_EDITING_MAPPING","FETCH_V2V_CONVERSION_HOSTS","setEditingMappingAction","fetchConversionHostsAction","_getConversionHostsActionCreator","newTransformationName","duplicateName","names","transformationMapping","existingTransformationName","duplicateIsEditingMappingName","MappingWizardGeneralStep","componentDidMount","fetchConversionHostsUrl","selection","V2V_TARGET_PROVIDERS","warningModalVisible","V2V_SET_TRANSFORMATIONS_BODY","V2V_SHOW_WARNING_MODAL","sourceClustersWithoutMappings","V2V_HIDE_WARNING_MODAL","V2V_SHOW_ALERT","V2V_HIDE_ALERT","mappingWizardFormFilter","WarningModal","hideWarningModalAction","currentStep","Modal","onHide","aria-hidden","toLowerCase","autoFocus","MappingWizardBody","mappingWizardGeneralStepContainer","mappingWizardClustersStepContainer","mappingWizardDatastoresStepContainer","mappingWizardNetworksStepContainer","mappingWizardResultsStepContainer","mappingWizardSteps","MappingWizard","setTransformationsBodyAction","showWarningModalAction","sourceClustersWithoutNetworksMappings","sourceClustersWithoutDatastoresMappings","hideMappingWizard","hideMappingWizardAction","mappingWizardExitedAction","_MappingWizardBody2","_WarningModal2","addAssociatedPlansCount","associatedPlansCount","service_templates","FETCH_V2V_PLAN_REQUEST","FETCH_V2V_PLAN","FETCH_V2V_ALL_REQUESTS_WITH_TASKS_FOR_PLAN","RESET_PLAN_STATE","FETCH_V2V_MIGRATION_TASK_LOG","DOWNLOAD_LOG_CLICKED","DOWNLOAD_LOG_COMPLETED","FETCH_V2V_ANSIBLE_PLAYBOOK_TEMPLATE","FETCH_V2V_ORCHESTRATION_STACK","CANCEL_V2V_PLAN_REQUEST_TASKS","REMOVE_TASKS_SELECTED_FOR_CANCELLATION","UPDATE_TASKS_SELECTED_FOR_CANCELLATION","DELETE_ALL_TASKS_SELECTED_FOR_CANCELLATION","ADD_TASKS_TO_MARKED_FOR_CANCELLATION","ADD_TASK_TO_NOTIFICATION_SENT_LIST","FETCH_V2V_REQUEST_TASK","FETCH_V2V_CONVERSION_HOST","REQUEST_TASKS_URL","STATUS_MESSAGE_KEYS","ACQUIRE_TRANSFORMATION_HOST","ASSESS_MIGRATION","AUTOMATION_STARTING","COLLAPSE_SNAPSHOTS","CONVERT_DISKS","FAILED","SOURCE_MIGRATED","MIGRATING","MIGRATION_COMPLETE","POST_MIGRATION","POWER_OFF","POWER_ON","PRE_MIGRATION","PRE_TRANSFORM_VM","REFRESH_INVENTORY","RESTORE_VM_ATTRIBUTES","RUN_PRE_MIGRATION_PLAYBOOK","RUN_POST_MIGRATION_PLAYBOOK","TRANSFORM_VM","UPDATE_DESCRIPTION","VALIDATING","VM_TRANSFORMATIONS_COMPLETED","VM_MIGRATED","VM_TRANSFORMATIONS_FAILED","STATUS_MESSAGES","CANCELLED","V2V_MIGRATION_STATUS_MESSAGES","networksSchema","switch_id","uid_ems","datastoresSchema","clustersSchema","emstype","_clusters","_datastores","_transformationMappings","_networks","validateClusters","validateDatastores","validateNetworks","networks","validateMappings","mappingsSchema","_MappingsValidators","cloudNetworks","cloudTenants","cloudVolumeTypes","deleteInfrastructureMappingResponse","errorCloudNetworks","errorCloudTenants","errorCloudVolumeTypes","errorClusters","errorDatastores","errorDeleteInfrastructureMapping","errorNetworks","errorTransformationMappings","isDeletingInfrastructureMapping","isFetchingCloudNetworks","isFetchingCloudTenants","isFetchingCloudVolumeTypes","isFetchingClusters","isFetchingDatastores","isFetchingNetworks","isFetchingTransformationMappings","isRejectedCloudNetworks","isRejectedCloudTenants","isRejectedCloudVolumeTypes","isRejectedClusters","isRejectedDatastores","isRejectedInfrastructureMapping","isRejectedNetworks","isRejectedTransformationMappings","mappingToDelete","mappingWizardVisible","openMappingWizardOnMount","showDeleteConfirmationModal","yesToDeleteInfrastructureMapping","V2V_HIDE_MAPPING_WIZARD","V2V_SHOW_MAPPING_WIZARD","MappingTarget","MappingSource","DeleteInfrastructureMappingConfirmationModal","hideDeleteConfirmationModalAction","yesToDeleteInfrastructureMappingAction","notStartedTransformationPlans","finishedWithErrorTransformationPlans","CloseButton","planNames","deleteMessageAboutUnMigratedVMs","deleteMessageAboutPlansUsingMapping","unUsedMappingInPlans","mappingNameStyled","regularDeleteMessage","dangerouslySetInnerHTML","__html","displayDeleteMessage","_MomentDate","_InfrastructureMappingsListConstants","InfrastructureMappingsList","transformationMappingsMutable","clusterName","toggleExpand","expandType","closeExpand","renderEmptyState","_ShowWizardEmptyState2","createInfraMappingClick","renderHeadingWithLink","renderMappingErrorsPopoverIcon","resourceType","inProgressRequestsTransformationMappings","showDeleteConfirmationModalAction","setMappingToDeleteAction","showMappingWizardEditModeAction","_ListViewToolbar2","INFRA_MAPPINGS_FILTER_TYPES","sortFields","INFRA_MAPPINGS_SORT_FIELDS","listItems","filteredSortedPaginatedListItems","renderFilterControls","renderSortControls","renderActiveFilters","renderPaginationRow","Row","overflow","paddingBottom","ListView","marginTop","items","_mapInfrastructureMap","mapInfrastructureMappings","headerText","getHeaderText","sourceClusterCount","targetClusterCount","sourceDatastoreCount","targetDatastoreCount","sources","sourceLanCount","targetLanCount","heading","_reactEllipsisWithTooltip2","stacked","compoundExpand","compoundExpanded","onCloseCompoundExpand","additionalInfo","InfoItem","Expand","toggleExpanded","n__","inProgressRequestsTransformationMapping","xs","mappedTarget","_MappingSource2","_MappingTarget2","formatDateTime","created_at","_DeleteInfrastructureMappingConfirmationModal2","mutableMappings","existing","m","Mappings","mappingWizard","fetchArchivedTransformationPlansUrl","fetchCloudNetworksAction","fetchCloudNetworksUrl","fetchCloudTenantsAction","fetchCloudTenantsUrl","fetchCloudVolumeTypesAction","fetchCloudVolumeTypesUrl","fetchClustersAction","fetchClustersUrl","fetchDatastoresAction","fetchDatastoresUrl","fetchNetworksAction","fetchNetworksUrl","fetchProvidersAction","fetchProvidersUrl","fetchTransformationPlansAction","fetchTransformationPlansUrl","showMappingWizardAction","all","archived","pollingInterval","willUnmount","startPolling","componentDidUpdate","deleteInfrastructureMappingAction","mappinWizardVisible","stopPolling","activeTransformationPlans","_Toolbar2","Breadcrumb","_InfrastructureMappingsList2","migrationPlansExist","FETCH_ARCHIVED_TRANSFORMATION_PLANS_URL","FETCH_TRANSFORMATION_PLANS_URL","FETCH_V2V_PROVIDERS_URL","_PlanConstants","removeCancelledTasksFromSelection","allSelectedTasksForCancel","alreadyCancelledTasks","selectedTask","every","cancelledTask","excludeDownloadDoneTaskId","allDownloadLogInProgressTaskIds","taskId","includeDownloadInProgressTaskId","getFailedMigrations","vmTasks","task","status","taskCompletedUnsuccessfully","getSuccessfulMigrations","taskCompletedSuccessfully","allVMTasksForRequestOfPlan","requestWithTasks","tasks","taskDetails","delivered_on","updated_on","completed","cancelation_status","log_available","virtv2v_wrapper","v2v_log","prePlaybookRunning","pre","job_state","postPlaybookRunning","prePlaybookComplete","postPlaybookComplete","progress","diskSpaceCompletedGb","percentComplete","totalDiskSpaceGb","grepVMName","_grepVMName","_slicedToArray","descriptionPrefix","vmName","startDateTime","lastUpdateDateTime","elapsedTime","completedSuccessfully","current_description","virtv2v_disks","totalDiskSpace","a","b","size","_numeral2","format","percent","diskSpaceCompleted","round","processVMTasks","_getMostRecentVMTasksFromRequests2","incompleteCancellationTasks","tasksForCancel","completedTasksOfPlan","isFetchingPlanRequest","isRejectedPlanRequest","planRequestPreviouslyFetched","errorPlanRequest","planRequestTasks","planRequestFailed","planRequestDenied","isFetchingPlan","isRejectedPlan","errorPlan","planArchived","isRejectedVms","errorVms","isFetchingAnsiblePlaybookTemplate","isRejectedAnsiblePlaybookTemplate","errorAnsiblePlaybookTemplate","ansiblePlaybookTemplate","isFetchingOrchestrationStack","isRejectedOrchestrationStack","errorOrchestrationStack","orchestrationStack","selectedTasksForCancel","markedForCancellation","failedMigrations","successfulMigrations","notificationsSentList","isFetchingRequestTask","isRejectedRequestTask","requestTask","errorRequestTask","vmTasksForRequestOfPlan","mostRecentRequest","commonUtilitiesHelper","getMostRecentEntityByCreationDate","vmsBeingProcessedInCurrentRun","miq_request_tasks","addTaskToNotificationAlreadySentList","downloadLogInProgressTaskIds","conversion_host","_fileSaver","fetchOrchestrationStackAction","playbookScheduleType","_playbookScheduleType","schedule","job_id","playbookLogFileName","file","File","stdout","saveAs","successMsg","_getOrchestrationStackActionCreator","fetchAnsiblePlaybookTemplateAction","_getAnsiblePlaybookTemplateActionCreator","fetchTasksForAllRequestsForPlanAction","allRequests","_getTasksForAllRequestsForPlanActionCreator","queryPlanVmsAction","_queryPlanVmsActionCreator","_getPlanActionCreator","fetchRequestTaskAction","fetchPlanAction","resetPlanStateAction","downloadLogAction","logType","filenameSuffix","v2vLogFileName","log_contents","failureMsg","status_message","cancelPlanRequestTasksAction","completedTasks","incompleteTasks","t","cancelSuccessMsgWithVMNames","updateSelectedTasksForCancelAction","updatedSelectedCancellationTasks","deleteAllSelectedTasksForCancelAction","dispatchVMTasksCompletionNotificationAction","migration","successMessage","_getRequestTaskActionCreator","fetchConversionHostAction","FINISHED_PLAN_FILTER_TYPES","filterValues","ACTIVE_PLAN_FILTER_TYPES","FINISHED_PLAN_SORT_FIELDS","isNumeric","ACTIVE_PLAN_SORT_FIELDS","PlanEmptyState","descriptionIsNode","PlanVmsList","planVms","n","minWidth","paddingRight","UtilizationBar","usedTooltipFunction","Tooltip","availableTooltipFunction","descriptionPlacementTop","PlanRequestDetailList","showConfirmCancel","fetchOrchestrationStackUrl","overlayTriggerClick","fetchConversionHostUrl","playbookStatuses","runningPlaybook","fetchAnsiblePlaybookTemplateUrl","getCancelSelectionState","filteredListItems","allSelected","noneSelected","handleCheckboxChange","_this$props4","updatedSelectedTasks","handleSelectAllCheckboxChange","deselectAllTasks","selectAllInProgressTasks","taskIsSelected","onCancelMigrationsCancel","onCancelMigrationsClick","onCancelMigrationsConfirm","_this$props5","cancelPlanRequestTasksUrl","_getCancelSelectionSt","totalNumTasks","selectAllCheckbox","paddingLeft","DropdownButton","MenuItem","taskMessage","taskCancelled","leftContent","backgroundColor","popoverContent","current_state","states","statusMessage","checkboxInput","flexDirection","alignItems","marginRight","display","textAlign","_TickingIsoElapsedTime2","pullRight","_ConfirmModal2","_PlanRequestDetailListConstants","Plan","fetchTasksForAllRequestsForPlanUrl","planRequestTasksMutable","vmsMutable","planNotStarted","planFinished","fetchPlanUrl","miq_requests","vm_ids","_getMostRecentRequest2","request_state","icons","success","failed","breadcrumbIcon","defaultSortTypeIndex","_PlanRequestDetailList2","_PlanEmptyState2","_PlanVmsList2","controlId","optionKey","optionValue","_ref$meta","touched","info","onChangeWithMaxLength","newValue","parseInt","htmlFor","renderField","_SettingsConstants","conversionHostTasks","conversionHostTasksByResource","conversionHostToDelete","conversionHostDeleteModalVisible","conversionHostRetryModalMounted","conversionHostRetryModalVisible","conversionHostTaskToRetry","conversionHostWizardMounted","conversionHostWizardVisible","errorDeleteConversionHost","errorFetchingConversionHostTasks","errorFetchingServers","errorFetchingSettings","errorPostingConversionHosts","errorSavingSettings","fetchingServersRejected","fetchingSettingsRejected","isDeletingConversionHost","isFetchingConversionHostTasks","isFetchingServers","isFetchingSettings","isPostingConversionHosts","isRejectedDeletingConversionHost","isRejectedFetchingConversionHosts","isRejectedFetchingConversionHostTasks","isRejectedPostingConversionHosts","isSavingSettings","postConversionHostsResults","savedSettings","savingSettingsRejected","servers","V2V_FETCH_SERVERS","V2V_FETCH_SETTINGS","getFormValuesFromApiSettings","V2V_PATCH_SETTINGS","FETCH_V2V_CONVERSION_HOST_TASKS","tasksWithMetadata","parseConversionHostTasksMetadata","tasksByResource","indexConversionHostTasksByResource","SHOW_V2V_CONVERSION_HOST_WIZARD","HIDE_V2V_CONVERSION_HOST_WIZARD","V2V_CONVERSION_HOST_WIZARD_EXITED","POST_V2V_CONVERSION_HOSTS","SET_V2V_CONVERSION_HOST_TO_DELETE","SHOW_V2V_CONVERSION_HOST_DELETE_MODAL","HIDE_V2V_CONVERSION_HOST_DELETE_MODAL","DELETE_V2V_CONVERSION_HOST","SET_V2V_CONVERSION_HOST_TASK_TO_RETRY","SHOW_V2V_CONVERSION_HOST_RETRY_MODAL","HIDE_V2V_CONVERSION_HOST_RETRY_MODAL","V2V_CONVERSION_HOST_RETRY_MODAL_EXITED","_ConversionHostWizardConstants","conversionHostWizardFormFilter","newObject","stepID","getConfigureConversionHostPostBodies","locationStepValues","hostsStepValues","authStepValues","hosts","host","vmwareAuthProperties","transformationMethod","VDDK","vmware_vddk_package_url","vddkLibraryPath","vmware_ssh_private_key","vmwareSshKey","resource_type","resource_id","conversion_host_ssh_private_key","conversionHostSshKey","auth_user","providerType","openstackUser","ConversionHostWizardResultsStep","postBodies","postConversionHostsAction","postConversionHostsUrl","_SettingsActions","_ref$settings","settings","locationStep","hostsStep","authenticationStep","stateProps","dispatchProps","ownProps","requiredWithMessage","ConversionHostWizardAuthenticationStep","selectedProviderType","selectedTransformationMethod","fieldBaseProps","_SshKeyField2","getConversionHostSshKeyInfoMessage","SSH","unregisterFieldAction","forceUnregisterOnUnmount","filename","locationStepForm","authStepForm","TypeAheadSelectField","_ref$input","TypeAheadSelect","inputProps","_ConversionHostsSettingsConstants","ConversionHostWizardHostsStep","hostOptions","emptyLabel","filteredHostOptions","matchingEnableTasks","enable","FINISHED","multiple","clearButton","labelKey","highlightOnlyResult","selectHintOnEnter","objectOf","selectedClusterId","ListViewToolbar","defaultFilterTypeIndex","currentSortType","isSortNumeric","isSortAscending","filterValueSelected","filterValue","filterListItems","_listFilter2","filterSortPaginateListItems","filteredItems","_paginate2","_sortFilter2","toggleCurrentSortDirection","updateCurrentSortType","sortType","_this$state4","allFilteredTasks","renderInput","_this$state5","ValueSelector","onFilterValueSelected","filterProps","_this$state6","Sort","sortTypes","onSortTypeSelected","DirectionSelector","isAscending","_this$state7","LIST","newDefaultFilterType","newDefaultSortType","ConversionHostWizardLocationStep","selectedProviderId","resetFormAction","availableProviderOptions","selectedProviderOption","providersFilteredBySelectedType","targetClustersFilteredBySelectedProvider","selectFieldBaseProps","clusterLabel","_targetResourcesActions","_ref$targetResources","ModalWizardStateProvider","numSteps","child","onBack","onNext","ModalWizardBody","onStepClick","stepIndex","stepProps","renderLoading","Main","secondary","renderedStep","alertClasses","is-visible","Alert","Steps","step-buttons-disabled","stepObj","Step","Contents","reduxFormMap","_reduxFormMap","ModalWizard","showWizard","formContainer","currentReduxForm","hasOwnProperty","ConversionHostWizardBody","ConversionHostWizard","_ConversionHostWizardLocationStep2","_ConversionHostWizardHostsStep2","_ConversionHostWizardAuthenticationStep2","_ConversionHostWizardResultsStep2","hideConversionHostWizardAction","conversionHostWizardExitedAction","forms","activeStepNumber","activeStepForm","_ConversionHostWizardBody2","_ConversionHostWizardSelectors","SettingsActions","_moment2","TextFileInput","_ref$value","onBlur","clear","files","readFile","InputGroup","RetryConversionHostConfirmationModal","hideConversionHostRetryModalAction","conversionHostRetryModalExitedAction","retryForm","requestParams","context_data","request_params","isUsingSshTransformation","CONVERSION_HOST_TYPES","formHasErrors","paddingTop","retryConversionHost","DeleteConversionHostConfirmationModal","deleteConversionHostAction","deleteConversionHostActionUrl","hideConversionHostDeleteModalAction","ConversionHostRetryButton","setConversionHostTaskToRetryAction","showConversionHostRetryModalAction","ConversionHostRemoveButton","setHostToDeleteAction","showConversionHostDeleteModalAction","ConversionHostsListItem","listItem","isTask","mostRecentTask","_listItem$meta$tasksB","tasksByOperation","disable","mostRecentFirst","lastEnableTask","lastDisableTask","statusIcon","ERROR","operation","ENABLE","inline","taskInfoPopover","actionButtons","removeButton","taskHasRequestParams","_ConversionHostRetryButton2","_ConversionHostRemoveButton2","DISABLE","DropdownKebab","ConversionHostsList","combinedListItems","itemKey","_ConversionHostsListItem2","_DeleteConversionHostConfirmationModal2","_RetryConversionHostConfirmationModal2","ConversionHostsEmptyState","showConversionHostWizardAction","ConversionHostsSettings","hasMadeInitialFetch","hasSomeModalOpen","fetchConversionHostsAndTasks","fetchConversionHostTasksAction","fetchConversionHostTasksUrl","_ConversionHostsEmptyState2","_ConversionHostsList2","_ConversionHostWizard2","_providersActions","_ref$providers","getCombinedConversionHostListItems","NumberInput","TouchSpin","buttondown_class","buttonup_class","off","_props2$input","normalizeStringToInt","str","FORM_NAME","GeneralSettings","onApplyClick","patchSettingsAction","settingsForm","enforceConstraintsOnChange","prevValue","fieldChanging","_this$props2$settings","max_concurrent_tasks_per_host","max_concurrent_tasks_per_ems","formChangeAction","fetchServersAction","fetchServersUrl","fetchSettingsAction","fetchSettingsUrl","hasUnsavedChanges","normalize","Tabs","activeKey","unmountOnExit","Tab","_GeneralSettings2","_ConversionHostsSettings2","serviceTemplatePlaybookSchema","requestsSchema","approval_state","fulfilled_on","src_id","_plans","_requests","_playbooks","validateOverviewPlans","plans","plansSchema","validateOverviewRequests","validateOverviewMappings","validateServiceTemplatePlaybooks","_OverviewValidators","planWizardVisible","editPlanNameModalVisible","isRejectedTransformationPlans","isFetchingTransformationPlans","errorTransformationPlans","allRequestsWithTasks","isRejectedAllRequestsWithTasks","isFetchingAllRequestsWithTasks","errorAllRequestsWithTasks","requestsWithTasksPreviouslyFetched","isRejectedArchivedTransformationPlans","isFetchingArchivedTransformationPlans","errorArchivedTransformationPlans","allArchivedPlanRequestsWithTasks","isRejectedAllArchivedPlanRequestsWithTasks","isFetchingAllArchivedPlanRequestsWithTasks","errorAllArchivedPlanRequestsWithTasks","createTransformationPlanRequestResponse","isRejectedCreateTranformationPlanRequest","isCreatingTransformationPlanRequest","errorCreateTransformationPlanRequest","isContinuingToPlan","migrationsFilter","confirmModalVisible","confirmModalOptions","isArchivingTransformationPlan","isRejectedArchivingTransformationPlan","errorArchivingTransformationPlan","scheduleMigrationModal","scheduleMigrationPlan","isSchedulingMigration","isRejectedSchedulingMigration","errorSchedulingMigration","serviceTemplatePlaybooks","isFetchingServiceTemplatePlaybooks","isRejectedServiceTemplatePlaybooks","errorServiceTemplatePlaybooks","initialMigrationsFilterSet","isEditingPlanRequest","isRejectedEditingPlanRequest","errorEditingPlanRequest","requestsProcessingCancellation","isCancellingPlanRequest","isRejectedCancelPlanRequest","errorCancelPlanRequest","SHOW_CONFIRM_MODAL","HIDE_CONFIRM_MODAL","SHOW_PLAN_WIZARD","SHOW_PLAN_WIZARD_EDIT_MODE","HIDE_PLAN_WIZARD","SHOW_EDIT_PLAN_TITLE_MODAL","HIDE_EDIT_PLAN_TITLE_MODAL","FETCH_V2V_TRANSFORMATION_PLANS","planTransmutation","FETCH_V2V_ARCHIVED_TRANSFORMATION_PLANS","FETCH_V2V_SERVICE_TEMPLATE_ANSIBLE_PLAYBOOKS","FETCH_V2V_ALL_REQUESTS_WITH_TASKS","FETCH_V2V_ALL_ARCHIVED_PLAN_REQUESTS_WITH_TASKS","CREATE_V2V_TRANSFORMATION_PLAN_REQUEST","V2V_SET_MIGRATIONS_FILTER","V2V_RETRY_MIGRATION","ARCHIVE_TRANSFORMATION_PLAN","V2V_TOGGLE_SCHEDULE_MIGRATION_MODAL","V2V_SCHEDULE_MIGRATION","V2V_AUTO_SET_MIGRATIONS_FILTER","V2V_EDIT_PLAN_REQUEST","V2V_CANCEL_PLAN_REQUEST","_EditPlanNameConstants","savingPlan","savingPlanRejected","savingPlanError","V2V_EDIT_PLAN_TITLE_SHOW_ALERT","V2V_EDIT_PLAN_TITLE_HIDE_ALERT","V2V_POST_EDIT_PLAN_NAME","EditPlanNameModal","editPlanNameModal","editMigrationPlansUrl","hideEditPlanNameModalAction","_editPlanNameModal$va","disableConfirmButton","formBody","spinner","_MigrationsConstants","MigrationsCompletedList","finishedTransformationPlans","retryClick","archiveTransformationPlanAction","archiveTransformationPlanUrl","deleteTransformationPlanAction","deleteTransformationPlanUrl","addNotificationAction","toggleScheduleMigrationModal","scheduleMigration","showEditPlanNameModalAction","MIGRATIONS_FILTER_TYPES","MIGRATIONS_ARCHIVED_SORT_FIELDS","MIGRATIONS_COMPLETED_SORT_FIELDS","_getPlanScheduleInfo","_getPlanScheduleInfo3","migrationScheduled","staleMigrationSchedule","migrationStarting","showInitialScheduleButton","requestsOfAssociatedPlan","request","denied","succeedCount","archiveMigrationWarningText","confirmModalBaseProps","disableCancelButton","fetchArchived","fetchNonArchived","isMissingMapping","infraMappingName","scheduleButtons","_ScheduleMigrationButtons2","border","_DeleteMigrationMenuItem2","_ScheduleMigrationModal2","p","startPage","endOfPage","itemsCopy","x","y","a1","b1","rx","rd","as","bs","String","test","filteredTasks","ScheduleMigrationModalBody","handleChange","defaultDate","datetimeSelector","minDate","validDefaultDate","datetimepicker","useCurrent","allowInputToggle","showTodayButton","toolbarPlacement","sideBySide","today","_d","picker","toDate","MigrationsNotStartedList","migrateClick","notStartedPlans","showPlanWizardEditModeAction","MIGRATIONS_NOT_STARTED_SORT_FIELDS","editPlanDisabled","schedule_type","CardFooter","onButtonClick","CardEmptyState","emptyStateInfo","emptyStateInfoStyles","showSpinner","spinnerStyles","defaultPlaybookName","playbookTemplate","./af","./af.js","./ar","./ar-dz","./ar-dz.js","./ar-kw","./ar-kw.js","./ar-ly","./ar-ly.js","./ar-ma","./ar-ma.js","./ar-sa","./ar-sa.js","./ar-tn","./ar-tn.js","./ar.js","./az","./az.js","./be","./be.js","./bg","./bg.js","./bm","./bm.js","./bn","./bn.js","./bo","./bo.js","./br","./br.js","./bs","./bs.js","./ca","./ca.js","./cs","./cs.js","./cv","./cv.js","./cy","./cy.js","./da","./da.js","./de","./de-at","./de-at.js","./de-ch","./de-ch.js","./de.js","./dv","./dv.js","./el","./el.js","./en-au","./en-au.js","./en-ca","./en-ca.js","./en-gb","./en-gb.js","./en-ie","./en-ie.js","./en-il","./en-il.js","./en-nz","./en-nz.js","./eo","./eo.js","./es","./es-do","./es-do.js","./es-us","./es-us.js","./es.js","./et","./et.js","./eu","./eu.js","./fa","./fa.js","./fi","./fi.js","./fo","./fo.js","./fr","./fr-ca","./fr-ca.js","./fr-ch","./fr-ch.js","./fr.js","./fy","./fy.js","./gd","./gd.js","./gl","./gl.js","./gom-latn","./gom-latn.js","./gu","./gu.js","./he","./he.js","./hi","./hi.js","./hr","./hr.js","./hu","./hu.js","./hy-am","./hy-am.js","./id","./id.js","./is","./is.js","./it","./it.js","./ja","./ja.js","./jv","./jv.js","./ka","./ka.js","./kk","./kk.js","./km","./km.js","./kn","./kn.js","./ko","./ko.js","./ky","./ky.js","./lb","./lb.js","./lo","./lo.js","./lt","./lt.js","./lv","./lv.js","./me","./me.js","./mi","./mi.js","./mk","./mk.js","./ml","./ml.js","./mn","./mn.js","./mr","./mr.js","./ms","./ms-my","./ms-my.js","./ms.js","./mt","./mt.js","./my","./my.js","./nb","./nb.js","./ne","./ne.js","./nl","./nl-be","./nl-be.js","./nl.js","./nn","./nn.js","./pa-in","./pa-in.js","./pl","./pl.js","./pt","./pt-br","./pt-br.js","./pt.js","./ro","./ro.js","./ru","./ru.js","./sd","./sd.js","./se","./se.js","./si","./si.js","./sk","./sk.js","./sl","./sl.js","./sq","./sq.js","./sr","./sr-cyrl","./sr-cyrl.js","./sr.js","./ss","./ss.js","./sv","./sv.js","./sw","./sw.js","./ta","./ta.js","./te","./te.js","./tet","./tet.js","./tg","./tg.js","./th","./th.js","./tl-ph","./tl-ph.js","./tlh","./tlh.js","./tr","./tr.js","./tzl","./tzl.js","./tzm","./tzm-latn","./tzm-latn.js","./tzm.js","./ug-cn","./ug-cn.js","./uk","./uk.js","./ur","./ur.js","./uz","./uz-latn","./uz-latn.js","./uz.js","./vi","./vi.js","./x-pseudo","./x-pseudo.js","./yo","./yo.js","./zh-cn","./zh-cn.js","./zh-hk","./zh-hk.js","./zh-tw","./zh-tw.js","webpackContext","req","webpackContextResolve","code","InProgressWithDetailCard","failedOverlay","_InProgressCard2","MigrationsInProgressCard","reloadCard","acknowledgeDeniedPlanRequestAction","cancelPlanRequestAction","waitingForConversionHost","conversion_host_id","_CardEmptyState2","marginBottom","isProcessingCancellation","urlBuilder","TRANSFORMATION_PLAN_REQUESTS_URL","cardMessage","_CardFooter2","WAITING_FOR_CONVERSION_HOST_MESSAGES","plansUrl","planRequest","failedVms","tasksOfPlan","completedVMs","totalVMs","taskRunningPreMigrationPlaybook","taskRunningPostMigrationPlaybook","PLAN_JOB_STATES","PENDING","ACTIVE","playbookName","_getPlaybookName2","_InProgressWithDetailCard2","totalMigratedDiskSpace","taskDisks","totalTaskDiskSpace","totalMigratedDiskSpaceGb","vmBarLabel","diskSpaceBarLabel","availableTooltip","usedTooltip","MigrationsInProgressCards","HeightMatching","_MigrationsInProgressCard2","Migrations","activeFilter","createMigrationPlanClick","createTransformationPlanRequestClick","plansExist","borderTopColor","_MigrationsNotStartedList2","_MigrationsInProgressCards2","_MigrationsCompletedList2","ArchivedTransformationPlans","archivedPlans","countDescription","is-loading","accented","aggregated","AggregateStatusCount","AggregateStatusNotifications","AggregateStatusNotification","FinishedTransformationPlans","finishedPlans","failedPlans","schedulesSchema","run_at","start_time","ActiveTransformationPlans","activePlans","erroredPlansLen","job_status","PLAN_JOB_STATUS","NotStartedTransformationPlans","AggregateCards","Overview","showPlanWizardOrError","showPlanWizardAction","showNoMappingsError","showPlanWizardEditModeOrError","createTransformationPlanRequest","createTransformationPlanRequestAction","retryMigrationAction","renderAggregateDataCards","_this$props6","CardGrid","hasMadeInitialPlansFetch","fetchServiceTemplateAnsiblePlaybooksAction","fetchServiceTemplateAnsiblePlaybooksUrl","p1","p2","p3","p4","p5","openMappingWizardOnTransitionAction","mainContent","_Migrations2","_EditPlanNameModal2","inProgressCardsVisible","emptyStateVisible","overviewContent","overflowX","toolbarContent","history","_components","Routes","Route","exact","Redirect","coreComponent","componentSettings","isExact","_connectedReactRouter","_menu","App","ManageIQ","redux","addReducer","_reducers2","getState","router","location","pathname","isLoaded","ConnectedRouter","_NotificationList2","_Routes2","unlisten","listen","mount","reactNode","ReactDOM","unmountComponentAtNode","console","log","getDisplayName","displayName","sourceToTargetMappings","sourceClusterMappedToTargetCluster","wizardStep","clusterStepMappings","potentialAssociatedClusterStepMappings","clusterStepMapping","sourceClusterIds","storageOrNetwork","destroy","initialNow","wrappedName","I18nProviderWrapper","_React$Component","_temp","_len","args","_key","i18nLoaded","_inherits","_createClass","IntlProvider","locale","limits","getApiSettingsFromFormValues","taskNameRegex","exec","_result","resourceName","resourceId","unparsedTaskName","_task$meta","getActiveConversionHostEnableTasks","otherTask","otherIndex","attachTasksToConversionHosts","conversionHost","_conversionHost$resou","activeEnableTasks","conversionHostsWithTasks","_getServersActionCreator","_getSettingsActionCreator","newSettings","urls","settingsFormValues","patchBody","patch","payloads","_patchSettingsActionCreator","server","_getConversionHostTasksActionCreator","formName","_postConversionHostsActionCreator","_deleteConversionHostActionCreator","modalOptions","promise","_createTransformationPlanRequestActionCreator","_getTransformationMappingsActionCreator","_getTransformationPlansActionCreator","allPlansWithRequests","responseRequestsWithTasks","fetchTasksForAllRequests","collectAllRequests","editPlanRequestAction","_getServiceTemplateAnsiblePlaybooksActionCreator","additionalActions","_archiveTransformationPlanActionCreator","DELETE_TRANSFORMATION_PLAN","_deleteTransformationPlanActionCreator","scheduleTime","scheduleId","schedules","schedule_time","toUTCString","planRequestUrl","_editPlanRequestActionCreator","denial_acknowledged","_cancelPlanRequestActionCreator","_mounter","coreComponents","v2v","addReact","getElementsByTagName","htmlElemnt","I18n","zh_CN","fallbackIntl","global","Intl","_locale$split","_locale$split2","addLocaleData","en","fr","es","ja","V2V_VM_POST_VALIDATION_REASONS","empty_name","in_other_plan","migrated","not_exist","ok","duplicate","inactive","no_info_available","rhevm","NETWORK_ATTRIBUTES","STORAGE_ATTRIBUTES","_TARGET_WARNING_MESSA","_FETCH_TARGET_COMPUTE","schemaValidationEnabled","logSchemaError","errors","schema","models","abortEarly","strict","StopPropagationOnClick","onKeyUp","ems_ref","clusterMappingItems","datastoreMappingItems","networkMappingItems","mappingType","targetComputeMap","targetStoragesMap","targetNetworksMap","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_loop","c","v","_iterator","Symbol","iterator","next","done","_ret","return","storagesMap","networksMap","CloudNetwork","Lan","cloud_volume_types","cloud_volume_type","cloud_networks","missingDatastores","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_loop2","d","_iterator2","missingNetworks","_iteratorNormalCompletion3","_didIteratorError3","_iteratorError3","_step3","_loop3","MAPPING_TYPE_RESOURCE_MAP","sn","tn","targetNetworkKey","s","_iterator3","_V2V_TARGET_PROVIDER_","_V2V_TARGET_PROVIDER_2","TRANSFORMATION_MAPPING_ITEM_SOURCE_TYPES","_TRANSFORMATION_MAPPI","NotificationListActions","reducers","reducer","getVmIdsWithProperty","getVMStepSelectedVms","allVms","vmIdsWithPreService","vmIdsWithPostService","vmIds","PLAN_WIZARD_BACK","resetAdvancedOptionsStepAction","EmsCluster","Storage","CloudTenant","CloudVolumeType","DualPaneMapperListItem","warningOverlay","tabIndex","aria-selected","DualPaneMapperCount","DualPaneMapperList","has-counter","DualPaneMapper","MappingsActions","RouterActions","ProvidersActions","_OverviewSelectors","_ref$overview","activeTransformationPlansFilter","finishedWithErrorTransformationPlansFilter","notStartedTransformationPlansFilter","PlanActions","NotificationActions","params","WizardErrorState","WizardLoadingState","StateProvider","OK","_getProvidersActionCreator","_getCloudNetworksActionCreator","_getCloudTenantsActionCreator","_getCloudVolumeTypesActionCreator","_getClustersActionCreator","_getDatastoresActionCreator","_getNetworksActionCreator","getTime","headers","transformResponse","put","delete","allTasks","flattenAllTasks","flatten","groupedByVMId","groupBy","flattenVMTasksForRequestOfPlan","elapsedHours","diff","elapsedMinutes","elapsedSeconds","elapsedDays","floor","_schedules","OverviewActions","overviewRest","attachTargetProviderToOspPlans","finishedTransformationPlansFilter","combineRequestsProcessingCancellation","requestsProcessingCancellationFilter","OSP_VOLUME","OSP_NETWORK","EMS_CLUSTER","notAvailable","noRsaKey","cachedSetTimeout","cachedClearTimeout","process","defaultSetTimout","defaultClearTimeout","runTimeout","fun","setTimeout","clearTimeout","currentQueue","queue","draining","queueIndex","cleanUpNextTick","drainQueue","timeout","len","run","marker","runClearTimeout","nextTick","browser","env","argv","version","versions","addListener","once","removeListener","removeAllListeners","emit","prependListener","prependOnceListener","listeners","binding","cwd","chdir","dir","umask","tenants","tenantsById","getVmsWithTargetClusterName","flavorForVM","all_fit","flavorSlug","PlanWizardInstancePropertiesStepActions","_ref$form","_ref$form$planWizardG","instancePropertiesStepForm","PlanWizardAdvancedOptionsStepActions","configInfo","PlanWizardActions","_OverviewActions","selectedOverview","selectedForms","PlanWizardResultsStepActions","planWizardResultsStep","manageDuplicateVMRows","vmIndex","uniqueIds","splice","reason","fillMissingIds","manageNoIdVMRows","manageOddCSVImportErrors","manageBlankReason","parseVmPath","datacenter","folder","_vm$path$split2","_toArray","folderParts","attachMetadata","csvFieldsByVmName","payloadVms","vIndex","allocated_size","backfilledVms","inactiveVMCount","allVMCount","vmCount","CustomToolbarFind","dropdownShown","handleValueChange","hideDropdown","toggleDropdownShown","dropdownClasses","PlanWizardVMStepActions","MappingWizardResultsStepActions","mappingWizardResultsStep","uniqueNetworks","combineNetworks","privateNetworks","publicNetworks","normalizedPublicNetworks","shared","ntwk","_MappingWizardNetworksStepSelectors","groupedNetworks","representatives","mappedNetworks","mappedNetworksArray","mappedNetwork","sourceNetworkWithTreeViewAttrs","dedupeMappedSourceNetworks","sourceNetworkRep","dedupeMappedTargetNetworks","groupedMappings","updatedMappings","dedupedMappings","targetNetworkToRemove","sourceNetworkToRemove","updatedSourceNetworks","clusterWithNetworksUrl","targetNetworkPromises","targetClusterIds","res","updatedTargetNetworks","publicNetworksPromises","targetProviderId","publicNetworksUrl","targetNetworkIds","sourceNetworkPromises","_res","targetClustersWithNetworks","sourceNetworkResults","publicNetworksResults","resolvedPromise","mappedNetworkIds","getMappedTargetNetworks","getMappedSourceNetworks","MappingWizardNetworksStepActions","_MappingWizardActions","datastoreUsedSpace","total_space","free_space","totalUsedSpace","totalSpace","targetDatastoreAvailableSpace","matchingDatastoresMapping","targetDatastoreWithTreeviewAttrs","sourceDatastoreWithTreeviewAttrs","removeSourceDatastore","nodeToRemove","updatedSourceDatastores","isTargetDatastore","updatedDatastoresMappings","clusterWithStoragesUrl","targetDatastoreIds","targetDatastorePromises","sourceDatastorePromises","targetClustersWithDatastores","mappedDatastoreIds","getMappedTargetDatastores","getMappedSourceDatastores","MappingWizardTreeView","MappingWizardDatastoresStepActions","clustersStepForm","generalStepForm","sourceClustersToFilter","mappedSourceClusters","mappedSourceCluster","conversionHostsFilter","targetClusterWithExtendedData","sourceClusterWithExtendedData","targetClusterToAddTo","sourceClustersToAdd","createClusterMappings","transformationItems","prov","authentication","MappingWizardClustersStepActions","_ref$mappingWizardGen","MappingWizardGeneralStepActions","MappingWizardActions","_MappingWizardSelectors","MappingWizardContainer","MappingWizardGeneralStepContainer","MappingWizardClustersStepContainer","MappingWizardDatastoresStepContainer","MappingWizardNetworksStepContainer","MappingWizardResultsStepContainer","PlanWizardVMStepContainer","PlanWizardResultsStepContainer","PlanWizardContainer","PlanWizardInstancePropertiesStepContainer","PlanWizardAdvancedOptionsStepContainer","SettingsContainer","_getTargetClustersActionCreator","bodyIsRequired","SshKeyField","_TextFileInput2","_helpers3","transformationPlan","requestsFromMemory","requestsFromDb","attachTargetProvider","configVmLength","targetProviderType","newPlanName","existingTransformationPlanNames","existingArchivedPlanNames","allPlanNames","existingPlanName","duplicateIsEditingPlanName","EditPlanNameActions","editPlanName","ConfirmModal","xsHidden","DeleteMigrationMenuItem","ScheduleMigrationButtons","confirmationWarningText","confirmModalProps","editScheduleDisabled","ScheduleMigrationModal","dateTimeInput","modalClose","_ScheduleMigrationModalBody2","MAX_LENGTH_NAMES","MAX_LENGTH_DESCRIPTIONS","maxLengthIs","requiredMaxLengthIs","youHaveReachedMax","_CONVERSION_HOST_TYPE","hrefSlug","entities","arrayItems","flattenedArray","arrayElement"],"mappings":"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AAA,IACAC,OAAA,IACAC,UAAA,IACAC,UAAA,IACAC,aAAA,IACAC,UAAA,IACAC,aAAA,IACAC,UAAA,IACAC,aAAA,IACAC,UAAA,IACAC,aAAA,IACAC,UAAA,IACAC,aAAA,IACAC,UAAA,IACAC,aAAA,IACAC,OAAA,IACAC,UAAA,IACAC,OAAA,IACAC,UAAA,IACAC,aAAA,IACAC,UAAA,IACAC,aAAA,IACAC,UAAA,IACAC,OAAA,IACAC,UAAA,IACAC,OAAA,IACAC,UAAA,IACAC,OAAA,IACAC,UAAA,IACAC,OAAA,IACAC,UAAA,IACAC,OAAA,IACAC,UAAA,IACAC,OAAA,IACAC,UAAA,IACAC,aAAA,IACAC,UAAA,IACAC,aAAA,IACAC,UAAA,IACAC,OAAA,IACAC,UAAA,IACAC,OAAA,IACAC,UAAA,IACAC,OAAA,IACAC,UAAA,IACAC,aAAA,IACAC,gBAAA,IACAC,OAAA,IACAC,UAAA,IACAC,OAAA,IACAC,UAAA,IACAC,OAAA,IACAC,UAAA,IACAC,OAAA,IACAC,UAAA,IACAC,OAAA,IACAC,UAAA,IACAC,UAAA,IACAC,aAAA,IACAC,OAAA,IACAC,UAAA,IACAC,OAAA,IACAC,UAAA,IACAC,OAAA,IACAC,UAAA,IACAC,OAAA,IACAC,UAAA,IACAC,OAAA,IACAC,UAAA,IACAC,OAAA,IACAC,UAAA,IACAC,OAAA,IACAC,UAAA,IACAC,OAAA,IACAC,UAAA,IACAC,OAAA,IACAC,UAAA,IACAC,OAAA,IACAC,UAAA,IACAC,OAAA,IACAC,UAAA,IACAC,OAAA,IACAC,UAAA,IACAC,OAAA,IACAC,UAAA,IACAC,OAAA,IACAC,UAAA,IACAC,OAAA,IACAC,UAAA,IACAC,OAAA,IACAC,UAAA,IACAC,OAAA,IACAC,UAAA,IACAC,OAAA,IACAC,UAAA,IACAC,OAAA,IACAC,UAAA,IACAC,OAAA,IACAC,UAAA,IACAC,OAAA,IACAC,UAAA,IACAC,OAAA,IACAC,UAAA,IACAC,aAAA,IACAC,UAAA,IACAC,OAAA,IACAC,UAAA,IACAC,OAAA,IACAC,UAAA,IACAC,O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","file":"manageiq-v2v/migration-52d67b2c7cd1f02b6382.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { IsoElapsedTime } from './IsoElapsedTime';\n\nclass TickingIsoElapsedTime extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      now: props.endTime || Date.now()\n    };\n    this._tickInterval = null;\n    this.dateProps = this.dateProps.bind(this);\n    this.tick = this.tick.bind(this);\n  }\n\n  componentDidMount() {\n    this._tickInterval = setInterval(this.tick, 1000);\n  }\n\n  componentWillUnmount() {\n    clearInterval(this._tickInterval);\n  }\n\n  dateProps() {\n    // The new Date() constructor, when passed a Date object, just returns that object.\n    // So it can be used to \"cast\" unknown string-or-Date props into known Date objects.\n    const { startTime, endTime } = this.props;\n    return {\n      startTime: new Date(startTime),\n      endTime: endTime ? new Date(endTime) : null\n    };\n  }\n\n  tick() {\n    const { endTime } = this.dateProps();\n    this.setState({\n      now: endTime || Date.now()\n    });\n  }\n\n  render() {\n    const { startTime } = this.dateProps();\n    const { now } = this.state;\n    return <React.Fragment>{IsoElapsedTime(startTime, now)}</React.Fragment>;\n  }\n}\n\nTickingIsoElapsedTime.propTypes = {\n  startTime: PropTypes.oneOfType([PropTypes.string, PropTypes.instanceOf(Date)]),\n  endTime: PropTypes.oneOfType([PropTypes.string, PropTypes.instanceOf(Date)])\n};\n\nTickingIsoElapsedTime.defaultProps = {\n  endTime: null // If a null endTime is passed, the time will tick each second.\n  // A non-null endTime will stop the ticking and just display the difference.\n};\n\nexport default TickingIsoElapsedTime;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Card, Grid, noop } from 'patternfly-react';\n\nconst InProgressCard = ({ title, children, footer, onClick, ...props }) => (\n  <Grid.Col sm={12} md={6} lg={4}>\n    <Card\n      id={`${Array.isArray(title.props.children) ? title.props.children[1] : title.props.children}-progress-card`}\n      matchHeight\n      onClick={onClick}\n      {...props}\n    >\n      <Card.Heading>{title}</Card.Heading>\n      <Card.Body>{children}</Card.Body>\n      {footer}\n    </Card>\n  </Grid.Col>\n);\n\nInProgressCard.propTypes = {\n  title: PropTypes.node,\n  children: PropTypes.node,\n  footer: PropTypes.node,\n  onClick: PropTypes.func\n};\n\nInProgressCard.defaultProps = {\n  title: '',\n  children: null,\n  footer: null,\n  onClick: noop\n};\n\nexport default InProgressCard;\n","import OverviewContainer from '../screens/App/Overview';\nimport Settings from '../screens/App/Settings';\nimport PlanContainer from '../screens/App/Plan';\nimport MappingsContainer from '../screens/App/Mappings';\n\nexport const links = [\n  {\n    path: 'plans',\n    component: OverviewContainer,\n    menu_item_id: 'menu_item_plans'\n  },\n  {\n    path: 'settings',\n    component: Settings,\n    menu_item_id: 'menu_item_settings'\n  },\n  {\n    path: 'settings/conversion_hosts',\n    component: Settings,\n    menu_item_id: 'menu_item_settings'\n  },\n  {\n    path: 'plan/:id',\n    component: PlanContainer,\n    menu_item_id: 'menu_item_plans'\n  },\n  {\n    path: 'mappings',\n    component: MappingsContainer,\n    menu_item_id: 'menu_item_mappings'\n  },\n  {\n    path: '',\n    redirect: 'plans'\n  }\n];\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Button, EmptyState } from 'patternfly-react';\n\nconst ShowWizardEmptyState = ({\n  showWizardAction,\n  buttonHref,\n  description,\n  buttonText,\n  title,\n  iconType,\n  iconName,\n  ...props\n}) => (\n  <EmptyState {...props}>\n    <EmptyState.Icon type={iconType} name={iconName} />\n    <EmptyState.Title>{title}</EmptyState.Title>\n    <EmptyState.Info>{description}</EmptyState.Info>\n    {buttonText && (\n      <EmptyState.Action>\n        <Button bsStyle=\"primary\" bsSize=\"large\" onClick={showWizardAction} href={buttonHref}>\n          {sprintf(__('%s'), buttonText)}\n        </Button>\n      </EmptyState.Action>\n    )}\n  </EmptyState>\n);\n\nShowWizardEmptyState.propTypes = {\n  showWizardAction: PropTypes.func,\n  buttonHref: PropTypes.string,\n  description: PropTypes.node,\n  buttonText: PropTypes.string,\n  title: PropTypes.string,\n  iconType: PropTypes.string,\n  iconName: PropTypes.string\n};\nShowWizardEmptyState.defaultProps = {\n  title: ' ',\n  iconType: 'pf',\n  iconName: 'add-circle-o',\n  showWizardAction: null,\n  buttonHref: null\n};\n\nexport default ShowWizardEmptyState;\n","import { getMappingType } from '../../../Mappings/components/InfrastructureMappingsList/helpers';\n\nexport const findEditingPlan = (transformationPlans, editingPlanId) =>\n  editingPlanId && transformationPlans.find(plan => plan.id === editingPlanId);\n\nexport const planWizardOverviewFilter = overview => ({\n  hidePlanWizard: overview.hidePlanWizard,\n  transformationMappings: overview.transformationMappings,\n  editingPlan: findEditingPlan(overview.transformationPlans, overview.editingPlanId)\n});\n\nexport const planWizardFormFilter = form => ({\n  planWizardGeneralStep: form.planWizardGeneralStep,\n  planWizardVMStep: form.planWizardVMStep,\n  planWizardInstancePropertiesStep: form.planWizardInstancePropertiesStep,\n  planWizardAdvancedOptionsStep: form.planWizardAdvancedOptionsStep,\n  planWizardScheduleStep: form.planWizardScheduleStep\n});\n\nexport const getCurrentTargetProvider = (form, transformationMappings) => {\n  const mappingId = form.planWizardGeneralStep.values.infrastructure_mapping;\n  const selectedMapping = transformationMappings.find(mapping => mapping.id === mappingId);\n  return getMappingType(selectedMapping.transformation_mapping_items);\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Form, FormGroup, Grid, ControlLabel } from 'patternfly-react';\nimport { focus } from 'redux-form';\n\nexport class BootstrapSelect extends React.Component {\n  componentDidUpdate(prevProps) {\n    const { input, options, option_key, option_value } = this.props;\n\n    const optionsChanged = options.some((option, index) => {\n      const prevOption = prevProps.options[index];\n      return (\n        !prevOption ||\n        prevOption[option_key] !== option[option_key] ||\n        prevOption[option_value] !== option[option_value]\n      );\n    });\n\n    // 'refresh' is necessary when removing or adding options, or when disabling/enabling\n    // https://developer.snapappointments.com/bootstrap-select/methods/#selectpickerrefresh\n    if (optionsChanged || prevProps.disabled !== this.props.disabled) {\n      $(`#${input.name}`).selectpicker('refresh');\n    }\n    if (optionsChanged) {\n      $(`#${input.name}`).selectpicker('val', null);\n      input.onChange(null);\n    }\n\n    if (prevProps.pre_selected_value !== this.props.pre_selected_value) {\n      $(`#${input.name}`).selectpicker('val', this.props.pre_selected_value);\n    }\n  }\n\n  componentDidMount() {\n    const {\n      input,\n      form_name,\n      meta: { visited, dispatch },\n      onSelect,\n      pre_selected_value\n    } = this.props;\n\n    if (pre_selected_value) {\n      input.onChange(pre_selected_value);\n    }\n\n    $(`#${input.name}`).selectpicker('val', input.value || pre_selected_value);\n\n    $(`.${input.name}_select`).on('click', '.dropdown-toggle', e => {\n      if (!visited) dispatch(focus(form_name, input.name));\n    });\n    if (onSelect)\n      $(`#${input.name}`).on('changed.bs.select', e => {\n        onSelect(e.target.value);\n      });\n  }\n\n  renderFormGroup = () => {\n    const {\n      input,\n      label,\n      required,\n      data_live_search,\n      options,\n      option_key,\n      option_value,\n      choose_text,\n      meta: { visited, error, active },\n      disabled\n    } = this.props;\n\n    const { inline_label, stacked_label, labelWidth, controlWidth, allowClear, ...otherProps } = this.props;\n\n    const formGroupProps = { key: { label }, ...otherProps };\n\n    if (visited && !active && error) formGroupProps.validationState = 'error';\n\n    return (\n      <FormGroup {...formGroupProps}>\n        {inline_label && (\n          <Grid.Col componentClass={ControlLabel} sm={labelWidth}>\n            {required && <span className=\"required-asterisk\">* </span>}\n            {label}\n          </Grid.Col>\n        )}\n        <Grid.Col sm={controlWidth}>\n          {stacked_label && <h4>{label}</h4>}\n          <select\n            id={input.name}\n            data-live-search={data_live_search}\n            className={`form-control ${input.name}_select`}\n            {...input}\n            disabled={!!disabled}\n          >\n            <option disabled={!allowClear} value=\"\">\n              {choose_text || `<${__('Choose')}>`}\n            </option>\n            {options.map(val => (\n              <option value={val[option_key]} key={`${val[option_value]}-${val[option_key]}`}>\n                {val[option_value]}\n              </option>\n            ))}\n          </select>\n          {visited && !active && error && <Form.HelpBlock>{error}</Form.HelpBlock>}\n        </Grid.Col>\n      </FormGroup>\n    );\n  };\n\n  render = () => {\n    const { render_within_form } = this.props;\n\n    if (render_within_form) {\n      return (\n        <div>\n          <Form horizontal>{this.renderFormGroup()}</Form>\n        </div>\n      );\n    }\n    return this.renderFormGroup();\n  };\n}\n\nBootstrapSelect.propTypes = {\n  label: PropTypes.string,\n  input: PropTypes.object,\n  required: PropTypes.bool,\n  data_live_search: PropTypes.string,\n  type: PropTypes.string,\n  options: PropTypes.array,\n  option_key: PropTypes.string,\n  option_value: PropTypes.string,\n  meta: PropTypes.object,\n  form_name: PropTypes.string,\n  onSelect: PropTypes.func,\n  pre_selected_value: PropTypes.string,\n  choose_text: PropTypes.string,\n  render_within_form: PropTypes.string,\n  inline_label: PropTypes.bool,\n  stacked_label: PropTypes.bool,\n  labelWidth: PropTypes.number,\n  controlWidth: PropTypes.number,\n  allowClear: PropTypes.bool,\n  disabled: PropTypes.bool\n};\n","export const DELETE_V2V_INFRASTRUCTURE_MAPPING = 'DELETE_INFRASTRUCTURE_MAPPING';\nexport const FETCH_V2V_CLOUD_NETWORKS = 'FETCH_CLOUD_NETWORKS';\nexport const FETCH_V2V_CLOUD_TENANTS = 'FETCH_CLOUD_TENANTS';\nexport const FETCH_V2V_CLOUD_VOLUME_TYPES = 'FETCH_CLOUD_VOLUME_TYPES';\nexport const FETCH_V2V_CLUSTERS = 'FETCH_V2V_CLUSTERS';\nexport const FETCH_V2V_DATASTORES = 'FETCH_DATASTORES';\nexport const FETCH_V2V_NETWORKS = 'FETCH_NETWORKS';\nexport const FETCH_V2V_TRANSFORMATION_MAPPINGS = 'FETCH_V2V_TRANSFORMATION_MAPPINGS';\nexport const HIDE_V2V_DELETE_CONFIRMATION_MODAL = 'HIDE_V2V_DELETE_CONFIRMATION_MODAL';\nexport const OPEN_V2V_MAPPING_WIZARD_ON_MOUNT = 'OPEN_V2V_MAPPING_WIZARD_ON_MOUNT';\nexport const SET_V2V_MAPPING_TO_DELETE = 'SET_V2V_MAPPING_TO_DELETE';\nexport const SHOW_V2V_DELETE_CONFIRMATION_MODAL = 'SHOW_V2V_DELETE_CONFIRMATION_MODAL';\nexport const YES_TO_DELETE_AND_HIDE_DELETE_CONFIRMATION_MODAL = 'YES_TO_DELETE_AND_HIDE_DELETE_CONFIRMATION_MODAL';\n\nexport const FETCH_CLOUD_TENANTS_URL =\n  '/api/cloud_tenants?expand=resources&filter[]=ext_management_system.type=ManageIQ::Providers::Openstack::CloudManager';\n\nexport const FETCH_TRANSFORMATION_MAPPINGS_URL =\n  '/api/transformation_mappings?expand=resources' +\n  '&attributes=transformation_mapping_items,service_templates' +\n  '&sort_by=updated_at' +\n  '&sort_order=desc';\n","const getMostRecentRequest = requests =>\n  requests.length && requests.reduce((prev, current) => (prev.created_on > current.created_on ? prev : current));\n\nexport default getMostRecentRequest;\n","import React from 'react';\nimport { i18nProviderWrapperFactory } from '../common/i18nProviderWrapperFactory';\n\nconst componentRegistry = {\n  registry: {},\n\n  register({ name = null, type = null, store = true, data = true }) {\n    if (!name || !type) {\n      throw new Error('Component name or type is missing');\n    }\n    if (this.registry[name]) {\n      throw new Error(`Component name already taken: ${name}`);\n    }\n\n    this.registry[name] = { type, store, data };\n    return this.registry;\n  },\n\n  registerMultiple(componentObjs) {\n    return componentObjs.forEach(obj => this.register(obj));\n  },\n\n  getComponent(name) {\n    return this.registry[name];\n  },\n\n  registeredComponents() {\n    return Object.keys(this.registry).join(', ');\n  },\n\n  markup(name, data, store) {\n    const currentComponent = this.getComponent(name);\n\n    if (!currentComponent) {\n      throw new Error(`Component not found:  ${name} among ${this.registeredComponents()}`);\n    }\n    // FIXME: figure out a way to mock i18nProviderWrapperFactory for componentRegistry specs\n    const WrappedComponent = window.it\n      ? currentComponent.type\n      : i18nProviderWrapperFactory(new Date())(currentComponent.type);\n\n    // todo: should component registry `markup` actually merge {data} instead?\n    // it would be nice to account for `ownProps` (assuming props are not always coming from store)\n    return (\n      <WrappedComponent\n        data={currentComponent.data ? Object.assign({}, data, currentComponent.data) : undefined}\n        store={currentComponent.store ? store : undefined}\n      />\n    );\n  }\n};\n\nconst coreComponets = [];\n\ncomponentRegistry.registerMultiple(coreComponets);\n\nexport default componentRegistry;\n","var g;\n\n// This works in non-strict mode\ng = (function() {\n\treturn this;\n})();\n\ntry {\n\t// This works if eval is allowed (see CSP)\n\tg = g || Function(\"return this\")() || (1, eval)(\"this\");\n} catch (e) {\n\t// This works if the window reference is available\n\tif (typeof window === \"object\") g = window;\n}\n\n// g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it's\n// easier to handle this case. if(!global) { ...}\n\nmodule.exports = g;\n","import http from './http';\nimport { links } from '../react/config/config';\n\nconst updateUrl = '/migration/menu_section_url?section=migration&url=/migration%23';\nconst activeMenuItemSelector = '[data-target=\"#menu-migration\"] > div > ul > li[class=\"list-group-item active\"]';\n\nexport const updateVerticalMenu = path => {\n  // POST /migration/menu_section_url to update session[:tab_url] on server\n  http.post(updateUrl + path);\n\n  // Remove 'active' class from current active menu item\n  const activeMenuItem = document.querySelector(activeMenuItemSelector);\n  if (activeMenuItem !== null) {\n    activeMenuItem.classList.remove('active');\n  }\n\n  // Based on location.pathname, set menu item id\n  const link_item = links.find(element => element.path.split('/')[0] === path.split('/')[1]);\n\n  // Add 'active' class to correct menu item\n  const newActiveMenuItem = document.querySelector(`[id=\"${link_item.menu_item_id}\"]`);\n  if (newActiveMenuItem !== null) {\n    newActiveMenuItem.classList.add('active');\n  }\n};\n","import Immutable from 'seamless-immutable';\n\nimport { FETCH_V2V_TARGET_CLUSTERS } from './targetResourcesConstants';\n\nexport const initialState = Immutable({\n  isFetchingTargetClusters: false,\n  isRejectedTargetClusters: false,\n  errorFetchingTargetClusters: null,\n  targetClusters: []\n});\n\nexport default (state = initialState, action) => {\n  switch (action.type) {\n    case `${FETCH_V2V_TARGET_CLUSTERS}_PENDING`:\n      return state.set('isFetchingTargetClusters', true).set('isRejectedTargetClusters', false);\n    case `${FETCH_V2V_TARGET_CLUSTERS}_FULFILLED`:\n      if (action.payload.data && action.payload.data.resources && action.payload.data.resources[0]) {\n        return state\n          .set('targetClusters', action.payload.data.resources)\n          .set('isRejectedTargetClusters', false)\n          .set('isFetchingTargetClusters', false);\n      }\n      return state\n        .set('targetClusters', [])\n        .set('isRejectedTargetClusters', false)\n        .set('isFetchingTargetClusters', false);\n    case `${FETCH_V2V_TARGET_CLUSTERS}_REJECTED`:\n      return state\n        .set('errorFetchingTargetClusters', action.payload)\n        .set('isRejectedTargetClusters', true)\n        .set('isFetchingTargetClusters', false);\n    default:\n      return state;\n  }\n};\n","import { PROVIDERS } from '../providers/providersConstants';\n\nexport const sufficientProviders = (providers = []) =>\n  providers.some(provider => PROVIDERS.source.includes(provider.type)) &&\n  providers.some(provider => PROVIDERS.target.includes(provider.type));\n\nexport const hasRsaKey = provider => {\n  const { authentications } = provider;\n\n  if (!authentications) {\n    return false;\n  }\n\n  return authentications.some(auth => auth.authtype === 'ssh_keypair');\n};\n","import { array, string, object } from 'yup';\n\nexport const providersSchema = array()\n  .of(\n    object().shape({\n      href: string().required(),\n      type: string().required(),\n      id: string().required(),\n      authentications: array().nullable()\n    })\n  )\n  .nullable();\n","import { validateSchema } from '../../../data/schemaHelpers';\nimport { providersSchema } from '../../../data/models/provider';\n\nexport const validateProviders = providers => {\n  validateSchema(providersSchema, providers);\n};\n","import Immutable from 'seamless-immutable';\n\nimport { FETCH_V2V_PROVIDERS } from './providersConstants';\nimport { validateProviders } from './providersValidators';\nimport { hasRsaKey, sufficientProviders } from './providersHelpers';\n\nexport const initialState = Immutable({\n  isFetchingProviders: false,\n  isRejectedProviders: false,\n  errorFetchingProviders: null,\n  providers: [],\n  hasSufficientProviders: false\n});\n\nexport default (state = initialState, action) => {\n  switch (action.type) {\n    case `${FETCH_V2V_PROVIDERS}_PENDING`:\n      return state\n        .set('isFetchingProviders', true)\n        .set('isRejectedProviders', false)\n        .set('errorFetchingProviders', null);\n    case `${FETCH_V2V_PROVIDERS}_FULFILLED`:\n      return (() => {\n        const insufficient = state\n          .set('hasSufficientProviders', false)\n          .set('isFetchingProviders', false)\n          .set('isRejectedProviders', false)\n          .set('errorFetchingProviders', null);\n        if (!action.payload.data || !action.payload.data.resources) {\n          return insufficient;\n        }\n        validateProviders(action.payload.data.resources);\n        return insufficient\n          .set('hasSufficientProviders', sufficientProviders(action.payload.data.resources))\n          .set(\n            'providers',\n            action.payload.data.resources.map(provider => ({ ...provider, hasRsaKey: hasRsaKey(provider) }))\n          );\n      })();\n    case `${FETCH_V2V_PROVIDERS}_REJECTED`:\n      return state\n        .set('isFetchingProviders', false)\n        .set('isRejectedProviders', true)\n        .set('errorFetchingProviders', action.payload);\n    default:\n      return state;\n  }\n};\n","import { reducer as formReducer } from 'redux-form';\nimport { reducers as notificationListReducers } from '../../react/screens/App/common/NotificationList';\nimport { reducers as planReducers } from '../../react/screens/App/Plan';\nimport { reducers as overviewReducers } from '../../react/screens/App/Overview';\nimport { reducers as mappingsReducers } from '../../react/screens/App/Mappings';\nimport { reducers as settingsReducers } from '../../react/screens/App/Settings';\nimport { reducers as mappingWizardReducers } from '../../react/screens/App/Mappings/screens/MappingWizard';\nimport { reducers as mappingWizardGeneralStepReducers } from '../../react/screens/App/Mappings/screens/MappingWizard/components/MappingWizardGeneralStep';\nimport { reducers as mappingWizardClustersStepReducers } from '../../react/screens/App/Mappings/screens/MappingWizard/components/MappingWizardClustersStep';\nimport { reducers as mappingWizardDatastoresStepReducers } from '../../react/screens/App/Mappings/screens/MappingWizard/components/MappingWizardDatastoresStep';\nimport { reducers as mappingWizardNetworksStepReducers } from '../../react/screens/App/Mappings/screens/MappingWizard/components/MappingWizardNetworksStep';\nimport { reducers as mappingWizardResultsStepReducers } from '../../react/screens/App/Mappings/screens/MappingWizard/components/MappingWizardResultsStep';\nimport { reducers as planWizardReducers } from '../../react/screens/App/Overview/screens/PlanWizard';\nimport { reducers as planWizardVMStepReducers } from '../../react/screens/App/Overview/screens/PlanWizard/components/PlanWizardVMStep';\nimport { reducers as planWizardResultsStepReducers } from '../../react/screens/App/Overview/screens/PlanWizard/components/PlanWizardResultsStep';\nimport { reducers as planWizardAdvancedOptionsStepReducers } from '../../react/screens/App/Overview/screens/PlanWizard/components/PlanWizardAdvancedOptionsStep';\nimport { reducers as planWizardInstancePropertiesStepReducers } from '../../react/screens/App/Overview/screens/PlanWizard/components/PlanWizardInstancePropertiesStep';\nimport { reducers as editPlanNameReducers } from '../../react/screens/App/Overview/components/EditPlanNameModal';\nimport providers from '../common/providers/providersReducer';\nimport targetResources from '../common/targetResources/targetResourcesReducer';\n\nexport default () => ({\n  ...notificationListReducers,\n  ...planReducers,\n  ...overviewReducers,\n  ...mappingsReducers,\n  ...settingsReducers,\n  ...mappingWizardReducers,\n  ...mappingWizardGeneralStepReducers,\n  ...mappingWizardClustersStepReducers,\n  ...mappingWizardDatastoresStepReducers,\n  ...mappingWizardNetworksStepReducers,\n  ...mappingWizardResultsStepReducers,\n  ...planWizardReducers,\n  ...planWizardVMStepReducers,\n  ...planWizardResultsStepReducers,\n  ...planWizardAdvancedOptionsStepReducers,\n  ...planWizardInstancePropertiesStepReducers,\n  ...editPlanNameReducers,\n  form: formReducer,\n  providers,\n  targetResources\n});\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { FormattedDate, intlShape } from 'react-intl';\nimport i18n from '../../common/i18n';\n\nconst ShortDateTime = ({ data }, context) => {\n  const { date, defaultValue, seconds } = data;\n  if (date) {\n    const title = context.intl.formatRelative(date);\n    const secondsFormat = seconds ? '2-digit' : undefined;\n\n    return (\n      <span title={title}>\n        <FormattedDate\n          value={date}\n          day=\"2-digit\"\n          month=\"short\"\n          hour=\"2-digit\"\n          second={secondsFormat}\n          minute=\"2-digit\"\n          timeZone={i18n.timezone}\n        />\n      </span>\n    );\n  }\n\n  return <span>{defaultValue}</span>;\n};\n\nShortDateTime.contextTypes = {\n  intl: intlShape\n};\n\nShortDateTime.propTypes = {\n  data: PropTypes.shape({\n    date: PropTypes.any,\n    defaultValue: PropTypes.string,\n    seconds: PropTypes.bool\n  })\n};\n\nexport default ShortDateTime;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { FormattedRelative, intlShape } from 'react-intl';\nimport i18n from '../../common/i18n';\n\nconst RelativeDateTime = ({ data }, context) => {\n  const { date, defaultValue } = data;\n  if (date) {\n    const title = context.intl.formatDate(date, {\n      day: '2-digit',\n      month: 'short',\n      hour: '2-digit',\n      minute: '2-digit',\n      year: 'numeric',\n      timeZone: i18n.timezone\n    });\n\n    return (\n      <span title={title}>\n        <FormattedRelative value={date} />\n      </span>\n    );\n  }\n\n  return <span>{defaultValue}</span>;\n};\n\nRelativeDateTime.contextTypes = {\n  intl: intlShape\n};\n\nRelativeDateTime.propTypes = {\n  data: PropTypes.shape({\n    date: PropTypes.any,\n    defaultValue: PropTypes.string\n  })\n};\n\nexport default RelativeDateTime;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { FormattedDate, intlShape } from 'react-intl';\nimport i18n from '../../common/i18n';\n\nconst LongDateTime = ({ data }, context) => {\n  const { date, defaultValue } = data;\n  if (date) {\n    const title = context.intl.formatRelative(date);\n    const seconds = data.seconds ? '2-digit' : undefined;\n\n    return (\n      <span title={title}>\n        <FormattedDate\n          value={date}\n          day=\"2-digit\"\n          month=\"long\"\n          hour=\"2-digit\"\n          minute=\"2-digit\"\n          second={seconds}\n          year=\"numeric\"\n          timeZone={i18n.timezone}\n        />\n      </span>\n    );\n  }\n  return <span>{defaultValue}</span>;\n};\n\nLongDateTime.contextTypes = {\n  intl: intlShape\n};\n\nLongDateTime.propTypes = {\n  data: PropTypes.shape({\n    date: PropTypes.any,\n    defaultValue: PropTypes.string\n  })\n};\n\nexport default LongDateTime;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { FormattedDate, intlShape } from 'react-intl';\nimport i18n from '../../common/i18n';\n\nconst IsoDate = ({ data }, context) => {\n  const { date, defaultValue } = data;\n\n  if (date) {\n    const title = context.intl.formatRelative(date);\n\n    return (\n      <span title={title}>\n        <FormattedDate value={date} day=\"2-digit\" month=\"2-digit\" year=\"numeric\" timeZone={i18n.timezone} />\n      </span>\n    );\n  }\n  return <span>{defaultValue}</span>;\n};\n\nIsoDate.contextTypes = {\n  intl: intlShape\n};\n\nIsoDate.propTypes = {\n  data: PropTypes.shape({\n    date: PropTypes.any,\n    defaultValue: PropTypes.string\n  })\n};\n\nexport default IsoDate;\n","import Immutable from 'seamless-immutable';\nimport uuid from 'uuid/v4';\n\nimport { V2V_NOTIFICATION_ADD, V2V_NOTIFICATION_REMOVE } from './NotificationConstants';\n\nconst initialState = Immutable({\n  notifications: []\n});\n\nexport default (state = initialState, action) => {\n  const newNotification = {\n    key: uuid(),\n    header: action.header,\n    message: action.message,\n    notificationType: action.notificationType,\n    data: action.data,\n    persistent: action.persistent,\n    timerdelay: action.timerdelay,\n    actionEnabled: action.actionEnabled\n  };\n\n  switch (action.type) {\n    case V2V_NOTIFICATION_ADD:\n      return state.set('notifications', [...Immutable.asMutable(state.notifications), newNotification]);\n    case V2V_NOTIFICATION_REMOVE:\n      return state.set(\n        'notifications',\n        Immutable.asMutable(state.notifications).filter(\n          notification => action.key.notification.key !== notification.key\n        )\n      );\n    default:\n      return state;\n  }\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { TimedToastNotification, ToastNotificationList } from 'patternfly-react';\nimport { Link } from 'react-router-dom';\n\nclass NotificationList extends React.Component {\n  render() {\n    const { notifications, removeNotificationAction } = this.props;\n\n    return (\n      <ToastNotificationList>\n        {notifications &&\n          notifications.map(notification => (\n            <TimedToastNotification\n              key={notification.key}\n              type={notification.notificationType}\n              persistent={notification.persistent}\n              timerdelay={notification.timerdelay}\n              onDismiss={() => removeNotificationAction({ notification })}\n              onMouseLeave={() => removeNotificationAction({ notification })}\n            >\n              <span>\n                {notification.header && <strong>{notification.header}</strong>}\n                {notification.message}\n              </span>\n              {notification.actionEnabled && (\n                <div className=\"pull-right toast-pf-action\">\n                  <Link to={`/plan/${notification.data.id}`}>{__('View Details')}</Link>\n                </div>\n              )}\n            </TimedToastNotification>\n          ))}\n      </ToastNotificationList>\n    );\n  }\n}\n\nNotificationList.propTypes = {\n  removeNotificationAction: PropTypes.func,\n  notifications: PropTypes.array\n};\n\nNotificationList.defaultProps = {\n  notifications: []\n};\n\nexport default NotificationList;\n","import Immutable from 'seamless-immutable';\nimport {\n  QUERY_V2V_OSP_TENANT_ATTRIBUTES,\n  SET_V2V_INSTANCE_PROPERTIES_ROWS,\n  QUERY_V2V_OSP_BEST_FIT_FLAVOR,\n  SET_V2V_BEST_FIT_FLAVORS_AND_DEFAULT_SECURITY_GROUPS,\n  PLAN_WIZARD_EXITED,\n  PLAN_WIZARD_NEXT\n} from './PlanWizardInstancePropertiesStepConstants';\n\nimport { stepIDs } from '../../PlanWizardConstants';\n\nexport const initialState = Immutable({\n  tenantsWithAttributes: [],\n  isFetchingTenantsWithAttributes: false,\n  isRejectedTenantsWithAttributes: false,\n  errorTenantsWithAttributes: null,\n  bestFitFlavors: [],\n  isFetchingBestFitFlavor: false,\n  isRejectedBestFitFlavor: false,\n  errorBestFitFlavor: null,\n  instancePropertiesRows: [],\n  isSettingSecurityGroupsAndBestFitFlavors: true,\n  recalculateBestFitFlavorAndSecurityGroup: true\n});\n\nexport default (state = initialState, action) => {\n  switch (action.type) {\n    case `${QUERY_V2V_OSP_TENANT_ATTRIBUTES}_PENDING`:\n      return state\n        .set('isSettingSecurityGroupsAndBestFitFlavors', true)\n        .set('isFetchingTenantsWithAttributes', true)\n        .set('isRejectedTenantsWithAttributes', false);\n    case `${QUERY_V2V_OSP_TENANT_ATTRIBUTES}_FULFILLED`:\n      return state\n        .set('tenantsWithAttributes', action.payload.data.results)\n        .set('isFetchingTenantsWithAttributes', false)\n        .set('isRejectedTenantsWithAttributes', false)\n        .set('errorTenantsWithAttributes', null);\n    case `${QUERY_V2V_OSP_TENANT_ATTRIBUTES}_REJECTED`:\n      return state\n        .set('errorTenantsWithAttributes', action.payload)\n        .set('isFetchingTenantsWithAttributes', false)\n        .set('isRejectedTenantsWithAttributes', true);\n    case `${QUERY_V2V_OSP_BEST_FIT_FLAVOR}_PENDING`:\n      return state.set('isFetchingBestFitFlavor', true).set('isRejectedBestFitFlavor', false);\n    case `${QUERY_V2V_OSP_BEST_FIT_FLAVOR}_FULFILLED`:\n      return state\n        .set('bestFitFlavors', action.payload.data.results)\n        .set('isFetchingBestFitFlavor', false)\n        .set('isRejectedBestFitFlavor', false)\n        .set('errorBestFitFlavor', null);\n    case `${QUERY_V2V_OSP_BEST_FIT_FLAVOR}_REJECTED`:\n      return state\n        .set('errorBestFitFlavor', action.payload)\n        .set('isFetchingBestFitFlavor', false)\n        .set('isRejectedBestFitFlavor', true);\n    case SET_V2V_BEST_FIT_FLAVORS_AND_DEFAULT_SECURITY_GROUPS: {\n      const { vmBestFitFlavors, editingPlan } = action.payload;\n      const instancePropertiesRowsUpdatedWithBestFlavor = [];\n      vmBestFitFlavors.forEach(vmFlavor => {\n        const existingInstancePropertiesRow = state.instancePropertiesRows.find(row => row.id === vmFlavor.vm_id);\n        const tenant = state.tenantsWithAttributes.find(\n          tenantsWithAttribute => tenantsWithAttribute.id === vmFlavor.tenant_id\n        );\n        const tenantFlavors = tenant && tenant.flavors;\n        const tenantSecurityGroups = tenant && tenant.security_groups;\n\n        let bestFitFlavor;\n        let bestFitFlavorId = vmFlavor.flavor_id;\n        if (bestFitFlavorId) {\n          bestFitFlavor = tenantFlavors && tenantFlavors.find(flavor => flavor.id === bestFitFlavorId);\n        } else {\n          bestFitFlavor =\n            tenantFlavors &&\n            tenantFlavors.reduce((prev, current) => {\n              if (prev.memory > current.memory) return prev;\n              if (prev.memory < current.memory) return current;\n              return prev.cpus > current.cpus ? prev : current;\n            });\n          bestFitFlavorId = bestFitFlavor && bestFitFlavor.id;\n        }\n\n        const bestFitFlavorName = bestFitFlavor && bestFitFlavor.name;\n        const defaultSecurityGroup = tenant && tenant.default_security_group;\n        const defaultSecurityGroupId = defaultSecurityGroup && defaultSecurityGroup.id;\n        const defaultSecurityGroupName = defaultSecurityGroup && defaultSecurityGroup.name;\n\n        const bestFlavor = { name: bestFitFlavorName, id: bestFitFlavorId };\n        const bestGroup = { name: defaultSecurityGroupName, id: defaultSecurityGroupId };\n\n        let preselectedFlavor;\n        let csvInvalidFlavorWarning = false;\n        let preselectedGroup;\n        let csvInvalidGroupWarning = false;\n\n        if (existingInstancePropertiesRow.csvFields) {\n          const { osp_flavor, osp_security_group } = existingInstancePropertiesRow.csvFields;\n          if (osp_flavor) {\n            const matchingFlavor = tenantFlavors && tenantFlavors.find(flavor => flavor.name === osp_flavor);\n            preselectedFlavor = matchingFlavor && { name: matchingFlavor.name, id: matchingFlavor.id };\n            csvInvalidFlavorWarning = !matchingFlavor;\n          }\n          if (osp_security_group) {\n            const matchingGroup =\n              tenantSecurityGroups && tenantSecurityGroups.find(group => group.name === osp_security_group);\n            preselectedGroup = matchingGroup && { name: matchingGroup.name, id: matchingGroup.id };\n            csvInvalidGroupWarning = !matchingGroup;\n          }\n        }\n\n        if (editingPlan) {\n          const existingVm = editingPlan.options.config_info.actions.find(\n            vm => vm.vm_id === existingInstancePropertiesRow.id\n          );\n          if (existingVm) {\n            const { csvFields } = existingInstancePropertiesRow;\n            if (!csvFields || !csvFields.osp_flavor) {\n              const existingFlavor =\n                tenantFlavors && tenantFlavors.find(flavor => flavor.id === existingVm.osp_flavor_id);\n              preselectedFlavor = existingFlavor && { name: existingFlavor.name, id: existingFlavor.id };\n            }\n            if (!csvFields || !csvFields.osp_security_group) {\n              const existingGroup =\n                tenantSecurityGroups &&\n                tenantSecurityGroups.find(group => group.id === existingVm.osp_security_group_id);\n              preselectedGroup = existingGroup && { name: existingGroup.name, id: existingGroup.id };\n            }\n          }\n        }\n\n        const rowUpdatedWithBestFlavor = {\n          ...existingInstancePropertiesRow,\n          osp_flavor: preselectedFlavor || bestFlavor,\n          csvInvalidFlavorWarning,\n          osp_security_group: preselectedGroup || bestGroup,\n          csvInvalidGroupWarning,\n          target_cluster_name: tenant.name\n        };\n        instancePropertiesRowsUpdatedWithBestFlavor.push(rowUpdatedWithBestFlavor);\n      });\n      return state\n        .set('isSettingSecurityGroupsAndBestFitFlavors', false)\n        .set('instancePropertiesRows', instancePropertiesRowsUpdatedWithBestFlavor);\n    }\n    case SET_V2V_INSTANCE_PROPERTIES_ROWS:\n      return state.set('instancePropertiesRows', action.payload);\n    case PLAN_WIZARD_EXITED:\n      return initialState;\n    case PLAN_WIZARD_NEXT:\n      return state.set('recalculateBestFitFlavorAndSecurityGroup', action.payload === stepIDs.vmStep);\n    default:\n      return state;\n  }\n};\n","import URI from 'urijs';\nimport API from '../../../../../../../../common/API';\n\nimport {\n  QUERY_V2V_OSP_TENANT_ATTRIBUTES,\n  SET_V2V_INSTANCE_PROPERTIES_ROWS,\n  QUERY_V2V_OSP_BEST_FIT_FLAVOR,\n  SET_V2V_BEST_FIT_FLAVORS_AND_DEFAULT_SECURITY_GROUPS\n} from './PlanWizardInstancePropertiesStepConstants';\n\nexport const _getTenantWithAttributesActionCreator = (url, tenantIds) => dispatch =>\n  dispatch({\n    type: QUERY_V2V_OSP_TENANT_ATTRIBUTES,\n    payload: API.post(url, {\n      action: 'query',\n      resources: tenantIds.map(id => ({ id }))\n    })\n  });\n\nexport const queryTenantsWithAttributesAction = (url, tenantIds, attributes) => {\n  const uri = new URI(url);\n  uri.addSearch({ expand: 'resources', attributes: attributes.join(',') });\n  return _getTenantWithAttributesActionCreator(uri.toString(), tenantIds);\n};\n\nexport const setFlavorsAndSecurityGroups = (response, mappings, editingPlan, dispatch) => {\n  const vmsSlugPrefix = 'vms/';\n  const flavorsSlugPrefix = 'flavors/';\n  const cloudTenantsSlugPrefix = 'cloud_tenants/';\n\n  const vmBestFitFlavors = [];\n  response.data.results.forEach(result => {\n    const vmId = result.source_href_slug.slice(vmsSlugPrefix.length);\n    const flavorId = result.best_fit && result.best_fit.slice(flavorsSlugPrefix.length);\n    const tenantId = mappings\n      .find(mapping => mapping.source_href_slug === `${vmsSlugPrefix}${vmId}`)\n      .destination_href_slug.slice(cloudTenantsSlugPrefix.length);\n\n    vmBestFitFlavors.push({ vm_id: vmId, tenant_id: tenantId, flavor_id: flavorId });\n  });\n\n  dispatch({\n    type: SET_V2V_BEST_FIT_FLAVORS_AND_DEFAULT_SECURITY_GROUPS,\n    payload: { vmBestFitFlavors, editingPlan }\n  });\n};\n\nexport const _bestFitFlavorActionCreator = (url, flavor_mappings, editingPlan) => dispatch => {\n  const postBody = {\n    action: 'vm_flavor_fit',\n    mappings: flavor_mappings\n  };\n  return dispatch({\n    type: QUERY_V2V_OSP_BEST_FIT_FLAVOR,\n    payload: new Promise((resolve, reject) => {\n      API.post(url, postBody)\n        .then(response => {\n          resolve(response);\n          setFlavorsAndSecurityGroups(response, flavor_mappings, editingPlan, dispatch);\n        })\n        .catch(e => {\n          reject(e);\n        });\n    })\n  });\n};\n\nexport const bestFitFlavorAction = (url, mappings, editingPlan) => {\n  const uri = new URI(url);\n  return _bestFitFlavorActionCreator(uri.toString(), mappings, editingPlan);\n};\n\nexport const instancePropertiesRowsAction = rows => dispatch =>\n  dispatch({\n    type: SET_V2V_INSTANCE_PROPERTIES_ROWS,\n    payload: rows\n  });\n","// This is a copy of Table.sortableHeaderCellFormatter from patternfly-react.\n// The only enhancement is that it supports a header.children prop which will render after the label.\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { TableHeading, noop } from 'patternfly-react';\n\nconst sortableHeaderCellFormatterWithChildren = ({ cellProps, column, sortingColumns, onSort }) => {\n  const sortDirection = sortingColumns[column.property] && sortingColumns[column.property].direction;\n  return (\n    <TableHeading\n      onClick={e => {\n        onSort(e, column, sortDirection);\n      }}\n      sort\n      sortDirection={sortDirection}\n      aria-label={column.header.label}\n      {...cellProps}\n    >\n      {column.header.label}\n      {column.header.children || null}\n    </TableHeading>\n  );\n};\nsortableHeaderCellFormatterWithChildren.propTypes = {\n  /** column header cell props */\n  cellProps: PropTypes.object,\n  /** column definition */\n  column: PropTypes.object,\n  /** sorting object definition */\n  sortingColumns: PropTypes.object,\n  /** onSort callback */\n  onSort: PropTypes.func\n};\nsortableHeaderCellFormatterWithChildren.defaultProps = {\n  cellProps: {},\n  column: {},\n  sortingColumns: {},\n  onSort: noop\n};\n\nexport default sortableHeaderCellFormatterWithChildren;\n","import React from 'react';\nimport { Button, Icon } from 'patternfly-react';\n\nconst CancelButton = props => (\n  <Button {...props}>\n    <Icon type=\"pf\" name=\"close\" />\n  </Button>\n);\n\nCancelButton.propTypes = {\n  ...Button.propTypes\n};\n\nexport default CancelButton;\n","import React from 'react';\nimport { Button, Icon } from 'patternfly-react';\n\nconst ConfirmButton = props => (\n  <Button {...props}>\n    <Icon type=\"fa\" name=\"check\" />\n  </Button>\n);\n\nConfirmButton.propTypes = {\n  ...Button.propTypes\n};\n\nConfirmButton.defaultProps = {\n  ...Button.defaultProps,\n  bsStyle: 'primary'\n};\n\nexport default ConfirmButton;\n","export const matches =\n  Element.prototype.matches || Element.prototype.msMatchesSelector || Element.prototype.webkitMatchesSelector;\n\nif (!Element.prototype.matches) {\n  Element.prototype.matches = matches;\n}\n\nexport function closest(selector) {\n  let el = this;\n  if (document.documentElement.contains(el)) {\n    while (el && el.nodeType === 1) {\n      if (el.matches(selector)) return el;\n      el = el.parentElement || el.parentNode;\n    }\n  }\n  return null;\n}\n\nif (!Element.prototype.closest) {\n  Element.prototype.closest = closest;\n}\n\nexport default closest;\n","// This component is based on the component of the same name from patternfly-react.\n// It includes a fix for https://github.com/patternfly/patternfly-react/issues/535\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { noop } from 'patternfly-react';\nimport './closestPolyfill';\nimport ConfirmButton from '../InlineEdit/ConfirmButton';\nimport CancelButton from '../InlineEdit/CancelButton';\n\nclass TableConfirmButtonsRow extends React.Component {\n  renderConfirmButtons() {\n    const buttonsClass = `inline-edit-buttons ${this.props.buttonsClassName}`;\n    return (\n      <div className={buttonsClass} key=\"confirmButtons\">\n        <ConfirmButton\n          bsStyle=\"primary\"\n          key=\"confirm\"\n          aria-label={this.props.messages.confirmButtonLabel}\n          onMouseUp={() => this.props.onConfirm()}\n        />\n        <CancelButton\n          bsStyle=\"default\"\n          key=\"cancel\"\n          aria-label={this.props.messages.cancelButtonLabel}\n          onMouseUp={() => this.props.onCancel()}\n        />\n      </div>\n    );\n  }\n\n  renderChildren = () => {\n    const editing = this.props.isEditing();\n    if (!editing) return this.props.children;\n    // Render children with the confirm buttons injected as a child of the last cell in the row.\n    const children = React.Children.toArray(this.props.children);\n    const lastCell = children.pop(); // Pop off the <tableCell> to be replaced\n    const lastCellChildren = React.Children.toArray(lastCell.props.children);\n    const inlineEditFormatter = lastCellChildren.pop(); // Pop off the <InlineEdit> to be replaced\n    // To get the actual <td> we need to call the renderEdit prop of the inlineEditButtonsFormatter:\n    const { renderEdit, value, additionalData } = inlineEditFormatter.props;\n    const td = renderEdit(value, additionalData);\n    const tdChildren = React.Children.toArray(td.props.children);\n    // Render the tree using modified clones of the components we popped above.\n    return [\n      ...children,\n      React.cloneElement(\n        lastCell,\n        lastCell.props,\n        ...lastCellChildren,\n        React.cloneElement(\n          td,\n          { ...td.props, className: 'inline-edit-buttons-parent' },\n          ...tdChildren,\n          this.renderConfirmButtons()\n        )\n      )\n    ];\n  };\n\n  render() {\n    const editing = this.props.isEditing();\n    const rowClass = editing ? 'editing' : '';\n\n    const elements = [\n      <tr className={rowClass} key=\"tableRow\">\n        {this.renderChildren()}\n      </tr>\n    ];\n\n    return elements;\n  }\n}\n\nTableConfirmButtonsRow.shouldComponentUpdate = true;\n\nTableConfirmButtonsRow.defaultProps = {\n  isEditing: noop,\n  onConfirm: noop,\n  onCancel: noop,\n  buttonsClassName: '',\n  children: [],\n  messages: {\n    confirmButtonLabel: 'Save',\n    cancelButtonLabel: 'Cancel'\n  }\n};\n\nTableConfirmButtonsRow.propTypes = {\n  /** Function that determines whether values or edit components should be rendered */\n  isEditing: PropTypes.func,\n  /** Confirm edit callback */\n  onConfirm: PropTypes.func,\n  /** Cancel edit callback */\n  onCancel: PropTypes.func,\n  /** Additional confirm buttons classes */\n  buttonsClassName: PropTypes.string,\n  /** Row cells */\n  children: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.node), PropTypes.node]),\n  /** Message text inputs for i18n */\n  messages: PropTypes.shape({\n    confirmButtonLabel: PropTypes.string,\n    cancelButtonLabel: PropTypes.string\n  })\n};\n\nexport default TableConfirmButtonsRow;\n","// This component is based on the component of the same name from patternfly-react.\n// It includes a fix for https://github.com/patternfly/patternfly-react/issues/535\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport TableConfirmButtonsRow from './TableConfirmButtonsRow';\n\nconst TableInlineEditRow = props => {\n  const buttonsPosition = (window, rowDimensions) => {\n    const position = {};\n\n    if (props.last) {\n      position.bottom = window.height - rowDimensions.top - 1;\n    } else {\n      position.top = rowDimensions.bottom - 1;\n    }\n\n    if (props.tableRendersInModal) {\n      position.right = (window.width - rowDimensions.width) / 2 + 10;\n    } else {\n      position.right = window.width - rowDimensions.right + 10;\n    }\n\n    return position;\n  };\n\n  const buttonsClassName = props.last ? 'top' : 'bottom';\n\n  return <TableConfirmButtonsRow {...props} buttonsPosition={buttonsPosition} buttonsClassName={buttonsClassName} />;\n};\n\nTableInlineEditRow.shouldComponentUpdate = true;\n\nTableInlineEditRow.defaultProps = {\n  ...TableConfirmButtonsRow.defaultProps,\n  last: false\n};\n\nTableInlineEditRow.propTypes = {\n  /** Function that determines whether values or edit components should be rendered */\n  isEditing: PropTypes.func,\n  /** Confirm edit callback */\n  onConfirm: PropTypes.func,\n  /** Cancel edit callback */\n  onCancel: PropTypes.func,\n  /** Flag to indicate last row */\n  last: PropTypes.bool,\n  /** Row cells */\n  children: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.node), PropTypes.node]),\n  /** Message text inputs for i18n */\n  messages: PropTypes.shape({\n    confirmButtonLabel: PropTypes.string,\n    cancelButtonLabel: PropTypes.string\n  }),\n  tableRendersInModal: PropTypes.bool\n};\n\nexport default TableInlineEditRow;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport orderBy from 'lodash.orderby';\nimport * as sort from 'sortabular';\nimport * as resolve from 'table-resolver';\nimport { compose } from 'recompose';\nimport {\n  paginate,\n  Grid,\n  PaginationRow,\n  Table,\n  PAGINATION_VIEW,\n  Icon,\n  Button,\n  FormControl,\n  OverlayTrigger,\n  Popover\n} from 'patternfly-react';\n\n// Temporary import while https://github.com/patternfly/patternfly-react/issues/535 is open:\nimport TableInlineEditRow from './TableInlineEditRow/TableInlineEditRow';\n\nimport { allFitFlavorIdsForVM } from '../helpers';\nimport sortableHeaderCellFormatterWithChildren from './sortableHeaderCellFormatterWithChildren';\nimport StopPropagationOnClick from '../../../../../../common/StopPropagationOnClick';\n\nclass PlanWizardInstancePropertiesStepTable extends React.Component {\n  state = {\n    // Sort the first column in an ascending way by default.\n    sortingColumns: {\n      name: {\n        direction: Table.TABLE_SORT_DIRECTION.ASC,\n        position: 0\n      }\n    },\n\n    editing: false,\n\n    // pagination default states\n    pagination: {\n      page: 1,\n      perPage: 5,\n      perPageOptions: [5, 10, 15]\n    },\n\n    // page input value\n    pageChangeValue: 1\n  };\n\n  componentWillUnmount() {\n    const { input, rows } = this.props;\n    const minimalInstancePropertiesRows = {};\n\n    rows.forEach(row => {\n      const { id, osp_security_group, osp_flavor } = row;\n      minimalInstancePropertiesRows[id] = {\n        osp_security_group_id: osp_security_group.id,\n        osp_flavor_id: osp_flavor.id\n      };\n    });\n\n    input.onChange({ rows: minimalInstancePropertiesRows, updatedInstancePropertiesRowOnStandby: {} });\n  }\n\n  // enables our custom header formatters extensions to reactabular\n  customHeaderFormatters = Table.customHeaderFormattersDefinition;\n  inlineEditController = () => {\n    const { rows, instancePropertiesRowsAction, input } = this.props;\n    return {\n      isEditing: ({ rowData }) => rowData.id === input.value.updatedInstancePropertiesRowOnStandby.id,\n      onActivate: ({ rowData }) => {\n        this.setState({ editing: true });\n        input.onChange({ updatedInstancePropertiesRowOnStandby: rowData });\n      },\n      onConfirm: ({ rowData }) => {\n        this.setState({ editing: false });\n\n        const updatedRows = rows.map(\n          row =>\n            row.id === rowData.id\n              ? {\n                  ...input.value.updatedInstancePropertiesRowOnStandby,\n                  csvInvalidFlavorWarning: false,\n                  csvInvalidGroupWarning: false\n                }\n              : row\n        );\n        instancePropertiesRowsAction(updatedRows);\n        input.onChange({ updatedInstancePropertiesRowOnStandby: {} });\n      },\n      onCancel: ({ rowData }) => {\n        this.setState({ editing: false });\n        input.onChange({ updatedInstancePropertiesRowOnStandby: {} });\n      },\n      onChange: (e, { rowData, property }) => {\n        const updatedInstanceProp = {\n          ...rowData[property],\n          name: e.target.options[e.target.selectedIndex].getAttribute('name'),\n          id: e.target.value\n        };\n\n        const updatedRowdata = {\n          ...input.value.updatedInstancePropertiesRowOnStandby,\n          [property]: updatedInstanceProp\n        };\n\n        input.onChange({ updatedInstancePropertiesRowOnStandby: updatedRowdata });\n      }\n    };\n  };\n\n  renderFlavorName = (flavorId, flavorName, vmId) => {\n    const { bestFitFlavors } = this.props;\n    const allFit = allFitFlavorIdsForVM(bestFitFlavors, vmId);\n    const needsAsterisk = !allFit.some(id => id === flavorId);\n    return needsAsterisk ? `${flavorName} *` : flavorName;\n  };\n\n  renderCsvWarning = (property, rowData) => {\n    let warningMessage;\n    if (property === 'osp_security_group' && rowData.csvInvalidGroupWarning) {\n      warningMessage = __('The security group specified in the CSV file is invalid and has been replaced with the default security group. Edit the CSV file to include a valid security group or edit the table row to choose a different value.'); // prettier-ignore\n    }\n    if (property === 'osp_flavor' && rowData.csvInvalidFlavorWarning) {\n      warningMessage = __('The flavor specified in the CSV file is invalid and has been replaced with the best fit flavor. Edit the CSV file to include a valid flavor or edit the table row to choose a different value.'); // prettier-ignore\n    }\n    if (warningMessage) {\n      return (\n        <OverlayTrigger\n          overlay={\n            <Popover id=\"osp-csv-flavor-warning\">\n              <div style={{ maxWidth: 400 }}>{warningMessage}</div>\n            </Popover>\n          }\n          placement=\"top\"\n          trigger={['click']}\n          delay={500}\n          rootClose\n        >\n          <Icon type=\"pf\" name=\"warning-triangle-o\" className=\"clickable-icon\" />\n        </OverlayTrigger>\n      );\n    }\n    return null;\n  };\n\n  inlineEditFormatter = Table.inlineEditFormatterFactory({\n    isEditing: additionalData => this.inlineEditController().isEditing(additionalData),\n    renderValue: (value, additionalData) => {\n      const renderedValue =\n        additionalData.property === 'osp_security_group'\n          ? additionalData.rowData.osp_security_group.name\n          : this.renderFlavorName(\n              additionalData.rowData.osp_flavor.id,\n              additionalData.rowData.osp_flavor.name,\n              additionalData.rowData.id\n            );\n      return (\n        <td className=\"editable\">\n          <span className=\"static\">\n            {renderedValue}\n            {this.renderCsvWarning(additionalData.property, additionalData.rowData)}\n          </span>\n        </td>\n      );\n    },\n    renderEdit: (value, additionalData) => {\n      const { input, tenantsWithAttributesById, destinationTenantIdsBySourceClusterId } = this.props;\n      const { optionsAttribute } = additionalData.column.cell.inlineEditSelect;\n      const clusterId = additionalData.rowData.ems_cluster_id;\n      const tenantId = destinationTenantIdsBySourceClusterId[clusterId];\n      const tenant = tenantId && tenantsWithAttributesById[tenantId];\n      const options = tenant ? tenant[optionsAttribute] : [];\n      const renderName = option => {\n        if (optionsAttribute !== 'flavors') return option.name;\n        return this.renderFlavorName(option.id, option.name, additionalData.rowData.id, tenant);\n      };\n      return (\n        <td className=\"editable editing\">\n          <FormControl\n            componentClass=\"select\"\n            defaultValue={\n              additionalData.property === 'osp_security_group'\n                ? input.value.updatedInstancePropertiesRowOnStandby.osp_security_group.id\n                : input.value.updatedInstancePropertiesRowOnStandby.osp_flavor.id\n            }\n            onChange={e => this.inlineEditController().onChange(e, additionalData)}\n          >\n            {options.map(opt => (\n              <option value={opt.id} name={opt.name} key={opt.id}>\n                {renderName(opt)}\n              </option>\n            ))}\n          </FormControl>\n        </td>\n      );\n    }\n  });\n\n  inlineEditButtonsFormatter = Table.inlineEditFormatterFactory({\n    isEditing: additionalData => this.state.editing,\n    renderValue: (value, additionalData) => (\n      <td style={{ padding: '2px' }}>\n        <Button bsStyle=\"default\" onClick={() => this.inlineEditController().onActivate(additionalData)}>\n          <Icon type=\"pf\" name=\"edit\" />\n        </Button>\n      </td>\n    ),\n    renderEdit: (value, additionalData) => (\n      <td style={{ padding: '2px' }}>\n        <Button bsStyle=\"default\" disabled>\n          <Icon type=\"pf\" name=\"edit\" />\n        </Button>\n      </td>\n    )\n  });\n\n  getColumns = () => {\n    const getSortingColumns = () => this.state.sortingColumns || {};\n\n    const sortableTransform = sort.sort({\n      getSortingColumns,\n      onSort: selectedColumn => {\n        this.setState({\n          sortingColumns: sort.byColumn({\n            sortingColumns: this.state.sortingColumns,\n            sortingOrder: Table.defaultSortingOrder,\n            selectedColumn\n          })\n        });\n      },\n      // Use property or index dependening on the sortingColumns structure specified\n      strategy: sort.strategies.byProperty\n    });\n\n    const sortingFormatter = sort.header({\n      sortableTransform,\n      getSortingColumns,\n      strategy: sort.strategies.byProperty\n    });\n\n    const flavorColumnPopoverContent = (\n      <Popover id=\"v2v-osp-flavor-info\" className=\"popover-with-max-width\">\n        <p>\n          {__('In OpenStack, flavors define the compute, memory, and storage capacity of nova computing instances.')}\n        </p>\n        <p>\n          {__('A flavor name appended with an * indicates that the flavor has CPU or memory capacity smaller than the source VM. Selecting these flavors might cause problems when the VM is migrated.') /* prettier-ignore */}\n        </p>\n      </Popover>\n    );\n\n    const flavorColumnPopover = (\n      <StopPropagationOnClick>\n        <OverlayTrigger rootClose trigger=\"click\" placement=\"top\" overlay={flavorColumnPopoverContent}>\n          <Button bsStyle=\"link\">\n            <Icon type=\"pf\" name=\"info\" />\n          </Button>\n        </OverlayTrigger>\n      </StopPropagationOnClick>\n    );\n\n    return [\n      {\n        property: 'name',\n        header: {\n          label: __('VM Name'),\n          props: {\n            index: 0,\n            rowSpan: 1,\n            colSpan: 1\n          },\n          transforms: [sortableTransform],\n          formatters: [sortingFormatter],\n          customFormatters: [Table.sortableHeaderCellFormatter]\n        },\n        cell: {\n          props: {\n            index: 0\n          },\n          formatters: [Table.tableCellFormatter]\n        }\n      },\n      {\n        property: 'cluster',\n        header: {\n          label: __('Source Cluster'),\n          props: {\n            index: 1,\n            rowSpan: 1,\n            colSpan: 1\n          },\n          transforms: [sortableTransform],\n          formatters: [sortingFormatter],\n          customFormatters: [Table.sortableHeaderCellFormatter]\n        },\n        cell: {\n          props: {\n            index: 1\n          },\n          formatters: [Table.tableCellFormatter]\n        }\n      },\n      {\n        property: 'target_cluster_name',\n        header: {\n          label: __('Target Provider'),\n          props: {\n            index: 2,\n            rowSpan: 1,\n            colSpan: 1\n          },\n          transforms: [sortableTransform],\n          formatters: [sortingFormatter],\n          customFormatters: [Table.sortableHeaderCellFormatter]\n        },\n        cell: {\n          props: {\n            index: 2\n          },\n          formatters: [Table.tableCellFormatter]\n        }\n      },\n      {\n        property: 'allocated_size',\n        header: {\n          label: __('Allocated Size'),\n          props: {\n            index: 3,\n            rowSpan: 1,\n            colSpan: 1\n          },\n          transforms: [sortableTransform],\n          formatters: [sortingFormatter],\n          customFormatters: [Table.sortableHeaderCellFormatter]\n        },\n        cell: {\n          props: {\n            index: 3\n          },\n          formatters: [Table.tableCellFormatter]\n        }\n      },\n      {\n        property: 'osp_security_group',\n        header: {\n          label: __('OpenStack Security Group'),\n          props: {\n            index: 4,\n            rowSpan: 1,\n            colSpan: 1\n          },\n          transforms: [sortableTransform],\n          formatters: [sortingFormatter],\n          customFormatters: [Table.sortableHeaderCellFormatter]\n        },\n        cell: {\n          props: {\n            index: 4\n          },\n          formatters: [this.inlineEditFormatter],\n          inlineEditSelect: {\n            // Custom property for inlineEditFormatter\n            optionsAttribute: 'security_groups'\n          }\n        }\n      },\n      {\n        property: 'osp_flavor',\n        header: {\n          label: __('OpenStack Flavor'),\n          props: {\n            index: 5,\n            rowSpan: 1,\n            colSpan: 1\n          },\n          transforms: [sortableTransform],\n          formatters: [sortingFormatter],\n          customFormatters: [sortableHeaderCellFormatterWithChildren],\n          children: flavorColumnPopover\n        },\n        cell: {\n          props: {\n            index: 5\n          },\n          formatters: [this.inlineEditFormatter],\n          inlineEditSelect: {\n            // Custom property for inlineEditFormatter\n            optionsAttribute: 'flavors'\n          }\n        }\n      },\n      {\n        property: 'actions',\n        header: {\n          label: '',\n          props: {\n            index: 6\n          },\n          formatters: [Table.actionHeaderCellFormatter]\n        },\n        cell: {\n          props: {\n            index: 6\n          },\n          formatters: [this.inlineEditButtonsFormatter]\n        }\n      }\n    ];\n  };\n\n  onFirstPage = () => {\n    this.setPage(1);\n  };\n  onLastPage = () => {\n    const { page } = this.state.pagination;\n    const totalPages = this.totalPages();\n    if (page < totalPages) {\n      this.setPage(totalPages);\n    }\n  };\n  onNextPage = () => {\n    const { page } = this.state.pagination;\n    if (page < this.totalPages()) {\n      this.setPage(this.state.pagination.page + 1);\n    }\n  };\n  onPageInput = e => {\n    this.setState({ pageChangeValue: e.target.value });\n  };\n  onPerPageSelect = (eventKey, e) => {\n    const newPaginationState = Object.assign({}, this.state.pagination);\n    newPaginationState.perPage = eventKey;\n    newPaginationState.page = 1;\n    this.setState({ pagination: newPaginationState });\n  };\n  onPreviousPage = () => {\n    if (this.state.pagination.page > 1) {\n      this.setPage(this.state.pagination.page - 1);\n    }\n  };\n\n  onSubmit = () => {\n    this.setPage(this.state.pageChangeValue);\n  };\n\n  setPage = value => {\n    const page = Number(value);\n    if (!Number.isNaN(value) && value !== '' && page > 0 && page <= this.totalPages()) {\n      const newPaginationState = Object.assign({}, this.state.pagination);\n      newPaginationState.page = page;\n      this.setState({ pagination: newPaginationState, pageChangeValue: page });\n    }\n  };\n\n  currentRows = () => {\n    const { sortingColumns, pagination } = this.state;\n    const { rows } = this.props;\n\n    return compose(\n      paginate(pagination),\n      sort.sorter({\n        columns: this.getColumns(),\n        sortingColumns,\n        sort: orderBy,\n        strategy: sort.strategies.byProperty\n      })\n    )(rows);\n  };\n\n  totalPages = () => {\n    const { rows } = this.props;\n    const { perPage } = this.state.pagination;\n    return Math.ceil(rows.length / perPage);\n  };\n\n  render() {\n    const { pagination, sortingColumns, pageChangeValue } = this.state;\n\n    const sortedPaginatedRows = this.currentRows();\n\n    return (\n      <Grid fluid>\n        <h2>{__('VMs Selected for Migration')}</h2>\n        <br />\n        <Table.PfProvider\n          striped\n          bordered\n          hover\n          dataTable\n          inlineEdit\n          columns={this.getColumns()}\n          components={{\n            header: {\n              cell: cellProps =>\n                this.customHeaderFormatters({\n                  cellProps,\n                  columns: this.getColumns(),\n                  sortingColumns,\n                  rows: sortedPaginatedRows.rows\n                })\n            },\n            body: {\n              // TODO we should use Table.InlineEditRow when patternfly-react#535 is fixed\n              row: TableInlineEditRow\n            }\n          }}\n        >\n          <Table.Header headerRows={resolve.headerRows({ columns: this.getColumns() })} />\n          <Table.Body\n            className=\"instance-properties-step-table\"\n            rows={sortedPaginatedRows.rows || []}\n            rowKey=\"id\"\n            onRow={(rowData, { rowIndex }) => ({\n              role: 'row',\n              isEditing: () => this.inlineEditController().isEditing({ rowData }),\n              onCancel: () => this.inlineEditController().onCancel({ rowData, rowIndex }),\n              onConfirm: () => this.inlineEditController().onConfirm({ rowData, rowIndex }),\n              last: rowIndex === sortedPaginatedRows.length - 1,\n              tableRendersInModal: true\n            })}\n          />\n        </Table.PfProvider>\n        <PaginationRow\n          viewType={PAGINATION_VIEW.TABLE}\n          pagination={pagination}\n          pageInputValue={pageChangeValue}\n          amountOfPages={sortedPaginatedRows.amountOfPages}\n          itemCount={sortedPaginatedRows.itemCount}\n          itemsStart={sortedPaginatedRows.itemsStart}\n          itemsEnd={sortedPaginatedRows.itemsEnd}\n          onPerPageSelect={this.onPerPageSelect}\n          onFirstPage={this.onFirstPage}\n          onPreviousPage={this.onPreviousPage}\n          onPageInput={this.onPageInput}\n          onNextPage={this.onNextPage}\n          onLastPage={this.onLastPage}\n          onSubmit={this.onSubmit}\n        />\n      </Grid>\n    );\n  }\n}\nPlanWizardInstancePropertiesStepTable.propTypes = {\n  rows: PropTypes.array,\n  tenantsWithAttributesById: PropTypes.object,\n  destinationTenantIdsBySourceClusterId: PropTypes.object,\n  instancePropertiesRowsAction: PropTypes.func,\n  input: PropTypes.object,\n  bestFitFlavors: PropTypes.array\n};\nPlanWizardInstancePropertiesStepTable.defaultProps = {\n  rows: [],\n  tenantsWithAttributesById: {},\n  destinationTenantIdsBySourceClusterId: {}\n};\nexport default PlanWizardInstancePropertiesStepTable;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { reduxForm, Field } from 'redux-form';\nimport PlanWizardInstancePropertiesStepTable from './components/PlanWizardInstancePropertiesStepTable';\nimport { OSP_TENANT } from '../../../../OverviewConstants';\nimport { getTenantsById, getDestinationTenantIdsBySourceClusterId } from './helpers';\n\nclass PlanWizardInstancePropertiesStep extends Component {\n  componentDidMount() {\n    const {\n      selectedMapping,\n      fetchOpenstackTenantUrl,\n      queryOpenstackTenantAttributes,\n      queryTenantsWithAttributesAction,\n      vmStepSelectedVms,\n      instancePropertiesRowsAction,\n      bestFitFlavorAction,\n      bestFitFlavorUrl,\n      recalculateBestFitFlavorAndSecurityGroup,\n      editingPlan,\n      shouldPrefillForEditing\n    } = this.props;\n\n    const targetTenants =\n      selectedMapping &&\n      selectedMapping.transformation_mapping_items &&\n      selectedMapping.transformation_mapping_items.filter(item => item.destination_type === OSP_TENANT);\n\n    if (targetTenants && recalculateBestFitFlavorAndSecurityGroup) {\n      const targetTenantIds = targetTenants.map(tenant => tenant.destination_id);\n\n      queryTenantsWithAttributesAction(fetchOpenstackTenantUrl, targetTenantIds, queryOpenstackTenantAttributes).then(\n        () => {\n          const sourceAndDestinationHrefSlugsForBestFit = [];\n          vmStepSelectedVms.forEach(vm => {\n            const destinationTenantId = targetTenants.filter(tenant => tenant.source_id === vm.ems_cluster_id)[0]\n              .destination_id;\n            sourceAndDestinationHrefSlugsForBestFit.push({\n              source_href_slug: `vms/${vm.id}`,\n              destination_href_slug: `cloud_tenants/${destinationTenantId}`\n            });\n          });\n\n          bestFitFlavorAction(\n            bestFitFlavorUrl,\n            sourceAndDestinationHrefSlugsForBestFit,\n            shouldPrefillForEditing && editingPlan\n          );\n        }\n      );\n\n      instancePropertiesRowsAction(vmStepSelectedVms);\n    }\n  }\n\n  render() {\n    const {\n      isFetchingTenantsWithAttributes,\n      tenantsWithAttributes,\n      selectedMapping,\n      instancePropertiesRows,\n      isSettingSecurityGroupsAndBestFitFlavors,\n      updatedInstancePropertiesRowOnStandby,\n      instancePropertiesRowsAction,\n      bestFitFlavors\n    } = this.props;\n\n    if (isFetchingTenantsWithAttributes || isSettingSecurityGroupsAndBestFitFlavors) {\n      return (\n        <div className=\"blank-slate-pf\">\n          <div className=\"spinner spinner-lg blank-slate-pf-icon\" />\n          <h3 className=\"blank-slate-pf-main-action\">{__('Loading OpenStack Properties...')}</h3>\n        </div>\n      );\n    }\n\n    const tenantsWithAttributesById = getTenantsById(tenantsWithAttributes);\n    const destinationTenantIdsBySourceClusterId = getDestinationTenantIdsBySourceClusterId(\n      selectedMapping.transformation_mapping_items\n    );\n\n    return (\n      <Field\n        name=\"instancePropertiesVms\"\n        component={PlanWizardInstancePropertiesStepTable}\n        rows={instancePropertiesRows}\n        tenantsWithAttributesById={tenantsWithAttributesById}\n        destinationTenantIdsBySourceClusterId={destinationTenantIdsBySourceClusterId}\n        updatedInstancePropertiesRowOnStandby={updatedInstancePropertiesRowOnStandby}\n        instancePropertiesRowsAction={instancePropertiesRowsAction}\n        bestFitFlavors={bestFitFlavors}\n        validate={value =>\n          value.updatedInstancePropertiesRowOnStandby && value.updatedInstancePropertiesRowOnStandby.id\n        }\n      />\n    );\n  }\n}\n\nPlanWizardInstancePropertiesStep.propTypes = {\n  vmStepSelectedVms: PropTypes.array,\n  selectedMapping: PropTypes.object,\n  fetchOpenstackTenantUrl: PropTypes.string,\n  queryOpenstackTenantAttributes: PropTypes.arrayOf(PropTypes.string),\n  queryTenantsWithAttributesAction: PropTypes.func,\n  tenantsWithAttributes: PropTypes.array,\n  isFetchingTenantsWithAttributes: PropTypes.bool,\n  instancePropertiesRowsAction: PropTypes.func,\n  bestFitFlavorAction: PropTypes.func,\n  isSettingSecurityGroupsAndBestFitFlavors: PropTypes.bool,\n  updatedInstancePropertiesRowOnStandby: PropTypes.object,\n  instancePropertiesRows: PropTypes.array,\n  bestFitFlavorUrl: PropTypes.string,\n  recalculateBestFitFlavorAndSecurityGroup: PropTypes.bool,\n  bestFitFlavors: PropTypes.array,\n  editingPlan: PropTypes.object,\n  shouldPrefillForEditing: PropTypes.bool\n};\n\nPlanWizardInstancePropertiesStep.defaultProps = {\n  fetchOpenstackTenantUrl: '/api/cloud_tenants',\n  bestFitFlavorUrl: '/api/transformation_mappings',\n  queryOpenstackTenantAttributes: ['flavors', 'security_groups', 'default_security_group']\n};\n\nexport default reduxForm({\n  form: 'planWizardInstancePropertiesStep',\n  initialValues: {\n    instancePropertiesVms: {\n      updatedInstancePropertiesRowOnStandby: {}\n    }\n  },\n  destroyOnUnmount: false\n})(PlanWizardInstancePropertiesStep);\n","import { string, object } from 'yup';\n\nexport const playbookSchema = object().shape({\n  href: string().required(),\n  id: string().required(),\n  name: string().required(),\n  description: string().nullable()\n});\n","import { array } from 'yup';\nimport { playbookSchema } from './serviceTemplateAnsiblePlaybook';\n\nexport const playbooksSchema = array()\n  .of(playbookSchema)\n  .nullable();\n","import { validateSchema } from '../../../../../../../../data/schemaHelpers';\nimport { playbooksSchema } from '../../../../../../../../data/models/serviceTemplateAnsiblePlaybooks';\n\nexport const validatePlaybooks = playbooks => {\n  validateSchema(playbooksSchema, playbooks);\n};\n","import Immutable from 'seamless-immutable';\n\nimport { validatePlaybooks } from './PlanWizardAdvancedOptionsStepValidators';\n\nimport {\n  FETCH_V2V_PLAYBOOKS,\n  SET_V2V_ADVANCED_OPTIONS_STEP_VMS,\n  RESET_V2V_ADVANCED_OPTIONS_STEP_VMS\n} from './PlanWizardAdvancedOptionsStepConstants';\n\nconst initialState = Immutable({\n  playbooks: [],\n  isFetchingPlaybooks: false,\n  isRejectedPlaybooks: false,\n  errorPlaybooks: null,\n  vms: []\n});\n\nexport default (state = initialState, action) => {\n  switch (action.type) {\n    case `${FETCH_V2V_PLAYBOOKS}_PENDING`:\n      return state.set('isFetchingPlaybooks', true).set('isRejectedPlaybooks', false);\n    case `${FETCH_V2V_PLAYBOOKS}_FULFILLED`:\n      validatePlaybooks(action.payload.data.resources);\n      return state\n        .set('playbooks', action.payload.data.resources)\n        .set('isFetchingPlaybooks', false)\n        .set('isRejectedPlaybooks', false)\n        .set('errorPlaybooks', null);\n    case `${FETCH_V2V_PLAYBOOKS}_REJECTED`:\n      return state\n        .set('errorPlaybooks', action.payload)\n        .set('isFetchingPlaybooks', false)\n        .set('isRejectedPlaybooks', true);\n    case SET_V2V_ADVANCED_OPTIONS_STEP_VMS:\n      return state.set('vms', action.payload);\n    case RESET_V2V_ADVANCED_OPTIONS_STEP_VMS:\n      return state.set('vms', []);\n    default:\n      return state;\n  }\n};\n","import URI from 'urijs';\nimport API from '../../../../../../../../common/API';\n\nimport {\n  FETCH_V2V_PLAYBOOKS,\n  SET_V2V_ADVANCED_OPTIONS_STEP_VMS,\n  RESET_V2V_ADVANCED_OPTIONS_STEP_VMS\n} from './PlanWizardAdvancedOptionsStepConstants';\n\nexport const _getPlaybooksActionCreator = url => dispatch =>\n  dispatch({\n    type: FETCH_V2V_PLAYBOOKS,\n    payload: API.get(url)\n  });\n\nexport const fetchPlaybooksAction = url => {\n  const uri = new URI(url);\n  return _getPlaybooksActionCreator(uri.toString());\n};\n\nexport const setVmsAction = vms => ({\n  type: SET_V2V_ADVANCED_OPTIONS_STEP_VMS,\n  payload: vms\n});\n\nexport const resetVmsAction = () => ({\n  type: RESET_V2V_ADVANCED_OPTIONS_STEP_VMS\n});\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { noop, Table } from 'patternfly-react';\n\nconst vmSelectionCellFormatter = ({ rowData, rowIndex }, onSelectRow, id, label, playbook) => {\n  const checkboxId = id || `select${rowIndex}`;\n  const checkboxLabel = label || sprintf(__('Select row %s'), rowIndex.toString());\n  const scheduleType = label.match('Pre') ? 'preMigration' : 'postMigration';\n\n  return (\n    <Table.SelectionCell>\n      <div className=\"table-view-pf-select-content\">\n        <Table.Checkbox\n          id={checkboxId}\n          label={checkboxLabel}\n          checked={rowData[scheduleType]}\n          onChange={e => {\n            onSelectRow(e, rowData, scheduleType);\n          }}\n          disabled={!playbook[scheduleType]}\n        />\n      </div>\n    </Table.SelectionCell>\n  );\n};\nvmSelectionCellFormatter.propTypes = {\n  /** rowData for this row */\n  rowData: PropTypes.object,\n  /** rowIndex for this row */\n  rowIndex: PropTypes.number.isRequired,\n  /** row selected callback */\n  onSelectRow: PropTypes.func, // eslint-disable-line react/no-unused-prop-types\n  /** checkbox id override */\n  id: PropTypes.string, // eslint-disable-line react/no-unused-prop-types\n  /** checkbox label override */\n  label: PropTypes.string // eslint-disable-line react/no-unused-prop-types\n};\nvmSelectionCellFormatter.defaultProps = {\n  rowData: {},\n  onSelectRow: noop,\n  id: '',\n  label: ''\n};\nexport default vmSelectionCellFormatter;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { noop, Table } from 'patternfly-react';\n\n/**\n * Extends PatternFly React selection header cell formatter\n * b/c if the CSV input has conflicting/invalid rows, we should disable select all\n */\nconst vmSelectionHeaderCellFormatter = ({ cellProps, column, rows, onSelectAllRows }) => {\n  const id = cellProps.id || 'selectAll';\n  const {\n    property: scheduleType,\n    header: { label }\n  } = column;\n  const unselectedRows = rows.filter(r => !r[scheduleType]).length > 0;\n  const { playbook, ...otherCellProps } = cellProps;\n  return (\n    <Table.SelectionHeading className=\"with-label\" aria-label={column.header.label} {...otherCellProps}>\n      <div className=\"table-view-pf-select-content\">\n        <div>{label}</div>\n        <Table.Checkbox\n          id={id}\n          label={label}\n          checked={!unselectedRows}\n          onChange={event => onSelectAllRows(event, scheduleType)}\n          disabled={!playbook[scheduleType]}\n        />\n      </div>\n    </Table.SelectionHeading>\n  );\n};\nvmSelectionHeaderCellFormatter.propTypes = {\n  /** column header cell props */\n  cellProps: PropTypes.object,\n  /** column definition */\n  column: PropTypes.object,\n  /** current table rows */\n  rows: PropTypes.array,\n  /** on select all rows callback */\n  onSelectAllRows: PropTypes.func\n};\nvmSelectionHeaderCellFormatter.defaultProps = {\n  cellProps: {},\n  column: {},\n  rows: [],\n  onSelectAllRows: noop\n};\nexport default vmSelectionHeaderCellFormatter;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport orderBy from 'lodash.orderby';\nimport * as sort from 'sortabular';\nimport * as resolve from 'table-resolver';\nimport { compose } from 'recompose';\nimport { paginate, Grid, PaginationRow, Table, Toolbar, FormControl, Filter, PAGINATION_VIEW } from 'patternfly-react';\n\nimport rowFilter from '../../../common/rowFilter';\nimport searchFilter from '../../../common/searchFilter';\nimport CustomToolbarFind from '../../../common/CustomToolbarFind';\nimport vmSelectionHeaderCellFormatter from './vmSelectionHeaderCellFormatter';\nimport vmSelectionCellFormatter from './vmSelectionCellFormatter';\nimport { FILTER_TYPES } from '../../PlanWizardAdvancedOptionsStepConstants';\n\nclass PlanWizardAdvancedOptionsStepTable extends React.Component {\n  static deselectRow(row, scheduleType) {\n    return { ...row, [scheduleType]: false };\n  }\n  static selectRow(row, scheduleType) {\n    return { ...row, [scheduleType]: true };\n  }\n\n  constructor(props) {\n    super(props);\n\n    // enables our custom header formatters extensions to reactabular\n    this.customHeaderFormatters = Table.customHeaderFormattersDefinition;\n\n    this.state = {\n      // Toolbar Filter state\n      filterTypes: FILTER_TYPES,\n      currentFilterType: FILTER_TYPES[0],\n      currentValue: '',\n      activeFilters: [],\n      searchFilterValue: '',\n\n      // Sort the first column in an ascending way by default.\n      sortingColumns: {\n        name: {\n          direction: Table.TABLE_SORT_DIRECTION.ASC,\n          position: 0\n        }\n      },\n\n      // pagination default states\n      pagination: {\n        page: 1,\n        perPage: 5,\n        perPageOptions: [5, 10, 15]\n      },\n\n      // page input value\n      pageChangeValue: 1\n    };\n  }\n  onFirstPage = () => {\n    this.setPage(1);\n  };\n  onLastPage = () => {\n    const { page } = this.state.pagination;\n    const totalPages = this.totalPages();\n    if (page < totalPages) {\n      this.setPage(totalPages);\n    }\n  };\n  onNextPage = () => {\n    const { page } = this.state.pagination;\n    if (page < this.totalPages()) {\n      this.setPage(this.state.pagination.page + 1);\n    }\n  };\n  onPageInput = e => {\n    this.setState({ pageChangeValue: e.target.value });\n  };\n  onPerPageSelect = (eventKey, e) => {\n    const newPaginationState = Object.assign({}, this.state.pagination);\n    newPaginationState.perPage = eventKey;\n    newPaginationState.page = 1;\n    this.setState({ pagination: newPaginationState });\n  };\n  onPreviousPage = () => {\n    if (this.state.pagination.page > 1) {\n      this.setPage(this.state.pagination.page - 1);\n    }\n  };\n\n  onSelectAllRows = (event, scheduleType) => {\n    const { input, rows, setVmsAction } = this.props;\n    const { checked } = event.target;\n\n    const filteredRows = this.filteredSearchedRows();\n    const currentRows = this.currentRows(filteredRows).rows;\n\n    if (checked) {\n      const updatedSelections = [...new Set([...currentRows.map(row => row.id), ...this.props[scheduleType]])];\n\n      const updatedRows = rows.map(\n        row =>\n          updatedSelections.indexOf(row.id) > -1 ? PlanWizardAdvancedOptionsStepTable.selectRow(row, scheduleType) : row\n      );\n\n      setVmsAction(updatedRows);\n      input.onChange({ ...input.value, [scheduleType]: updatedSelections });\n    } else {\n      const updatedSelections = this.props[scheduleType].filter(id => !currentRows.some(row => row.id === id));\n\n      const updatedRows = rows.map(\n        row =>\n          updatedSelections.indexOf(row.id) > -1\n            ? row\n            : PlanWizardAdvancedOptionsStepTable.deselectRow(row, scheduleType)\n      );\n\n      setVmsAction(updatedRows);\n      input.onChange({ ...input.value, [scheduleType]: updatedSelections });\n    }\n  };\n\n  onSelectRow = (event, row, scheduleType) => {\n    const { input, rows, setVmsAction } = this.props;\n\n    const updatedRows = rows.map(r => {\n      if (r.id === row.id) {\n        return event.target.checked\n          ? PlanWizardAdvancedOptionsStepTable.selectRow(r, scheduleType)\n          : PlanWizardAdvancedOptionsStepTable.deselectRow(r, scheduleType);\n      }\n      return r;\n    });\n\n    const updatedSelections = event.target.checked\n      ? [...this.props[scheduleType], row.id]\n      : this.props[scheduleType].filter(selectedRowId => selectedRowId !== row.id);\n\n    setVmsAction(updatedRows);\n    input.onChange({ ...input.value, [scheduleType]: updatedSelections });\n  };\n\n  onSubmit = () => {\n    this.setPage(this.state.pageChangeValue);\n  };\n  onValueKeyPress = keyEvent => {\n    const { currentValue, currentFilterType } = this.state;\n\n    if (keyEvent.key === 'Enter' && currentValue && currentValue.length > 0) {\n      this.setState({ currentValue: '' });\n      this.filterAdded(currentFilterType, currentValue);\n      keyEvent.stopPropagation();\n      keyEvent.preventDefault();\n    }\n  };\n  onFindAction = value => {\n    // clear filters and set search text (search and filter are independent for now)\n    this.setState({ activeFilters: [], searchFilterValue: value });\n  };\n  onFindExit = () => {\n    this.setState({ searchFilterValue: '' });\n  };\n  setPage = value => {\n    const page = Number(value);\n    if (!Number.isNaN(value) && value !== '' && page > 0 && page <= this.totalPages()) {\n      const newPaginationState = Object.assign({}, this.state.pagination);\n      newPaginationState.page = page;\n      this.setState({ pagination: newPaginationState, pageChangeValue: page });\n    }\n  };\n\n  getColumns = () => {\n    const getSortingColumns = () => this.state.sortingColumns || {};\n\n    const sortableTransform = sort.sort({\n      getSortingColumns,\n      onSort: selectedColumn => {\n        this.setState({\n          sortingColumns: sort.byColumn({\n            sortingColumns: this.state.sortingColumns,\n            sortingOrder: Table.defaultSortingOrder,\n            selectedColumn\n          })\n        });\n      },\n      // Use property or index dependening on the sortingColumns structure specified\n      strategy: sort.strategies.byProperty\n    });\n\n    const sortingFormatter = sort.header({\n      sortableTransform,\n      getSortingColumns,\n      strategy: sort.strategies.byProperty\n    });\n\n    return [\n      {\n        property: 'preMigration',\n        header: {\n          label: __('Premigration Service'),\n          props: {\n            index: 0,\n            rowSpan: 1,\n            colSpan: 1,\n            id: 'pre_migration_select_all',\n            playbook: { preMigration: this.props.preMigrationPlaybook }\n          },\n          customFormatters: [vmSelectionHeaderCellFormatter]\n        },\n        cell: {\n          props: {\n            index: 0\n          },\n          formatters: [\n            (value, { rowData, rowIndex }) =>\n              vmSelectionCellFormatter(\n                { rowData, rowIndex },\n                this.onSelectRow,\n                `pre_migration_select_${rowIndex}`,\n                sprintf(__('Pre Migration Select %s'), rowIndex),\n                { preMigration: this.props.preMigrationPlaybook }\n              )\n          ]\n        }\n      },\n      {\n        property: 'postMigration',\n        header: {\n          label: __('Postmigration Service'),\n          props: {\n            index: 1,\n            rowSpan: 1,\n            colSpan: 1,\n            id: 'post_migration_select_all',\n            playbook: { postMigration: this.props.postMigrationPlaybook }\n          },\n          customFormatters: [vmSelectionHeaderCellFormatter]\n        },\n        cell: {\n          props: {\n            index: 1\n          },\n          formatters: [\n            (value, { rowData, rowIndex }) =>\n              vmSelectionCellFormatter(\n                { rowData, rowIndex },\n                this.onSelectRow,\n                `post_migration_select_${rowIndex}`,\n                sprintf(__('Post Migration Select %s'), rowIndex),\n                { postMigration: this.props.postMigrationPlaybook }\n              )\n          ]\n        }\n      },\n      {\n        property: 'name',\n        header: {\n          label: __('VM Name'),\n          props: {\n            index: 2,\n            rowSpan: 1,\n            colSpan: 1\n          },\n          transforms: [sortableTransform],\n          formatters: [sortingFormatter],\n          customFormatters: [Table.sortableHeaderCellFormatter]\n        },\n        cell: {\n          props: {\n            index: 2\n          },\n          formatters: [Table.tableCellFormatter]\n        }\n      },\n      {\n        property: 'cluster',\n        header: {\n          label: __('Source Cluster'),\n          props: {\n            index: 3,\n            rowSpan: 1,\n            colSpan: 1\n          },\n          transforms: [sortableTransform],\n          formatters: [sortingFormatter],\n          customFormatters: [Table.sortableHeaderCellFormatter]\n        },\n        cell: {\n          props: {\n            index: 3\n          },\n          formatters: [Table.tableCellFormatter]\n        }\n      }\n    ];\n  };\n\n  filteredSearchedRows = () => {\n    const { activeFilters, searchFilterValue } = this.state;\n    const { rows } = this.props;\n    if (activeFilters && activeFilters.length) {\n      return rowFilter(activeFilters, rows);\n    } else if (searchFilterValue) {\n      return searchFilter(searchFilterValue, rows);\n    }\n    return rows;\n  };\n\n  clearFilters = () => {\n    this.setState({ activeFilters: [] });\n  };\n\n  removeFilter = filter => {\n    const { activeFilters } = this.state;\n\n    const index = activeFilters.indexOf(filter);\n    if (index > -1) {\n      const updated = [...activeFilters.slice(0, index), ...activeFilters.slice(index + 1)];\n      this.setState({ activeFilters: updated });\n    }\n  };\n\n  updateCurrentValue = event => {\n    this.setState({ currentValue: event.target.value });\n  };\n\n  filterAdded = (field, value) => {\n    const filterText = `${field.title}: ${value}`;\n    const activeFilters = [...this.state.activeFilters, { label: filterText, field, value }];\n\n    this.setState({ activeFilters });\n  };\n\n  selectFilterType = filterType => {\n    const { currentFilterType } = this.state;\n    if (currentFilterType !== filterType) {\n      this.setState({ currentValue: '', currentFilterType: filterType });\n    }\n  };\n\n  totalPages = () => {\n    const { rows } = this.props;\n    const { perPage } = this.state.pagination;\n    return Math.ceil(rows.length / perPage);\n  };\n\n  currentRows = filteredRows => {\n    const { sortingColumns, pagination } = this.state;\n\n    return compose(\n      paginate(pagination),\n      sort.sorter({\n        columns: this.getColumns(),\n        sortingColumns,\n        sort: orderBy,\n        strategy: sort.strategies.byProperty\n      })\n    )(filteredRows);\n  };\n\n  render() {\n    const {\n      pagination,\n      sortingColumns,\n      pageChangeValue,\n      activeFilters,\n      filterTypes,\n      currentFilterType,\n      currentValue\n    } = this.state;\n\n    const {\n      rows,\n      meta: { pristine, error },\n      preMigration,\n      postMigration\n    } = this.props;\n\n    const filteredRows = this.filteredSearchedRows();\n    const sortedPaginatedRows = this.currentRows(filteredRows);\n\n    const tableFooter = (\n      <tfoot className=\"table-view-pf-footer\">\n        <tr>\n          <td className=\"table-view-pf-footer-count\">\n            {sprintf(__('%s of %s selected'), preMigration.length, rows.length)}\n          </td>\n          <td className=\"table-view-pf-footer-count\">\n            {sprintf(__('%s of %s selected'), postMigration.length, rows.length)}\n          </td>\n          <td className=\"table-view-pf-footer-empty\" />\n          <td className=\"table-view-pf-footer-empty\" />\n        </tr>\n      </tfoot>\n    );\n\n    return (\n      <Grid fluid>\n        <h4>{__('Select VMs on which to run the playbook services')}</h4>\n        <Toolbar className=\"playbook-services-toolbar\">\n          <Filter>\n            <Filter.TypeSelector\n              filterTypes={filterTypes}\n              currentFilterType={currentFilterType}\n              onFilterTypeSelected={this.selectFilterType}\n              id=\"advanced_options_step\"\n            />\n            <FormControl\n              type={currentFilterType.filterType}\n              value={currentValue}\n              placeholder={currentFilterType.placeholder}\n              onChange={e => this.updateCurrentValue(e)}\n              onKeyPress={e => this.onValueKeyPress(e)}\n            />\n          </Filter>\n          <Toolbar.RightContent>\n            <CustomToolbarFind\n              placeholder={__('Find By Keyword...')}\n              onChange={this.onFindAction}\n              onEnter={this.onFindAction}\n              onExit={this.onFindExit}\n            />\n          </Toolbar.RightContent>\n          {activeFilters &&\n            activeFilters.length > 0 && (\n              <Toolbar.Results>\n                <h5>\n                  {filteredRows.length} {filteredRows.length === 1 ? __('Result') : __('Results')}\n                </h5>\n                <Filter.ActiveLabel>{__('Active Filters')}:</Filter.ActiveLabel>\n                <Filter.List>\n                  {activeFilters.map((item, index) => (\n                    <Filter.Item key={index} onRemove={this.removeFilter} filterData={item}>\n                      {item.label}\n                    </Filter.Item>\n                  ))}\n                </Filter.List>\n                <a\n                  href=\"#\"\n                  onClick={e => {\n                    e.preventDefault();\n                    this.clearFilters();\n                  }}\n                >\n                  {__('Clear All Filters')}\n                </a>\n              </Toolbar.Results>\n            )}\n        </Toolbar>\n        <Table.PfProvider\n          striped\n          bordered\n          hover\n          dataTable\n          columns={this.getColumns()}\n          components={{\n            header: {\n              cell: cellProps =>\n                this.customHeaderFormatters({\n                  cellProps,\n                  columns: this.getColumns(),\n                  sortingColumns,\n                  rows: sortedPaginatedRows.rows,\n                  onSelectAllRows: this.onSelectAllRows\n                })\n            }\n          }}\n        >\n          <Table.Header headerRows={resolve.headerRows({ columns: this.getColumns() })} />\n          <Table.Body rows={sortedPaginatedRows.rows || []} rowKey=\"id\" />\n          {tableFooter}\n        </Table.PfProvider>\n        <PaginationRow\n          viewType={PAGINATION_VIEW.TABLE}\n          pagination={pagination}\n          pageInputValue={pageChangeValue}\n          amountOfPages={sortedPaginatedRows.amountOfPages}\n          itemCount={sortedPaginatedRows.itemCount}\n          itemsStart={sortedPaginatedRows.itemsStart}\n          itemsEnd={sortedPaginatedRows.itemsEnd}\n          onPerPageSelect={this.onPerPageSelect}\n          onFirstPage={this.onFirstPage}\n          onPreviousPage={this.onPreviousPage}\n          onPageInput={this.onPageInput}\n          onNextPage={this.onNextPage}\n          onLastPage={this.onLastPage}\n          onSubmit={this.onSubmit}\n        />\n        <br />\n        {pristine && error}\n      </Grid>\n    );\n  }\n}\n\nPlanWizardAdvancedOptionsStepTable.propTypes = {\n  rows: PropTypes.array,\n  input: PropTypes.shape({\n    value: PropTypes.shape({\n      preMigration: PropTypes.arrayOf(PropTypes.string),\n      postMigration: PropTypes.arrayOf(PropTypes.string)\n    }),\n    onChange: PropTypes.func\n  }),\n  meta: PropTypes.shape({\n    pristine: PropTypes.bool,\n    error: PropTypes.string\n  }),\n  preMigrationPlaybook: PropTypes.string,\n  postMigrationPlaybook: PropTypes.string,\n  setVmsAction: PropTypes.func,\n  preMigration: PropTypes.array,\n  postMigration: PropTypes.array\n};\n\nPlanWizardAdvancedOptionsStepTable.defaultProps = {\n  rows: [],\n  preMigration: [],\n  postMigration: []\n};\n\nexport default PlanWizardAdvancedOptionsStepTable;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { Field, reduxForm } from 'redux-form';\nimport { Form, Spinner } from 'patternfly-react';\n\nimport PlanWizardAdvancedOptionsStepTable from './components/PlanWizardAdvancedOptionsStepTable/PlanWizardAdvancedOptionsStepTable';\nimport { BootstrapSelect } from '../../../../../common/forms/BootstrapSelect';\nimport { preselectPlaybooksForVms, applyPlaybookSelections, updatePlaybookSelections } from './helpers';\n\nclass PlanWizardAdvancedOptionsStep extends Component {\n  constructor(props) {\n    super(props);\n\n    if (props.pristine) {\n      if (!props.shouldPrefillForEditing) {\n        props.setVmsAction(props.vmStepSelectedVms);\n      } else {\n        props.setVmsAction(preselectPlaybooksForVms(props.editingPlan, props.vmStepSelectedVms));\n      }\n    } else {\n      const {\n        vmStepSelectedVms,\n        advancedOptionsStepForm: {\n          values: { playbookVms }\n        }\n      } = props;\n      props.change('playbookVms', updatePlaybookSelections(vmStepSelectedVms, playbookVms));\n      props.setVmsAction(applyPlaybookSelections(vmStepSelectedVms, playbookVms));\n    }\n  }\n\n  componentDidMount() {\n    const { fetchPlaybooksAction, fetchPlaybooksUrl } = this.props;\n    fetchPlaybooksAction(fetchPlaybooksUrl);\n  }\n\n  onSelectChange = (event, scheduleType) => {\n    if (event.target.value === '') {\n      const { change, setVmsAction, vms } = this.props;\n      change(`playbookVms.${scheduleType}`, []);\n      setVmsAction(vms.map(vm => ({ ...vm, [scheduleType]: false })));\n    }\n  };\n\n  render() {\n    const { playbooks, isFetchingPlaybooks, advancedOptionsStepForm, vms, setVmsAction } = this.props;\n\n    return (\n      <Spinner loading={isFetchingPlaybooks}>\n        <Form className=\"playbook-selects\">\n          <Field\n            name=\"preMigrationPlaybook\"\n            component={BootstrapSelect}\n            options={playbooks}\n            option_key=\"id\"\n            option_value=\"name\"\n            label={__('Select premigration playbook service (optional)')}\n            stacked_label\n            controlWidth={12}\n            allowClear\n            onChange={event => this.onSelectChange(event, 'preMigration')}\n          />\n          <Field\n            name=\"postMigrationPlaybook\"\n            component={BootstrapSelect}\n            options={playbooks}\n            option_key=\"id\"\n            option_value=\"name\"\n            label={__('Select postmigration playbook service (optional)')}\n            stacked_label\n            controlWidth={12}\n            allowClear\n            onChange={event => this.onSelectChange(event, 'postMigration')}\n          />\n        </Form>\n        {advancedOptionsStepForm &&\n          advancedOptionsStepForm.values && (\n            <Field\n              name=\"playbookVms\"\n              component={PlanWizardAdvancedOptionsStepTable}\n              rows={vms}\n              preMigrationPlaybook={advancedOptionsStepForm.values.preMigrationPlaybook}\n              postMigrationPlaybook={advancedOptionsStepForm.values.postMigrationPlaybook}\n              setVmsAction={setVmsAction}\n              preMigration={\n                advancedOptionsStepForm.values.playbookVms && advancedOptionsStepForm.values.playbookVms.preMigration\n              }\n              postMigration={\n                advancedOptionsStepForm.values.playbookVms && advancedOptionsStepForm.values.playbookVms.postMigration\n              }\n            />\n          )}\n      </Spinner>\n    );\n  }\n}\n\nPlanWizardAdvancedOptionsStep.propTypes = {\n  playbooks: PropTypes.array,\n  isFetchingPlaybooks: PropTypes.bool,\n  fetchPlaybooksAction: PropTypes.func,\n  fetchPlaybooksUrl: PropTypes.string,\n  advancedOptionsStepForm: PropTypes.object,\n  vms: PropTypes.array,\n  setVmsAction: PropTypes.func,\n  vmStepSelectedVms: PropTypes.array,\n  change: PropTypes.func,\n  editingPlan: PropTypes.object,\n  shouldPrefillForEditing: PropTypes.bool,\n  pristine: PropTypes.bool\n};\n\nPlanWizardAdvancedOptionsStep.defaultProps = {\n  fetchPlaybooksUrl: \"/api/service_templates/?filter[]=type='ServiceTemplateAnsiblePlaybook'&expand=resources\"\n};\n\nexport default reduxForm({\n  form: 'planWizardAdvancedOptionsStep',\n  destroyOnUnmount: false\n})(PlanWizardAdvancedOptionsStep);\n","import Immutable from 'seamless-immutable';\n\nimport {\n  V2V_SET_PLANS_BODY,\n  V2V_SET_PLAN_SCHEDULE,\n  V2V_PLAN_WIZARD_SHOW_ALERT,\n  V2V_PLAN_WIZARD_HIDE_ALERT\n} from './PlanWizardConstants';\n\nconst initialState = Immutable({\n  plansBody: {}\n});\n\nexport default (state = initialState, action) => {\n  switch (action.type) {\n    case V2V_SET_PLANS_BODY:\n      return state.set('plansBody', action.payload);\n    case V2V_SET_PLAN_SCHEDULE:\n      return state.set('planSchedule', action.payload);\n    case V2V_PLAN_WIZARD_SHOW_ALERT:\n      return Immutable.merge(state, action.payload);\n    case V2V_PLAN_WIZARD_HIDE_ALERT:\n      return state.set('alertText', '');\n    default:\n      return state;\n  }\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Field, reduxForm } from 'redux-form';\nimport { Form, Icon } from 'patternfly-react';\nimport { FormField } from '../../../../../common/forms/FormField';\n\nexport const PlanWizardScheduleStep = ({ targetProvider, migration_plan_choice_radio }) => (\n  <Form className=\"form-horizontal\">\n    <Field\n      name=\"migration_plan_choice_radio\"\n      label={__('Run migration plan')}\n      component={FormField}\n      type=\"radio\"\n      labelWidth=\"3\"\n      options={[\n        {\n          name: __('Save migration plan to run later'),\n          id: 'migration_plan_later'\n        },\n        {\n          name: __('Start migration immediately'),\n          id: 'migration_plan_now'\n        }\n      ]}\n      help={\n        targetProvider === 'openstack' && migration_plan_choice_radio === 'migration_plan_now' ? (\n          <div className=\"plan-wizard-vm-power-warning\">\n            <Icon type=\"pf\" name=\"warning-triangle-o\" />\n            <p>\n              {__('VMs must be powered on in order to migrate.')}\n              <br />\n              {__('Ensure that all VMs in the Migration Plan are powered on before selecting Create.')}\n            </p>\n          </div>\n        ) : null\n      }\n    />\n  </Form>\n);\n\nPlanWizardScheduleStep.propTypes = {\n  targetProvider: PropTypes.string,\n  migration_plan_choice_radio: PropTypes.string\n};\n\nexport default reduxForm({\n  form: 'planWizardScheduleStep',\n  destroyOnUnmount: false\n})(PlanWizardScheduleStep);\n","import { connect } from 'react-redux';\nimport PlanWizardScheduleStep from './PlanWizardScheduleStep';\nimport { getCurrentTargetProvider } from '../../PlanWizardSelectors';\n\nconst mapStateToProps = ({ overview: { transformationMappings }, form }) => ({\n  targetProvider: getCurrentTargetProvider(form, transformationMappings),\n  migration_plan_choice_radio:\n    form.planWizardScheduleStep &&\n    form.planWizardScheduleStep.values &&\n    form.planWizardScheduleStep.values.migration_plan_choice_radio,\n  initialValues: {\n    migration_plan_choice_radio: 'migration_plan_later'\n  }\n});\n\nexport default connect(mapStateToProps)(PlanWizardScheduleStep);\n","import React from 'react';\nimport { Field, reduxForm } from 'redux-form';\nimport { required } from 'redux-form-validators';\nimport { Form } from 'patternfly-react';\nimport PropTypes from 'prop-types';\nimport { FormField } from '../../../../../common/forms/FormField';\nimport { BootstrapSelect } from '../../../../../common/forms/BootstrapSelect';\nimport { validation } from '../../../../../../../../common/constants';\nimport { asyncValidate, onChange } from './helpers';\n\nconst PlanWizardGeneralStep = ({\n  transformationMappings,\n  editingPlan,\n  editingOrphanedPlan,\n  showAlertAction,\n  hideAlertAction\n}) => (\n  <Form className=\"form-horizontal\">\n    <Field\n      name=\"infrastructure_mapping\"\n      label={__('Infrastructure Mapping')}\n      required\n      data_live_search=\"true\"\n      component={BootstrapSelect}\n      validate={[required({ msg: __('Required') })]}\n      options={transformationMappings}\n      option_key=\"id\"\n      option_value=\"name\"\n      form_name=\"planWizardGeneralStep\"\n      inline_label\n      labelWidth={2}\n      controlWidth={9}\n      onChange={event => {\n        if (editingPlan && (editingOrphanedPlan || event.target.value !== editingPlan.transformation_mapping.id)) {\n          showAlertAction(\n            __('Selecting a different infrastructure mapping will cause all VM and option selections to be cleared.'),\n            'warning'\n          );\n        } else {\n          hideAlertAction();\n        }\n      }}\n    />\n    <Field\n      name=\"name\"\n      label={__('Name')}\n      required\n      component={FormField}\n      type=\"text\"\n      help={validation.name.help}\n      maxLength={validation.name.maxLength}\n      maxLengthWarning={validation.name.maxLengthWarning}\n      validate={[\n        required({\n          msg: validation.name.requiredMessage\n        })\n      ]}\n    />\n    <Field\n      name=\"description\"\n      label={__('Description')}\n      component={FormField}\n      type=\"textarea\"\n      help={validation.description.help}\n      maxLength={validation.description.maxLength}\n      maxLengthWarning={validation.description.maxLengthWarning}\n    />\n    <Field\n      name=\"vm_choice_radio\"\n      label={__('Select VMs')}\n      component={FormField}\n      type=\"radio\"\n      options={[\n        {\n          name: __('Choose from a list of VMs discovered in the selected infrastructure mapping'),\n          id: 'vms_via_discovery'\n        },\n        {\n          name: __('Import a CSV file with a list of VMs to be migrated'),\n          id: 'vms_via_csv'\n        }\n      ]}\n    />\n  </Form>\n);\n\nPlanWizardGeneralStep.propTypes = {\n  transformationMappings: PropTypes.array,\n  editingPlan: PropTypes.object,\n  editingOrphanedPlan: PropTypes.bool,\n  showAlertAction: PropTypes.func,\n  hideAlertAction: PropTypes.func\n};\n\nexport default reduxForm({\n  form: 'planWizardGeneralStep',\n  destroyOnUnmount: false,\n  asyncValidate,\n  asyncBlurFields: ['name'],\n  onChange\n})(PlanWizardGeneralStep);\n","import { connect } from 'react-redux';\nimport PlanWizardGeneralStep from './PlanWizardGeneralStep';\nimport { showAlertAction, hideAlertAction } from '../../PlanWizardActions';\nimport { findEditingPlan } from '../../PlanWizardSelectors';\n\nconst mapStateToProps = ({ overview, planWizard }) => {\n  const editingPlan = findEditingPlan(overview.transformationPlans, overview.editingPlanId);\n  const prefilledMappingId =\n    editingPlan &&\n    editingPlan.options &&\n    editingPlan.options.config_info &&\n    editingPlan.options.config_info.transformation_mapping_id;\n  const prefilledMappingExists =\n    prefilledMappingId && overview.transformationMappings.some(mapping => mapping.id === prefilledMappingId);\n  return {\n    transformationMappings: overview.transformationMappings,\n    transformationPlans: overview.transformationPlans,\n    archivedTransformationPlans: overview.archivedTransformationPlans,\n    initialValues: {\n      infrastructure_mapping: (prefilledMappingExists && prefilledMappingId) || overview.planWizardId,\n      vm_choice_radio: 'vms_via_discovery',\n      name: editingPlan ? editingPlan.name : '',\n      description: editingPlan ? editingPlan.description : ''\n    },\n    enableReinitialize: true, // Tells redux-form to use new initialValues when they change\n    keepDirtyOnReinitialize: true,\n    editingPlan,\n    editingOrphanedPlan: prefilledMappingId && !prefilledMappingExists,\n    alertType: planWizard && planWizard.alertType\n  };\n};\n\nconst actions = { showAlertAction, hideAlertAction };\n\nexport default connect(\n  mapStateToProps,\n  actions\n)(PlanWizardGeneralStep);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { noop } from 'patternfly-react';\nimport ModalWizard from '../../../common/ModalWizard';\n\nclass PlanWizardBody extends React.Component {\n  shouldComponentUpdate(nextProps, nextState) {\n    return JSON.stringify(this.props) !== JSON.stringify(nextProps);\n  }\n  componentWillUnmount() {\n    const { hideAlertAction } = this.props;\n    hideAlertAction();\n  }\n  render() {\n    const { wizardSteps } = this.props;\n    return (\n      <ModalWizard.Body\n        {...this.props}\n        loadingTitle={__('Loading Migration Plans...')}\n        loadingMessage={__('This may take a minute.')}\n        stepButtonsDisabled\n        steps={wizardSteps}\n      />\n    );\n  }\n}\n\nPlanWizardBody.propTypes = {\n  wizardSteps: PropTypes.arrayOf(PropTypes.object).isRequired,\n  loaded: PropTypes.bool,\n  activeStepIndex: PropTypes.number,\n  activeStep: PropTypes.string,\n  goToStep: PropTypes.func,\n  disableNextStep: PropTypes.bool,\n  plansBody: PropTypes.object,\n  hideAlertAction: PropTypes.func\n};\n\nPlanWizardBody.defaultProps = {\n  loaded: false,\n  activeStepIndex: 0,\n  activeStep: '1',\n  goToStep: noop,\n  disableNextStep: true,\n  plansBody: {},\n  hideAlertAction: noop\n};\n\nexport default PlanWizardBody;\n","export const createMigrationPlans = (\n  planWizardGeneralStep,\n  planWizardVMStep,\n  planWizardInstancePropertiesStep,\n  planWizardAdvancedOptionsStep,\n  isEditing = false\n) => {\n  const planName = planWizardGeneralStep.values.name;\n  const planDescription = planWizardGeneralStep.values.description;\n  const infrastructureMapping = planWizardGeneralStep.values.infrastructure_mapping;\n  const vms = planWizardVMStep.values.selectedVms;\n  const ospInstanceProperties =\n    planWizardInstancePropertiesStep.values && planWizardInstancePropertiesStep.values.instancePropertiesVms.rows;\n\n  const {\n    playbookVms: { preMigration, postMigration },\n    preMigrationPlaybook,\n    postMigrationPlaybook\n  } = planWizardAdvancedOptionsStep.values;\n\n  const actions = vms.map(vmId => ({\n    vm_id: vmId,\n    pre_service: preMigration.includes(vmId),\n    post_service: postMigration.includes(vmId),\n    osp_security_group_id: ospInstanceProperties && ospInstanceProperties[vmId].osp_security_group_id,\n    osp_flavor_id: ospInstanceProperties && ospInstanceProperties[vmId].osp_flavor_id\n  }));\n\n  return {\n    name: planName,\n    description: planDescription,\n    prov_type: isEditing ? 'transformation_plan' : 'generic_transformation_plan',\n    config_info: {\n      transformation_mapping_id: infrastructureMapping,\n      pre_service_id: preMigrationPlaybook,\n      post_service_id: postMigrationPlaybook,\n      actions\n    }\n  };\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { noop, Button, Icon, Wizard } from 'patternfly-react';\nimport { createMigrationPlans } from './helpers';\nimport PlanWizardBody from './PlanWizardBody';\nimport { MIGRATIONS_FILTERS, OSP_TENANT } from '../../OverviewConstants';\n\nimport componentRegistry from '../../../../../../components/componentRegistry';\nimport PlanWizardGeneralStep from '../PlanWizard/components/PlanWizardGeneralStep';\nimport PlanWizardScheduleStep from '../PlanWizard/components/PlanWizardScheduleStep';\n\nimport { stepIDs, overwriteCsvConfirmModalProps } from './PlanWizardConstants';\n\nclass PlanWizard extends React.Component {\n  planWizardVMStepContainer = componentRegistry.markup('PlanWizardVMStepContainer');\n  planWizardResultsStepContainer = componentRegistry.markup('PlanWizardResultsStepContainer');\n  planWizardAdvancedOptionsStepContainer = componentRegistry.markup('PlanWizardAdvancedOptionsStepContainer');\n  planWizardInstancePropertiesStepContainer = componentRegistry.markup('PlanWizardInstancePropertiesStepContainer');\n\n  state = { activeStepIndex: 0 };\n\n  getWizardSteps = () => {\n    const { planWizardGeneralStep, transformationMappings } = this.props;\n\n    const generalStep = {\n      id: stepIDs.generalStep,\n      title: __('General'),\n      render: () => <PlanWizardGeneralStep />,\n      disableGoto: !this.props.planWizardGeneralStep.values\n    };\n    const vmStep = {\n      id: stepIDs.vmStep,\n      title: __('VMs'),\n      render: () => this.planWizardVMStepContainer,\n      disableGoto: !this.props.planWizardVMStep.values\n    };\n    const instancePropertiesStep = {\n      id: stepIDs.instancePropertiesStep,\n      title: __('Instance Properties'),\n      render: () => this.planWizardInstancePropertiesStepContainer,\n      disableGoto: true\n    };\n    const advancedOptionsStep = {\n      id: stepIDs.advancedOptionsStep,\n      title: __('Advanced Options'),\n      render: () => this.planWizardAdvancedOptionsStepContainer,\n      disableGoto: true\n    };\n    const scheduleStep = {\n      id: stepIDs.scheduleStep,\n      title: __('Schedule'),\n      render: () => <PlanWizardScheduleStep />,\n      disableGoto: true\n    };\n    const resultsStep = {\n      id: stepIDs.resultsStep,\n      title: __('Results'),\n      render: () => this.planWizardResultsStepContainer,\n      disableGoto: true\n    };\n\n    const selectedMappingId =\n      planWizardGeneralStep && planWizardGeneralStep.values && planWizardGeneralStep.values.infrastructure_mapping;\n    const selectedMapping = transformationMappings.find(mapping => mapping.id === selectedMappingId);\n\n    const openstackTargetSelected =\n      selectedMapping &&\n      selectedMapping.transformation_mapping_items &&\n      selectedMapping.transformation_mapping_items.some(item => item.destination_type === OSP_TENANT);\n\n    if (openstackTargetSelected) {\n      return [generalStep, vmStep, instancePropertiesStep, advancedOptionsStep, scheduleStep, resultsStep];\n    }\n\n    return [generalStep, vmStep, advancedOptionsStep, scheduleStep, resultsStep];\n  };\n\n  getActiveWizardStep = () => {\n    const { activeStepIndex } = this.state;\n    return this.getWizardSteps()[activeStepIndex];\n  };\n\n  prevStep = () => {\n    const { resetVmStepAction, setMetadataWithBackButtonClickedAction } = this.props;\n    const { activeStepIndex } = this.state;\n\n    const activeStep = this.getActiveWizardStep();\n\n    setMetadataWithBackButtonClickedAction(activeStep.id);\n\n    if (activeStep.id === stepIDs.vmStep) {\n      // reset all vm step values if going back from that step\n      resetVmStepAction();\n    }\n    this.setState({ activeStepIndex: Math.max(activeStepIndex - 1, 0) });\n  };\n\n  nextStep = () => {\n    const { activeStepIndex } = this.state;\n    const {\n      planWizardGeneralStep,\n      planWizardVMStep,\n      planWizardInstancePropertiesStep,\n      planWizardAdvancedOptionsStep,\n      planWizardScheduleStep,\n      setPlansBodyAction,\n      setPlanScheduleAction,\n      setMigrationsFilterAction,\n      showConfirmModalAction,\n      hideConfirmModalAction,\n      showAlertAction,\n      hideAlertAction,\n      setMetadataWithNextButtonClickedAction,\n      editingPlan\n    } = this.props;\n\n    const wizardSteps = this.getWizardSteps();\n    const activeStep = wizardSteps[activeStepIndex];\n\n    setMetadataWithNextButtonClickedAction(activeStep.id);\n\n    if (activeStep.id === stepIDs.generalStep) {\n      if (planWizardGeneralStep.asyncErrors) {\n        showAlertAction(sprintf(__('Name %s already exists'), planWizardGeneralStep.values.name));\n        return;\n      }\n      hideAlertAction();\n\n      if (editingPlan && planWizardGeneralStep.values.vm_choice_radio === 'vms_via_csv') {\n        showConfirmModalAction({\n          ...overwriteCsvConfirmModalProps,\n          onConfirm: () => {\n            hideConfirmModalAction();\n            this.goToStepId(stepIDs.vmStep);\n          }\n        });\n        return;\n      }\n    }\n\n    if (\n      activeStep.id === stepIDs.advancedOptionsStep &&\n      ((planWizardAdvancedOptionsStep.values.preMigrationPlaybook &&\n        planWizardAdvancedOptionsStep.values.playbookVms.preMigration.length === 0) ||\n        (planWizardAdvancedOptionsStep.values.postMigrationPlaybook &&\n          planWizardAdvancedOptionsStep.values.playbookVms.postMigration.length === 0))\n    ) {\n      const onConfirm = () => {\n        this.goToStepId(stepIDs.scheduleStep);\n        hideConfirmModalAction();\n      };\n\n      showConfirmModalAction({\n        title: __('No VMs Selected'),\n        body: __(\"You've selected a premigration or postmigration playbook service but no VMs on which to run the playbook service. Are you sure you want to continue?\"), // prettier-ignore\n        icon: <Icon className=\"confirm-warning-icon\" type=\"pf\" name=\"warning-triangle-o\" />,\n        confirmButtonLabel: __('Continue'),\n        dialogClassName: 'plan-wizard-confirm-modal',\n        backdropClassName: 'plan-wizard-confirm-backdrop',\n        onConfirm\n      });\n    } else if (activeStep.id === stepIDs.scheduleStep) {\n      const isEditing = !!editingPlan;\n      const plansBody = createMigrationPlans(\n        planWizardGeneralStep,\n        planWizardVMStep,\n        planWizardInstancePropertiesStep,\n        planWizardAdvancedOptionsStep,\n        isEditing\n      );\n\n      setPlanScheduleAction(planWizardScheduleStep.values.migration_plan_choice_radio);\n      setPlansBodyAction(plansBody);\n\n      if (planWizardScheduleStep.values.migration_plan_choice_radio === 'migration_plan_now') {\n        setMigrationsFilterAction(MIGRATIONS_FILTERS.inProgress);\n      } else if (planWizardScheduleStep.values.migration_plan_choice_radio === 'migration_plan_later') {\n        setMigrationsFilterAction(MIGRATIONS_FILTERS.notStarted);\n      }\n      this.goToStepId(stepIDs.resultsStep);\n    } else {\n      // This is for steps that do not need any special logic on step change.\n      // In case the above logic doesn't explicitly take us to another step, we advance one step by index.\n      this.goToStep(Math.min(activeStepIndex + 1, wizardSteps.length - 1));\n    }\n  };\n\n  goToStep = activeStepIndex => {\n    this.setState({ activeStepIndex });\n  };\n\n  goToStepId = id => {\n    const targetStepIndex = this.getWizardSteps().findIndex(step => step.id === id);\n    if (targetStepIndex) {\n      this.goToStep(targetStepIndex);\n    }\n  };\n\n  render() {\n    const {\n      hidePlanWizard,\n      hidePlanWizardAction,\n      planWizardExitedAction,\n      alertText,\n      alertType,\n      hideAlertAction,\n      editingPlan\n    } = this.props;\n\n    const wizardSteps = this.getWizardSteps();\n\n    const { activeStepIndex, plansBody } = this.state;\n    const activeStep = (activeStepIndex + 1).toString();\n    const onFirstStep = activeStepIndex === 0;\n    const onFinalStep = activeStepIndex === wizardSteps.length - 1;\n\n    const currentStepProp = !onFinalStep && wizardSteps[activeStepIndex].id;\n    const currentStepForm = !onFinalStep && this.props[currentStepProp];\n\n    const currentStepHasErrors = currentStepForm && (!!currentStepForm.syncErrors || !!currentStepForm.asyncErrors);\n\n    const disableNextStep =\n      (!onFinalStep && currentStepHasErrors) ||\n      (currentStepProp === stepIDs.vmStep &&\n        (!this.props.planWizardVMStep.values ||\n          !this.props.planWizardVMStep.values.selectedVms ||\n          this.props.planWizardVMStep.values.selectedVms.length === 0));\n\n    const saveButtonLabel = editingPlan ? __('Save') : __('Create');\n\n    const wizardTitle = editingPlan ? __('Edit Migration Plan') : __('Create Migration Plan');\n\n    return (\n      <Wizard show={!hidePlanWizard} onClose={hidePlanWizardAction} onExited={planWizardExitedAction} backdrop=\"static\">\n        <Wizard.Header onClose={hidePlanWizardAction} title={wizardTitle} />\n\n        <Wizard.Body>\n          <PlanWizardBody\n            wizardSteps={wizardSteps}\n            loaded\n            activeStepIndex={activeStepIndex}\n            activeStep={activeStep}\n            goToStep={this.goToStep}\n            disableNextStep={disableNextStep}\n            plansBody={plansBody}\n            alertText={alertText}\n            alertType={alertType}\n            hideAlertAction={hideAlertAction}\n          />\n        </Wizard.Body>\n\n        <Wizard.Footer className=\"wizard-pf-footer\">\n          <Button bsStyle=\"default\" className=\"btn-cancel\" onClick={hidePlanWizardAction} disabled={onFinalStep}>\n            {__('Cancel')}\n          </Button>\n          <Button bsStyle=\"default\" onClick={this.prevStep} disabled={onFirstStep || onFinalStep}>\n            <Icon type=\"fa\" name=\"angle-left\" />\n            {__('Back')}\n          </Button>\n          <Button\n            bsStyle=\"primary\"\n            onClick={onFinalStep ? hidePlanWizardAction : this.nextStep}\n            disabled={disableNextStep}\n          >\n            {onFinalStep ? __('Close') : currentStepProp === stepIDs.scheduleStep ? saveButtonLabel : __('Next')}\n            {!onFinalStep && <Icon type=\"fa\" name=\"angle-right\" />}\n          </Button>\n        </Wizard.Footer>\n      </Wizard>\n    );\n  }\n}\nPlanWizard.propTypes = {\n  hidePlanWizard: PropTypes.bool,\n  hidePlanWizardAction: PropTypes.func,\n  planWizardExitedAction: PropTypes.func,\n  planWizardGeneralStep: PropTypes.object,\n  planWizardVMStep: PropTypes.object,\n  planWizardInstancePropertiesStep: PropTypes.object,\n  planWizardAdvancedOptionsStep: PropTypes.object, // eslint-disable-line react/no-unused-prop-types\n  planWizardScheduleStep: PropTypes.object,\n  transformationMappings: PropTypes.array,\n  setPlansBodyAction: PropTypes.func,\n  setPlanScheduleAction: PropTypes.func,\n  resetVmStepAction: PropTypes.func,\n  setMigrationsFilterAction: PropTypes.func,\n  showConfirmModalAction: PropTypes.func,\n  hideConfirmModalAction: PropTypes.func,\n  showAlertAction: PropTypes.func,\n  hideAlertAction: PropTypes.func,\n  alertText: PropTypes.string,\n  alertType: PropTypes.string,\n  setMetadataWithBackButtonClickedAction: PropTypes.func,\n  setMetadataWithNextButtonClickedAction: PropTypes.func,\n  editingPlan: PropTypes.object\n};\nPlanWizard.defaultProps = {\n  hidePlanWizard: true,\n  hidePlanWizardAction: noop,\n  planWizardExitedAction: noop,\n  planWizardGeneralStep: {},\n  planWizardVMStep: {},\n  planWizardInstancePropertiesStep: {},\n  planWizardAdvancedOptionsStep: {},\n  planWizardScheduleStep: {},\n  transformationMappings: [],\n  setPlansBodyAction: noop,\n  setPlanScheduleAction: noop,\n  resetVmStepAction: noop,\n  showAlertAction: noop,\n  hideAlertAction: noop,\n  alertText: undefined,\n  alertType: undefined\n};\nexport default PlanWizard;\n","import Immutable from 'seamless-immutable';\n\nimport {\n  POST_V2V_MIGRATION_PLANS,\n  POST_V2V_MIGRATION_REQUESTS,\n  PUT_V2V_MIGRATION_PLANS\n} from './PlanWizardResultsStepConstants';\n\nconst initialState = Immutable({\n  isPostingPlans: false,\n  isRejectedPostingPlans: false,\n  errorPostingPlans: null,\n  migrationPlansResult: {},\n  isPuttingPlans: false,\n  isRejectedPuttingPlans: false,\n  errorPuttingPlans: null\n});\n\nexport default (state = initialState, action) => {\n  switch (action.type) {\n    case `${POST_V2V_MIGRATION_PLANS}_PENDING`:\n      return state.set('isPostingPlans', true);\n    case `${POST_V2V_MIGRATION_PLANS}_FULFILLED`:\n      return state\n        .set('migrationPlansResult', action.payload.data)\n        .set('isRejectedPostingPlans', false)\n        .set('isPostingPlans', false);\n    case `${POST_V2V_MIGRATION_PLANS}_REJECTED`:\n      return state\n        .set('errorPostingPlans', action.payload)\n        .set('isRejectedPostingPlans', true)\n        .set('isPostingPlans', false);\n    case `${PUT_V2V_MIGRATION_PLANS}_PENDING`:\n      return state.set('isPuttingPlans', true);\n    case `${PUT_V2V_MIGRATION_PLANS}_FULFILLED`:\n      return state\n        .set('migrationPlansResult', action.payload)\n        .set('isRejectedPuttingPlans', false)\n        .set('isPuttingPlans', false);\n    case `${PUT_V2V_MIGRATION_PLANS}_REJECTED`:\n      return state\n        .set('errorPuttingPlans', action.payload)\n        .set('isRejectedPuttingPlans', true)\n        .set('isPuttingPlans', false);\n    case `${POST_V2V_MIGRATION_REQUESTS}_PENDING`:\n      return state.set('isPostingRequests', true);\n    case `${POST_V2V_MIGRATION_REQUESTS}_FULFILLED`:\n      return state\n        .set('migrationRequestsResult', action.payload.data)\n        .set('isRejectedPostingRequests', false)\n        .set('isPostingRequests', false);\n    case `${POST_V2V_MIGRATION_REQUESTS}_REJECTED`:\n      return state\n        .set('errorPostingRequests', action.payload)\n        .set('isRejectedPostingRequests', true)\n        .set('isPostingRequests', false);\n    default:\n      return state;\n  }\n};\n","import API from '../../../../../../../../common/API';\nimport {\n  POST_V2V_MIGRATION_PLANS,\n  POST_V2V_MIGRATION_REQUESTS,\n  PUT_V2V_MIGRATION_PLANS\n} from './PlanWizardResultsStepConstants';\n\nexport { hidePlanWizardAction } from '../../PlanWizardActions';\n\nconst postMigrationRequestsAction = (response, dispatch) => {\n  dispatch({\n    type: POST_V2V_MIGRATION_REQUESTS,\n    payload: new Promise((resolve, reject) => {\n      API.post(`${response.data.results[0].href}`, {\n        action: 'order'\n      })\n        .then(responseMigrationRequest => {\n          resolve(responseMigrationRequest);\n        })\n        .catch(e => reject(e));\n    })\n  });\n};\n\nconst _postMigrationPlansActionCreator = (url, migrationPlans, planSchedule) => dispatch =>\n  dispatch({\n    type: POST_V2V_MIGRATION_PLANS,\n    payload: new Promise((resolve, reject) => {\n      API.post(url, migrationPlans)\n        .then(response => {\n          resolve(response);\n          if (planSchedule === 'migration_plan_now') {\n            postMigrationRequestsAction(response, dispatch);\n          }\n        })\n        .catch(e => reject(e));\n    })\n  });\n\nexport const postMigrationPlansAction = (url, migrationPlans, planSchedule) =>\n  _postMigrationPlansActionCreator(url, migrationPlans, planSchedule);\n\nconst _editMigrationPlansActionCreator = (url, planId, migrationPlans, planSchedule) => dispatch => {\n  const body = {\n    action: 'edit',\n    resource: { ...migrationPlans }\n  };\n  return dispatch({\n    type: PUT_V2V_MIGRATION_PLANS,\n    payload: new Promise((resolve, reject) => {\n      API.post(`${url}/${planId}`, body)\n        .then(response => {\n          resolve(response);\n          if (planSchedule === 'migration_plan_now') {\n            postMigrationRequestsAction(response, dispatch);\n          }\n        })\n        .catch(e => reject(e));\n    })\n  });\n};\n\nexport const editMigrationPlansAction = (url, planId, migrationPlans, planSchedule) =>\n  _editMigrationPlansActionCreator(url, planId, migrationPlans, planSchedule);\n","export const planHasBeenEdited = (editingPlan, postBody, planSchedule) => {\n  const originalConfigInfo = JSON.stringify(editingPlan.options.config_info);\n  const currentConfigInfo = JSON.stringify(postBody.config_info);\n  return (\n    planSchedule === 'migration_plan_now' ||\n    editingPlan.name !== postBody.name ||\n    editingPlan.description !== postBody.description ||\n    originalConfigInfo !== currentConfigInfo\n  );\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { noop, Icon } from 'patternfly-react';\nimport { planHasBeenEdited } from './helpers';\nimport WizardLoadingState from '../../../../../common/WizardLoadingState';\nimport WizardErrorState from '../../../../../common/WizardErrorState';\n\nclass PlanWizardResultsStep extends React.Component {\n  componentDidMount() {\n    const {\n      postPlansUrl,\n      postMigrationPlansAction,\n      editPlansUrl,\n      editMigrationPlansAction,\n      plansBody,\n      planSchedule,\n      editingPlan\n    } = this.props;\n    if (!editingPlan) {\n      postMigrationPlansAction(postPlansUrl, plansBody, planSchedule);\n    } else if (planHasBeenEdited(editingPlan, plansBody, planSchedule)) {\n      editMigrationPlansAction(editPlansUrl, editingPlan.id, plansBody, planSchedule);\n    }\n  }\n  renderResult = (migrationPlanMessage, migrationPlanFollowupMessage, migrationPlanIcon, showVmPowerWarning) => (\n    <div className=\"wizard-pf-complete blank-slate-pf\">\n      <div className=\"modal-wizard-results-grey-icon\">\n        <span className={migrationPlanIcon} />\n      </div>\n      <h3 className=\"blank-slate-pf-main-action\" id=\"migration-plan-results-message\">\n        {migrationPlanMessage}\n      </h3>\n      <p className=\"blank-slate-pf-secondary-action\">{migrationPlanFollowupMessage}</p>\n      {showVmPowerWarning && (\n        <div className=\"plan-wizard-vm-power-warning\">\n          <Icon type=\"pf\" name=\"warning-triangle-o\" />\n          <p>\n            {__('VMs must be powered on in order to migrate.')}\n            <br />\n            {__('Ensure that all VMs in the Migration Plan are powered on before starting migration.')}\n          </p>\n        </div>\n      )}\n    </div>\n  );\n\n  render() {\n    const {\n      isPostingPlans,\n      isRejectedPostingPlans,\n      isPuttingPlans,\n      isRejectedPuttingPlans,\n      migrationPlansResult,\n      migrationRequestsResult,\n      errorPostingPlans,\n      errorPuttingPlans,\n      plansBody,\n      planSchedule,\n      hidePlanWizardAction,\n      targetProvider\n    } = this.props;\n\n    if (isPostingPlans) {\n      return (\n        <WizardLoadingState\n          title={__('Creating Migration Plan...')}\n          message={__('Please wait while the migration plan is created.')}\n        />\n      );\n    } else if (isRejectedPostingPlans) {\n      const errorData = errorPostingPlans && errorPostingPlans.data;\n      const errorMessage = errorData && errorData.error && errorData.error.message;\n      return (\n        <WizardErrorState\n          title={__('Error Creating Migration Plan')}\n          message={errorMessage}\n          onClose={hidePlanWizardAction}\n        />\n      );\n    } else if (isPuttingPlans) {\n      return (\n        <WizardLoadingState\n          title={__('Saving Migration Plan...')}\n          message={__('Please wait while the migration plan is saved.')}\n        />\n      );\n    } else if (isRejectedPuttingPlans) {\n      const errorData = errorPuttingPlans && errorPuttingPlans.data;\n      const errorMessage = errorData && errorData.error && errorData.error.message;\n      return (\n        <WizardErrorState\n          title={__('Error Saving Migration Plan')}\n          message={errorMessage}\n          onClose={hidePlanWizardAction}\n        />\n      );\n    } else if (planSchedule === 'migration_plan_later' && migrationPlansResult) {\n      const migrationPlanSaved = sprintf(__(\" Migration Plan: '%s' has been saved\"), plansBody.name);\n      const migrationPlanFollowupMessage = __('Select Migrate on the Migration Plans page to begin migration');\n      const showVmPowerWarning = targetProvider === 'openstack';\n      return this.renderResult(\n        migrationPlanSaved,\n        migrationPlanFollowupMessage,\n        'pficon pficon-ok',\n        showVmPowerWarning\n      );\n    } else if (planSchedule === 'migration_plan_now' && migrationPlansResult && migrationRequestsResult) {\n      const migrationPlanProgress = sprintf(__(\" Migration Plan: '%s' is in progress\"), plansBody.name);\n      const migrationPlanFollowupMessage = __('This may take a long time. Progress of the plan will be shown in the Migration area'); // prettier-ignore\n      return this.renderResult(migrationPlanProgress, migrationPlanFollowupMessage, 'fa fa-clock-o');\n    }\n    return null;\n  }\n}\nPlanWizardResultsStep.propTypes = {\n  postPlansUrl: PropTypes.string,\n  editPlansUrl: PropTypes.string,\n  postMigrationPlansAction: PropTypes.func,\n  editMigrationPlansAction: PropTypes.func,\n  plansBody: PropTypes.object,\n  planSchedule: PropTypes.string,\n  isPostingPlans: PropTypes.bool,\n  isRejectedPostingPlans: PropTypes.bool,\n  errorPostingPlans: PropTypes.object,\n  isPuttingPlans: PropTypes.bool,\n  isRejectedPuttingPlans: PropTypes.bool,\n  errorPuttingPlans: PropTypes.object,\n  migrationPlansResult: PropTypes.object,\n  migrationRequestsResult: PropTypes.object,\n  hidePlanWizardAction: PropTypes.func,\n  editingPlan: PropTypes.object,\n  targetProvider: PropTypes.string\n};\nPlanWizardResultsStep.defaultProps = {\n  postPlansUrl: '/api/service_templates',\n  editPlansUrl: '/api/service_templates',\n  postMigrationPlansAction: noop,\n  editMigrationPlansAction: noop,\n  plansBody: {},\n  planSchedule: '',\n  isPostingPlans: true,\n  isRejectedPostingPlans: false,\n  errorPostingPlans: null,\n  migrationPlansResult: null,\n  migrationRequestsResult: null,\n  hidePlanWizardAction: noop\n};\nexport default PlanWizardResultsStep;\n","import Immutable from 'seamless-immutable';\n\nimport { V2V_VALIDATE_VMS, V2V_VM_STEP_RESET, QUERY_V2V_PLAN_VMS } from './PlanWizardVMStepConstants';\nimport { _formatConflictVms, _formatInvalidVms, _formatValidVms } from './helpers';\n\nexport const initialState = Immutable({\n  isValidatingVms: false,\n  numPendingValidationRequests: 0,\n  isRejectedValidatingVms: false,\n  validationServiceCalled: false,\n  errorValidatingVms: null,\n  valid_vms: [],\n  invalid_vms: [],\n  conflict_vms: [],\n  isQueryingVms: false,\n  isVmsQueryRejected: false,\n  vmsQueryError: null\n});\n\nexport default (state = initialState, action) => {\n  switch (action.type) {\n    case `${V2V_VALIDATE_VMS}_PENDING`:\n      return state\n        .set('isValidatingVms', true)\n        .set('isRejectedValidatingVms', false)\n        .set('numPendingValidationRequests', state.numPendingValidationRequests + 1);\n    case `${V2V_VALIDATE_VMS}_FULFILLED`: {\n      const { payload, meta } = action;\n      const numPendingRequests = state.numPendingValidationRequests - 1;\n      if (payload && payload.data) {\n        const newValidVms = _formatValidVms(payload.data.valid, meta) || [];\n        const newInvalidVms = _formatInvalidVms(payload.data.invalid, meta) || [];\n        const newConflictedVms = _formatConflictVms(payload.data.conflicted, meta) || [];\n        return state\n          .set('valid_vms', meta.combineRequests ? [...state.valid_vms, ...newValidVms] : newValidVms)\n          .set('invalid_vms', meta.combineRequests ? [...state.invalid_vms, ...newInvalidVms] : newInvalidVms)\n          .set('conflict_vms', meta.combineRequests ? [...state.conflict_vms, ...newConflictedVms] : newConflictedVms)\n          .set('validationServiceCalled', true)\n          .set('isRejectedValidatingVms', false)\n          .set('isValidatingVms', numPendingRequests > 0)\n          .set('numPendingValidationRequests', numPendingRequests);\n      }\n      return state\n        .set('valid_vms', [])\n        .set('invalid_vms', [])\n        .set('conflict_vms', [])\n        .set('isRejectedValidatingVms', false)\n        .set('isValidatingVms', numPendingRequests > 0)\n        .set('numPendingValidationRequests', numPendingRequests);\n    }\n    case `${V2V_VALIDATE_VMS}_REJECTED`: {\n      const numPendingRequests = state.numPendingValidationRequests - 1;\n      return state\n        .set('errorValidatingVms', action.payload)\n        .set('isRejectedValidatingVms', true)\n        .set('isValidatingVms', numPendingRequests > 0)\n        .set('numPendingValidationRequests', numPendingRequests)\n        .set('isCSVParseError', false);\n    }\n    case `${V2V_VALIDATE_VMS}_CSV_PARSE_ERROR`:\n      return state\n        .set('errorParsingCSV', action.payload)\n        .set('isRejectedValidatingVms', true)\n        .set('isCSVParseError', true)\n        .set('isValidatingVms', false);\n    case `${QUERY_V2V_PLAN_VMS}_PENDING`:\n      return state\n        .set('isQueryingVms', true)\n        .set('isVmsQueryRejected', false)\n        .set('vmsQueryError', null);\n    case `${QUERY_V2V_PLAN_VMS}_FULFILLED`: {\n      const { payload } = action;\n      if (payload && payload.data) {\n        return state\n          .set('isQueryingVms', false)\n          .set('isVmsQueryRejected', false)\n          .set('vmsQueryError', null);\n      }\n      return state\n        .set('isQueryingVms', false)\n        .set('isVmsQueryRejected', false)\n        .set('vmsQueryError', null);\n    }\n    case `${QUERY_V2V_PLAN_VMS}_REJECTED`:\n      return state\n        .set('isQueryingVms', false)\n        .set('isVmsQueryRejected', true)\n        .set('vmsQueryError', action.payload);\n    case V2V_VM_STEP_RESET:\n      return state\n        .set('validationServiceCalled', false)\n        .set('valid_vms', [])\n        .set('invalid_vms', [])\n        .set('conflict_vms', [])\n        .set('isRejectedValidatingVms', false)\n        .set('isValidatingVms', false);\n\n    default:\n      return state;\n  }\n};\n","import { reset } from 'redux-form';\nimport URI from 'urijs';\nimport API from '../../../../../../../../common/API';\nimport { V2V_VM_STEP_RESET, V2V_VALIDATE_VMS, QUERY_V2V_PLAN_VMS } from './PlanWizardVMStepConstants';\n\nexport { showConfirmModalAction, hideConfirmModalAction } from '../../../../OverviewActions';\n\nconst _validateVmsActionCreator = (url, vms, planId, meta) => dispatch => {\n  let postBody = {\n    action: 'validate_vms',\n    import: vms\n  };\n  if (planId) {\n    postBody = { ...postBody, service_template_id: planId };\n  }\n  return dispatch({\n    type: V2V_VALIDATE_VMS,\n    payload: new Promise((resolve, reject) => {\n      API.post(url, postBody)\n        .then(response => {\n          resolve(response);\n        })\n        .catch(e => {\n          reject(e);\n        });\n    }),\n    meta: {\n      ...meta,\n      csvRows: vms\n    }\n  });\n};\n\nexport const validateVmsAction = (url, id, vms, planId, meta = {}) => {\n  const uri = new URI(`${url}/${id}`);\n\n  return _validateVmsActionCreator(uri.toString(), vms, planId, meta);\n};\n\nexport const csvImportAction = () => dispatch => {\n  dispatch({\n    type: V2V_VM_STEP_RESET\n  });\n  dispatch(reset('planWizardVMStep'));\n};\n\nexport const csvParseErrorAction = errMsg => dispatch => {\n  dispatch({\n    type: `${V2V_VALIDATE_VMS}_CSV_PARSE_ERROR`,\n    payload: errMsg\n  });\n};\n\nconst _queryPreselectedVmsActionCreator = ids => dispatch => {\n  const resources = ids.map(id => ({\n    id\n  }));\n\n  return dispatch({\n    type: QUERY_V2V_PLAN_VMS,\n    payload: API.post(\n      '/api/vms?expand=resources&attributes=name,ems_cluster.name,ems_cluster.id,allocated_disk_storage,ext_management_system.name,v_parent_blue_folder_display_path',\n      {\n        action: 'query',\n        resources\n      }\n    )\n  });\n};\n\nexport const queryPreselectedVmsAction = ids => _queryPreselectedVmsActionCreator(ids);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport csv from 'csv';\nimport utf8 from 'utf8';\nimport { Button, EmptyState } from 'patternfly-react';\nimport Dropzone from 'react-dropzone';\nimport classNames from 'classnames';\n\nclass CSVDropzoneField extends React.Component {\n  onFileDrop = (acceptedFiles, rejectedFiles) => {\n    if (acceptedFiles && acceptedFiles.length > 0) {\n      this.handleUnparsedFile(acceptedFiles[0]);\n    } else {\n      // eslint-disable-next-line no-restricted-globals\n      alert(__('Invalid file extension. Only .csv files are accepted.'));\n    }\n  };\n\n  handleUnparsedFile = fileHandle => {\n    const { onCSVParseSuccess, onCSVParseFailure } = this.props;\n    if (fileHandle) {\n      const reader = new FileReader();\n      reader.onload = () => {\n        csv.parse(reader.result, (err, csvRows) => {\n          if (csvRows && csvRows.length > 0) {\n            csvRows = this.trimWhiteSpaces(csvRows);\n            const headerRow = this.mapCSVColumnNameToKey(csvRows[0]);\n            if (!headerRow.find(element => element === 'name')) {\n              onCSVParseFailure(__(\"Error: Required column 'Name' does not exist in the .CSV file\"));\n              return;\n            }\n            const rowObjects = csvRows.map(row =>\n              headerRow.reduce(\n                (rowObject, key, index) => ({\n                  ...rowObject,\n                  [key]: row[index]\n                }),\n                {}\n              )\n            );\n            onCSVParseSuccess(rowObjects);\n          } else {\n            onCSVParseFailure(err ? `${err}` : __('Error: Possibly a blank .CSV file'));\n          }\n        });\n      };\n      reader.readAsBinaryString(fileHandle);\n    }\n  };\n\n  trimWhiteSpaces = csvRows => csvRows.map(row => row.map(value => utf8.decode(value).trim()));\n\n  mapCSVColumnNameToKey = headerRow => {\n    headerRow[headerRow.findIndex(k => k === __('Name'))] = 'name';\n    headerRow[headerRow.findIndex(k => k === __('Host'))] = 'host';\n    headerRow[headerRow.findIndex(k => k === __('Provider'))] = 'provider';\n    headerRow[headerRow.findIndex(k => k === __('UID'))] = 'uid_ems';\n    headerRow[headerRow.findIndex(k => k === __('Security Group'))] = 'osp_security_group';\n    headerRow[headerRow.findIndex(k => k === __('Flavor'))] = 'osp_flavor';\n    return headerRow;\n  };\n\n  render() {\n    return (\n      <Dropzone accept=\".csv\" onDrop={this.onFileDrop} onClick={event => event.preventDefault()}>\n        {({ getRootProps, getInputProps, isDragActive, open }) => (\n          <div {...getRootProps()} className={classNames('csv-upload-dropzone', { active: isDragActive })}>\n            <input {...getInputProps()} />\n            <EmptyState>\n              <EmptyState.Icon type=\"pf\" name=\"import\" />\n              <EmptyState.Title>{__('Import File')}</EmptyState.Title>\n              <EmptyState.Info>{__('Import a file including a list of VMs to be migrated.')}</EmptyState.Info>\n              <EmptyState.Action>\n                <Button bsStyle=\"primary\" onClick={open}>\n                  {__('Import')}\n                </Button>\n              </EmptyState.Action>\n            </EmptyState>\n          </div>\n        )}\n      </Dropzone>\n    );\n  }\n}\n\nCSVDropzoneField.propTypes = {\n  onCSVParseSuccess: PropTypes.func,\n  onCSVParseFailure: PropTypes.func\n};\n\nexport default CSVDropzoneField;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { noop, Table } from 'patternfly-react';\n\nconst vmSelectionCellFormatter = ({ rowData, rowIndex }, onSelectRow, id, label) => {\n  const disabled = rowData.invalid || rowData.conflict;\n  const checkboxId = id || `select${rowIndex}`;\n  const checkboxLabel = label || sprintf(__('Select row %s'), rowIndex.toString());\n  return (\n    <Table.SelectionCell>\n      <Table.Checkbox\n        id={checkboxId}\n        label={checkboxLabel}\n        checked={rowData.selected && !disabled}\n        onChange={e => {\n          onSelectRow(e, rowData);\n        }}\n        disabled={disabled}\n      />\n    </Table.SelectionCell>\n  );\n};\nvmSelectionCellFormatter.propTypes = {\n  /** rowData for this row */\n  rowData: PropTypes.object,\n  /** rowIndex for this row */\n  rowIndex: PropTypes.number.isRequired,\n  /** row selected callback */\n  onSelectRow: PropTypes.func, // eslint-disable-line react/no-unused-prop-types\n  /** checkbox id override */\n  id: PropTypes.string, // eslint-disable-line react/no-unused-prop-types\n  /** checkbox label override */\n  label: PropTypes.string // eslint-disable-line react/no-unused-prop-types\n};\nvmSelectionCellFormatter.defaultProps = {\n  rowData: {},\n  onSelectRow: noop,\n  id: '',\n  label: ''\n};\nexport default vmSelectionCellFormatter;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { noop, Table } from 'patternfly-react';\n\n/**\n * Extends PatternFly React selection header cell formatter\n * b/c if the CSV input has conflicting/invalid rows, we should disable select all\n */\nconst vmSelectionHeaderCellFormatter = ({ cellProps, column, rows, onSelectAllRows }) => {\n  const disabledRows = rows.filter(r => r.invalid || r.conflict).length > 0;\n  const unselectedRows = rows.filter(r => !r.selected).length > 0;\n  const id = cellProps.id || 'selectAll';\n  return (\n    <Table.SelectionHeading aria-label={column.header.label} {...cellProps}>\n      <Table.Checkbox\n        id={id}\n        label={column.header.label}\n        checked={!unselectedRows && !disabledRows}\n        onChange={onSelectAllRows}\n        disabled={disabledRows}\n      />\n    </Table.SelectionHeading>\n  );\n};\nvmSelectionHeaderCellFormatter.propTypes = {\n  /** column header cell props */\n  cellProps: PropTypes.object,\n  /** column definition */\n  column: PropTypes.object,\n  /** current table rows */\n  rows: PropTypes.array,\n  /** on select all rows callback */\n  onSelectAllRows: PropTypes.func\n};\nvmSelectionHeaderCellFormatter.defaultProps = {\n  cellProps: {},\n  column: {},\n  rows: [],\n  onSelectAllRows: noop\n};\nexport default vmSelectionHeaderCellFormatter;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport orderBy from 'lodash.orderby';\nimport classNames from 'classnames';\nimport * as sort from 'sortabular';\nimport * as resolve from 'table-resolver';\nimport { compose } from 'recompose';\nimport {\n  paginate,\n  noop,\n  Button,\n  Icon,\n  Grid,\n  PaginationRow,\n  Table,\n  Toolbar,\n  Popover,\n  FormControl,\n  Filter,\n  OverlayTrigger,\n  PAGINATION_VIEW\n} from 'patternfly-react';\n\nimport rowFilter from '../../common/rowFilter';\nimport searchFilter from '../../common/searchFilter';\nimport CustomToolbarFind from '../../common/CustomToolbarFind';\nimport vmSelectionHeaderCellFormatter from './vmSelectionHeaderCellFormatter';\nimport vmSelectionCellFormatter from './vmSelectionCellFormatter';\n\nclass PlanWizardVMStepTable extends React.Component {\n  static deselectRow(row) {\n    return Object.assign({}, row, { selected: false });\n  }\n  static selectRow(row) {\n    return Object.assign({}, row, { selected: true });\n  }\n  constructor(props) {\n    super(props);\n\n    const { input, rows, initialSelectedRows } = this.props;\n\n    if (initialSelectedRows.length) {\n      input.onChange(initialSelectedRows);\n    }\n\n    const getSortingColumns = () => this.state.sortingColumns || {};\n\n    const sortableTransform = sort.sort({\n      getSortingColumns,\n      onSort: selectedColumn => {\n        this.setState({\n          sortingColumns: sort.byColumn({\n            sortingColumns: this.state.sortingColumns,\n            sortingOrder: Table.defaultSortingOrder,\n            selectedColumn\n          })\n        });\n      },\n      // Use property or index dependening on the sortingColumns structure specified\n      strategy: sort.strategies.byProperty\n    });\n\n    const sortingFormatter = sort.header({\n      sortableTransform,\n      getSortingColumns,\n      strategy: sort.strategies.byProperty\n    });\n\n    // enables our custom header formatters extensions to reactabular\n    this.customHeaderFormatters = Table.customHeaderFormattersDefinition;\n\n    const filterTypes = [\n      {\n        id: 'name',\n        title: __('VM Name'),\n        placeholder: __('Filter by VM Name'),\n        filterType: 'text'\n      },\n      {\n        id: 'datacenter',\n        title: __('Datacenter'),\n        placeholder: __('Filter by Datacenter'),\n        filterType: 'text'\n      },\n      {\n        id: 'cluster',\n        title: __('Cluster'),\n        placeholder: __('Filter by Cluster'),\n        filterType: 'text'\n      },\n      {\n        id: 'folder',\n        title: __('Folder'),\n        placeholder: __('Filter by Folder'),\n        filterType: 'text'\n      }\n    ];\n\n    this.state = {\n      // Toolbar Filter state\n      filterTypes,\n      currentFilterType: filterTypes[0],\n      currentValue: '',\n      activeFilters: [],\n      searchFilterValue: '',\n\n      // Sort the first column in an ascending way by default.\n      sortingColumns: {\n        name: {\n          direction: Table.TABLE_SORT_DIRECTION.ASC,\n          position: 0\n        }\n      },\n\n      // column definitions\n      columns: [\n        {\n          property: 'select',\n          header: {\n            label: __('Select'),\n            props: {\n              index: 0,\n              rowSpan: 1,\n              colSpan: 1,\n              id: 'select'\n            },\n            customFormatters: [vmSelectionHeaderCellFormatter]\n          },\n          cell: {\n            props: {\n              index: 0\n            },\n            formatters: [\n              (value, { rowData, rowIndex }) =>\n                vmSelectionCellFormatter(\n                  { rowData, rowIndex },\n                  this.onSelectRow,\n                  `select${rowIndex}`,\n                  `select ${rowIndex}`\n                )\n            ]\n          }\n        },\n        {\n          property: 'reason',\n          header: {\n            label: '',\n            props: {\n              index: 1,\n              rowSpan: 1,\n              colSpan: 1\n            },\n            transforms: [sortableTransform],\n            customFormatters: [Table.sortableHeaderCellFormatter]\n          },\n          cell: {\n            props: {\n              index: 1\n            },\n            formatters: [\n              (value, { rowData }) => (\n                <span>\n                  <OverlayTrigger\n                    overlay={<Popover id=\"Popover\">{value}</Popover>}\n                    placement=\"right\"\n                    trigger={['click']}\n                    rootClose\n                  >\n                    <Button bsStyle=\"link\">\n                      <Icon\n                        type=\"pf\"\n                        name={rowData.valid ? 'ok' : rowData.warning ? 'warning-triangle-o' : 'error-circle-o'}\n                      />\n                    </Button>\n                  </OverlayTrigger>\n                </span>\n              ),\n              Table.tableCellFormatter\n            ]\n          }\n        },\n        // VM Name, Datacenter, Cluster, Folder\n        {\n          property: 'name',\n          header: {\n            label: __('VM Name'),\n            props: {\n              index: 2,\n              rowSpan: 1,\n              colSpan: 1\n            },\n            transforms: [sortableTransform],\n            formatters: [sortingFormatter],\n            customFormatters: [Table.sortableHeaderCellFormatter]\n          },\n          cell: {\n            props: {\n              index: 2\n            },\n            formatters: [Table.tableCellFormatter]\n          }\n        },\n        {\n          property: 'datacenter',\n          header: {\n            label: __('Datacenter'),\n            props: {\n              index: 3,\n              rowSpan: 1,\n              colSpan: 1\n            },\n            transforms: [sortableTransform],\n            formatters: [sortingFormatter],\n            customFormatters: [Table.sortableHeaderCellFormatter]\n          },\n          cell: {\n            props: {\n              index: 3\n            },\n            formatters: [Table.tableCellFormatter]\n          }\n        },\n        {\n          property: 'cluster',\n          header: {\n            label: __('Cluster'),\n            props: {\n              index: 4,\n              rowSpan: 1,\n              colSpan: 1\n            },\n            transforms: [sortableTransform],\n            formatters: [sortingFormatter],\n            customFormatters: [Table.sortableHeaderCellFormatter]\n          },\n          cell: {\n            props: {\n              index: 4\n            },\n            formatters: [Table.tableCellFormatter]\n          }\n        },\n        {\n          property: 'folder',\n          header: {\n            label: __('Folder'),\n            props: {\n              index: 5,\n              rowSpan: 1,\n              colSpan: 1\n            },\n            transforms: [sortableTransform],\n            formatters: [sortingFormatter],\n            customFormatters: [Table.sortableHeaderCellFormatter]\n          },\n          cell: {\n            props: {\n              index: 5\n            },\n            formatters: [Table.tableCellFormatter]\n          }\n        }\n      ],\n\n      // rows and row selection state\n      rows,\n      selectedRows: initialSelectedRows,\n\n      // pagination default states\n      pagination: {\n        page: 1,\n        perPage: 10,\n        perPageOptions: [5, 10, 15]\n      },\n\n      // page input value\n      pageChangeValue: 1\n    };\n  }\n  onFirstPage = () => {\n    this.setPage(1);\n  };\n  onLastPage = () => {\n    const { page } = this.state.pagination;\n    const totalPages = this.totalPages();\n    if (page < totalPages) {\n      this.setPage(totalPages);\n    }\n  };\n  onNextPage = () => {\n    const { page } = this.state.pagination;\n    if (page < this.totalPages()) {\n      this.setPage(this.state.pagination.page + 1);\n    }\n  };\n  onPageInput = e => {\n    this.setState({ pageChangeValue: e.target.value });\n  };\n  onPerPageSelect = (eventKey, e) => {\n    const newPaginationState = Object.assign({}, this.state.pagination);\n    newPaginationState.perPage = eventKey;\n    newPaginationState.page = 1;\n    this.setState({ pagination: newPaginationState });\n  };\n  onPreviousPage = () => {\n    if (this.state.pagination.page > 1) {\n      this.setPage(this.state.pagination.page - 1);\n    }\n  };\n  onRow = (row, { rowIndex }) => {\n    const { selectedRows } = this.state;\n    const selected = selectedRows.indexOf(row.id) > -1;\n    return {\n      className: classNames({\n        selected,\n        warning: row.conflict,\n        danger: row.invalid\n      }),\n      role: 'row'\n    };\n  };\n  onSelectAllRows = event => {\n    const { input } = this.props;\n    const { rows, selectedRows } = this.state;\n    const { checked } = event.target;\n\n    const filteredRows = this.filteredSearchedRows();\n    const currentRows = this.currentRows(filteredRows).rows;\n\n    if (checked) {\n      const selectableRows = currentRows.filter(r => !r.invalid && !r.conflict);\n      const updatedSelections = [...new Set([...selectableRows.map(r => r.id), ...selectedRows])];\n      const updatedRows = rows.map(\n        r => (updatedSelections.indexOf(r.id) > -1 ? PlanWizardVMStepTable.selectRow(r) : r)\n      );\n\n      input.onChange(updatedSelections);\n\n      this.setState({\n        // important: you must update rows to force a re-render and trigger onRow hook\n        rows: updatedRows,\n        selectedRows: updatedSelections\n      });\n    } else {\n      const ids = currentRows.map(r => r.id);\n      const updatedSelections = selectedRows.filter(r => !(ids.indexOf(r) > -1));\n      const updatedRows = rows.map(\n        r => (updatedSelections.indexOf(r.id) > -1 ? r : PlanWizardVMStepTable.deselectRow(r))\n      );\n\n      input.onChange(updatedSelections);\n\n      this.setState({\n        rows: updatedRows,\n        selectedRows: updatedSelections\n      });\n    }\n  };\n  onSelectRow = (event, row) => {\n    const { input } = this.props;\n    const { rows, selectedRows } = this.state;\n    const selectedRowIndex = rows.findIndex(r => r.id === row.id);\n    if (selectedRowIndex > -1) {\n      let updatedSelectedRows;\n      let updatedRow;\n      if (row.selected) {\n        updatedSelectedRows = selectedRows.filter(r => !(r === row.id));\n        updatedRow = PlanWizardVMStepTable.deselectRow(row);\n      } else {\n        updatedSelectedRows = [...selectedRows, row.id];\n        updatedRow = PlanWizardVMStepTable.selectRow(row);\n      }\n      rows[selectedRowIndex] = updatedRow;\n\n      input.onChange(updatedSelectedRows);\n\n      this.setState({\n        rows,\n        selectedRows: updatedSelectedRows\n      });\n    }\n  };\n  onSubmit = () => {\n    this.setPage(this.state.pageChangeValue);\n  };\n  onValueKeyPress = keyEvent => {\n    const { currentValue, currentFilterType } = this.state;\n\n    if (keyEvent.key === 'Enter' && currentValue && currentValue.length > 0) {\n      this.setState({ currentValue: '' });\n      this.filterAdded(currentFilterType, currentValue);\n      keyEvent.stopPropagation();\n      keyEvent.preventDefault();\n    }\n  };\n  onFindAction = value => {\n    // clear filters and set search text (search and filter are independent for now)\n    this.setState({ activeFilters: [], searchFilterValue: value });\n  };\n  onFindExit = () => {\n    this.setState({ searchFilterValue: '' });\n  };\n  setPage = value => {\n    const page = Number(value);\n    if (!Number.isNaN(value) && value !== '' && page > 0 && page <= this.totalPages()) {\n      const newPaginationState = Object.assign({}, this.state.pagination);\n      newPaginationState.page = page;\n      this.setState({ pagination: newPaginationState, pageChangeValue: page });\n    }\n  };\n  currentRows = filteredRows => {\n    const { sortingColumns, columns, pagination } = this.state;\n\n    return compose(\n      paginate(pagination),\n      sort.sorter({\n        columns,\n        sortingColumns,\n        sort: orderBy,\n        strategy: sort.strategies.byProperty\n      })\n    )(filteredRows);\n  };\n\n  totalPages = () => {\n    const { rows } = this.state;\n    const { perPage } = this.state.pagination;\n    return Math.ceil(rows.length / perPage);\n  };\n\n  selectFilterType = filterType => {\n    const { currentFilterType } = this.state;\n    if (currentFilterType !== filterType) {\n      this.setState({ currentValue: '', currentFilterType: filterType });\n    }\n  };\n\n  filterAdded = (field, value) => {\n    let filterText = field.title;\n    filterText += ': ';\n    filterText += value;\n\n    const activeFilters = [...this.state.activeFilters, { label: filterText, field, value }];\n\n    this.setState({ activeFilters });\n  };\n\n  updateCurrentValue = event => {\n    this.setState({ currentValue: event.target.value });\n  };\n\n  removeFilter = filter => {\n    const { activeFilters } = this.state;\n\n    const index = activeFilters.indexOf(filter);\n    if (index > -1) {\n      const updated = [...activeFilters.slice(0, index), ...activeFilters.slice(index + 1)];\n      this.setState({ activeFilters: updated });\n    }\n  };\n  clearFilters = () => {\n    this.setState({ activeFilters: [] });\n  };\n  filteredSearchedRows = () => {\n    const { activeFilters, searchFilterValue, rows } = this.state;\n    if (activeFilters && activeFilters.length) {\n      return rowFilter(activeFilters, rows);\n    } else if (searchFilterValue) {\n      return searchFilter(searchFilterValue, rows);\n    }\n    return rows;\n  };\n\n  render() {\n    const {\n      columns,\n      pagination,\n      sortingColumns,\n      pageChangeValue,\n      activeFilters,\n      filterTypes,\n      currentFilterType,\n      currentValue\n    } = this.state;\n\n    const {\n      discoveryMode,\n      onCsvImportAction,\n      input: { value },\n      meta: { pristine, error }\n    } = this.props;\n\n    const filteredRows = this.filteredSearchedRows();\n    const sortedPaginatedRows = this.currentRows(filteredRows);\n\n    return (\n      <Grid fluid>\n        <h2>{__('Select VMs to be Migrated')}</h2>\n        <Toolbar>\n          <Filter>\n            <Filter.TypeSelector\n              filterTypes={filterTypes}\n              currentFilterType={currentFilterType}\n              onFilterTypeSelected={this.selectFilterType}\n              id=\"vms_step\"\n            />\n            <FormControl\n              type={currentFilterType.filterType}\n              value={currentValue}\n              placeholder={currentFilterType.placeholder}\n              onChange={e => this.updateCurrentValue(e)}\n              onKeyPress={e => this.onValueKeyPress(e)}\n              className=\"large-filter-input\"\n            />\n          </Filter>\n          {!discoveryMode && (\n            <div className=\"form-group\">\n              <Button onClick={onCsvImportAction}>\n                <Icon type=\"pf\" name=\"import\" /> Import CSV\n              </Button>\n            </div>\n          )}\n          <Toolbar.RightContent>\n            <CustomToolbarFind\n              placeholder={__('Find By Keyword...')}\n              onChange={this.onFindAction}\n              onEnter={this.onFindAction}\n              onExit={this.onFindExit}\n            />\n          </Toolbar.RightContent>\n          {activeFilters &&\n            activeFilters.length > 0 && (\n              <Toolbar.Results>\n                <h5>\n                  {filteredRows.length} {filteredRows.length === 1 ? __('Result') : __('Results')}\n                </h5>\n                <Filter.ActiveLabel>{__('Active Filters')}:</Filter.ActiveLabel>\n                <Filter.List>\n                  {activeFilters.map((item, index) => (\n                    <Filter.Item key={index} onRemove={this.removeFilter} filterData={item}>\n                      {item.label}\n                    </Filter.Item>\n                  ))}\n                </Filter.List>\n                <a\n                  href=\"#\"\n                  onClick={e => {\n                    e.preventDefault();\n                    this.clearFilters();\n                  }}\n                >\n                  {__('Clear All Filters')}\n                </a>\n              </Toolbar.Results>\n            )}\n        </Toolbar>\n        <br />\n        <Table.PfProvider\n          striped\n          bordered\n          hover\n          dataTable\n          columns={columns}\n          components={{\n            header: {\n              cell: cellProps =>\n                this.customHeaderFormatters({\n                  cellProps,\n                  columns,\n                  sortingColumns,\n                  rows: sortedPaginatedRows.rows,\n                  onSelectAllRows: this.onSelectAllRows\n                })\n            }\n          }}\n        >\n          <Table.Header headerRows={resolve.headerRows({ columns })} />\n          <Table.Body rows={sortedPaginatedRows.rows || []} rowKey=\"id\" onRow={this.onRow} />\n        </Table.PfProvider>\n        <PaginationRow\n          viewType={PAGINATION_VIEW.TABLE}\n          pagination={pagination}\n          pageInputValue={pageChangeValue}\n          amountOfPages={sortedPaginatedRows.amountOfPages}\n          itemCount={sortedPaginatedRows.itemCount}\n          itemsStart={sortedPaginatedRows.itemsStart}\n          itemsEnd={sortedPaginatedRows.itemsEnd}\n          onPerPageSelect={this.onPerPageSelect}\n          onFirstPage={this.onFirstPage}\n          onPreviousPage={this.onPreviousPage}\n          onPageInput={this.onPageInput}\n          onNextPage={this.onNextPage}\n          onLastPage={this.onLastPage}\n          onSubmit={this.onSubmit}\n        />\n        <br />\n        {!error && value && sprintf(__('%s VMs selected.'), value.length)}\n        {pristine && error}\n      </Grid>\n    );\n  }\n}\nPlanWizardVMStepTable.propTypes = {\n  rows: PropTypes.array,\n  onCsvImportAction: PropTypes.func,\n  discoveryMode: PropTypes.bool,\n  initialSelectedRows: PropTypes.array,\n  input: PropTypes.shape({\n    value: PropTypes.arrayOf(PropTypes.string),\n    onChange: PropTypes.func\n  }),\n  meta: PropTypes.shape({\n    pristine: PropTypes.bool,\n    error: PropTypes.string\n  })\n};\nPlanWizardVMStepTable.defaultProps = {\n  rows: [],\n  onCsvImportAction: noop,\n  discoveryMode: false,\n  initialSelectedRows: []\n};\nexport default PlanWizardVMStepTable;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Immutable from 'seamless-immutable';\nimport { Field, reduxForm } from 'redux-form';\nimport { length } from 'redux-form-validators';\nimport { Button } from 'patternfly-react';\nimport PlanWizardVMStepTable from './components/PlanWizardVMStepTable';\nimport CSVDropzoneField from './components/CSVDropzoneField';\nimport { getVmIds } from './helpers';\nimport { overwriteCsvConfirmModalProps } from '../../PlanWizardConstants';\n\nexport class PlanWizardVMStep extends React.Component {\n  componentDidMount() {\n    const { vm_choice_radio, editingPlan, shouldPrefillForEditing, queryPreselectedVmsAction, pristine } = this.props;\n    if (pristine && vm_choice_radio === 'vms_via_discovery') {\n      this.validateVms([], null, { combineRequests: !!shouldPrefillForEditing });\n      if (shouldPrefillForEditing) {\n        const vmIds = getVmIds(editingPlan);\n        queryPreselectedVmsAction(vmIds).then(({ value: { data: { results } } }) => {\n          const vmNames = results.map(result => ({ name: result.name }));\n          this.validateVms(vmNames, editingPlan.id, { combineRequests: true });\n        });\n      }\n    }\n  }\n  componentDidUpdate(prevProps) {\n    const { vm_choice_radio } = this.props;\n    if (vm_choice_radio !== prevProps.vm_choice_radio && vm_choice_radio === 'vms_via_discovery') {\n      this.validateVms();\n    }\n  }\n  onCSVParseSuccess = parsedRows => {\n    const {\n      infrastructure_mapping_id,\n      validateVmsUrl,\n      validateVmsAction,\n      editingPlan,\n      shouldPrefillForEditing\n    } = this.props;\n    // skip the header row\n    parsedRows.shift();\n    validateVmsAction(validateVmsUrl, infrastructure_mapping_id, parsedRows, shouldPrefillForEditing && editingPlan.id);\n  };\n  onCSVParseFailure = errMsg => {\n    const { csvParseErrorAction } = this.props;\n    csvParseErrorAction(errMsg);\n  };\n  validateVms = (vms = [], planId = null, meta = {}) => {\n    const { infrastructure_mapping_id, validateVmsUrl, validateVmsAction } = this.props;\n    validateVmsAction(validateVmsUrl, infrastructure_mapping_id, vms, planId, meta);\n  };\n  showOverwriteCsvConfirmModal = () => {\n    const { csvImportAction, showConfirmModalAction, hideConfirmModalAction } = this.props;\n    showConfirmModalAction({\n      ...overwriteCsvConfirmModalProps,\n      onConfirm: () => {\n        hideConfirmModalAction();\n        csvImportAction();\n      }\n    });\n  };\n  render() {\n    const {\n      vm_choice_radio,\n      isValidatingVms,\n      isRejectedValidatingVms,\n      isCSVParseError,\n      errorParsingCSV,\n      valid_vms,\n      invalid_vms,\n      conflict_vms,\n      validationServiceCalled,\n      csvImportAction,\n      shouldPrefillForEditing,\n      editingPlan,\n      isQueryingVms,\n      formSelectedVms,\n      pristine\n    } = this.props;\n    const discoveryMode = vm_choice_radio === 'vms_via_discovery';\n    const preselectedVmIds = shouldPrefillForEditing ? getVmIds(editingPlan) : [];\n\n    if (isRejectedValidatingVms && !isCSVParseError) {\n      return (\n        <div className=\"wizard-pf-complete blank-slate-pf\">\n          <div className=\"wizard-pf-success-icon\">\n            <span className=\"pficon pficon-error-circle-o\" />\n          </div>\n          <h3 className=\"blank-slate-pf-main-action\">{__('Error Validating VMs')}</h3>\n          <p className=\"blank-slate-pf-secondary-action\">\n            {__('Sorry, there was an error validating VMs. Please try again.')}\n          </p>\n        </div>\n      );\n    } else if (isRejectedValidatingVms && isCSVParseError) {\n      return (\n        <div className=\"wizard-pf-complete blank-slate-pf\">\n          <div className=\"wizard-pf-success-icon\">\n            <span className=\"pficon pficon-error-circle-o\" />\n          </div>\n          <h3 className=\"blank-slate-pf-main-action\">{__('The selected file does not have the expected format.')}</h3>\n          <h3 className=\"blank-slate-pf-main-action\">{errorParsingCSV}</h3>\n          <p className=\"blank-slate-pf-secondary-action\">\n            {__('See product documentation for the correct format of the .csv file')}\n          </p>\n          <div className=\"form-group\">\n            <Button bsStyle=\"primary\" onClick={csvImportAction}>\n              {__('Import')}\n            </Button>\n          </div>\n        </div>\n      );\n    } else if ((isValidatingVms || !validationServiceCalled) && discoveryMode) {\n      return (\n        <div className=\"blank-slate-pf\">\n          <div className=\"spinner spinner-lg blank-slate-pf-icon\" />\n          <h3 className=\"blank-slate-pf-main-action\">{__('Discovering VMs')}</h3>\n          <p className=\"blank-slate-pf-secondary-action\">\n            {__('Discovering VMs associated with the Infrastructure Mapping selected.')}\n          </p>\n        </div>\n      );\n    } else if (isValidatingVms && !discoveryMode) {\n      return (\n        <div className=\"blank-slate-pf\">\n          <div className=\"spinner spinner-lg blank-slate-pf-icon\" />\n          <h3 className=\"blank-slate-pf-main-action\">{__('Validating CSV Import')}</h3>\n          <p className=\"blank-slate-pf-secondary-action\">\n            {__('Validating CSV VMs are associated with the Infrastructure Mapping selected.')}\n          </p>\n        </div>\n      );\n    } else if (!discoveryMode && (valid_vms.length === 0 && invalid_vms.length === 0 && conflict_vms.length === 0)) {\n      return <CSVDropzoneField onCSVParseSuccess={this.onCSVParseSuccess} onCSVParseFailure={this.onCSVParseFailure} />;\n    } else if (!isValidatingVms && validationServiceCalled && !(shouldPrefillForEditing && isQueryingVms)) {\n      // set make rows editable so they can be selected\n      const validVms = Immutable.asMutable(valid_vms, { deep: true });\n      const inValidsVms = Immutable.asMutable(invalid_vms, { deep: true }).concat(\n        validVms.filter(vm => vm.valid === false)\n      );\n      const conflictVms = Immutable.asMutable(conflict_vms, { deep: true });\n      const combined = [...inValidsVms, ...conflictVms, ...validVms];\n      if (combined.length) {\n        let initialSelectedRows = formSelectedVms || [];\n        if (pristine) {\n          initialSelectedRows = discoveryMode\n            ? preselectedVmIds\n            : validVms.filter(vm => vm.valid === true).map(vm => vm.id);\n        }\n        const rowsWithSelections = combined.map(vm => ({\n          ...vm,\n          selected: initialSelectedRows.some(id => vm.id === id)\n        }));\n        return (\n          <React.Fragment>\n            <Field\n              name=\"selectedVms\"\n              component={PlanWizardVMStepTable}\n              rows={rowsWithSelections}\n              initialSelectedRows={initialSelectedRows}\n              onCsvImportAction={this.showOverwriteCsvConfirmModal}\n              discoveryMode={discoveryMode}\n              validate={[\n                length({\n                  min: 1,\n                  msg: __('At least one VM needs to be selected to create the Migration Plan.')\n                })\n              ]}\n            />\n          </React.Fragment>\n        );\n      }\n      // no vms found - show a warning\n      return (\n        <div className=\"wizard-pf-complete blank-slate-pf\">\n          <div className=\"wizard-pf-success-icon\">\n            <span className=\"pficon pficon-warning-triangle-o\" />\n          </div>\n          <h3 className=\"blank-slate-pf-main-action\">{__('No VMs were found.')}</h3>\n          <p className=\"blank-slate-pf-secondary-action\">\n            {__('Sorry, no VMs were associated with this Infrastructure Mapping. Please try again.')}\n          </p>\n        </div>\n      );\n    }\n    return null;\n  }\n}\n\nPlanWizardVMStep.propTypes = {\n  vm_choice_radio: PropTypes.oneOf(['vms_via_csv', 'vms_via_discovery']),\n  infrastructure_mapping_id: PropTypes.string.isRequired,\n  validateVmsUrl: PropTypes.string,\n  validateVmsAction: PropTypes.func.isRequired,\n  csvImportAction: PropTypes.func.isRequired,\n  showConfirmModalAction: PropTypes.func.isRequired,\n  hideConfirmModalAction: PropTypes.func.isRequired,\n  csvParseErrorAction: PropTypes.func.isRequired,\n  isValidatingVms: PropTypes.bool,\n  isRejectedValidatingVms: PropTypes.bool,\n  isCSVParseError: PropTypes.bool,\n  errorParsingCSV: PropTypes.string,\n  validationServiceCalled: PropTypes.bool,\n  errorValidatingVms: PropTypes.string, // eslint-disable-line react/no-unused-prop-types\n  valid_vms: PropTypes.array,\n  invalid_vms: PropTypes.array,\n  conflict_vms: PropTypes.array,\n  editingPlan: PropTypes.object,\n  shouldPrefillForEditing: PropTypes.bool,\n  queryPreselectedVmsAction: PropTypes.func,\n  isQueryingVms: PropTypes.bool,\n  formSelectedVms: PropTypes.array,\n  pristine: PropTypes.bool\n};\n\nPlanWizardVMStep.defaultProps = {\n  vm_choice_radio: null,\n  validateVmsUrl: '/api/transformation_mappings',\n  isValidatingVms: false,\n  isRejectedValidatingVms: false,\n  isCSVParseError: false,\n  errorParsingCSV: '',\n  validationServiceCalled: false,\n  errorValidatingVms: null,\n  valid_vms: [],\n  invalid_vms: [],\n  conflict_vms: []\n};\n\nexport default reduxForm({\n  form: 'planWizardVMStep',\n  initialValues: { selectedVms: [] },\n  destroyOnUnmount: false\n})(PlanWizardVMStep);\n","import Immutable from 'seamless-immutable';\n\nimport { POST_V2V_TRANSFORM_MAPPINGS, UPDATE_V2V_TRANSFORMATION_MAPPING } from './MappingWizardResultsStepConstants';\n\nconst initialState = Immutable({\n  isUpdatingMapping: false,\n  isPostingMappings: false,\n  isRejectedUpdatingMapping: false,\n  isRejectedPostingMappings: false,\n  errorUpdatingMapping: null,\n  errorPostingMappings: null,\n  transformationMappingsResult: {}\n});\n\nexport default (state = initialState, action) => {\n  switch (action.type) {\n    case `${POST_V2V_TRANSFORM_MAPPINGS}_PENDING`:\n      return state.set('isPostingMappings', true);\n    case `${POST_V2V_TRANSFORM_MAPPINGS}_FULFILLED`:\n      return state\n        .set(\n          'transformationMappingsResult',\n          action.payload.data && action.payload.data.results && action.payload.data.results[0]\n        )\n        .set('isRejectedPostingMappings', false)\n        .set('isPostingMappings', false);\n    case `${POST_V2V_TRANSFORM_MAPPINGS}_REJECTED`:\n      return state\n        .set('errorPostingMappings', action.payload)\n        .set('isRejectedPostingMappings', true)\n        .set('isPostingMappings', false);\n\n    case `${UPDATE_V2V_TRANSFORMATION_MAPPING}_PENDING`:\n      return state.set('isUpdatingMapping', true).set('isRejectedUpdatingMapping', false);\n    case `${UPDATE_V2V_TRANSFORMATION_MAPPING}_FULFILLED`:\n      return state\n        .set('transformationMappingsResult', action.payload.data)\n        .set('isUpdatingMapping', false)\n        .set('errorUpdatingMapping', null);\n    case `${UPDATE_V2V_TRANSFORMATION_MAPPING}_REJECTED`:\n      return state\n        .set('errorUpdatingMapping', action.payload)\n        .set('isRejectedUpdatingMapping', true)\n        .set('isUpdatingMapping', false);\n\n    default:\n      return state;\n  }\n};\n","import URI from 'urijs';\n\nimport API from '../../../../../../../../common/API';\nimport { POST_V2V_TRANSFORM_MAPPINGS, UPDATE_V2V_TRANSFORMATION_MAPPING } from './MappingWizardResultsStepConstants';\nimport { CONTINUE_TO_PLAN } from '../../../../../Overview/OverviewConstants';\nimport { V2V_MAPPING_WIZARD_EXITED } from '../../MappingWizardConstants';\n\nexport { fetchTransformationMappingsAction } from '../../../../../Mappings/MappingsActions';\n\nexport const continueToPlanAction = id => dispatch => {\n  dispatch({\n    type: CONTINUE_TO_PLAN,\n    payload: { id }\n  });\n  dispatch({\n    type: V2V_MAPPING_WIZARD_EXITED\n  });\n};\n\n// ****************************************************************************\n// POST_V2V_TRANSFORM_MAPPINGS\n// ****************************************************************************\nconst _postTransformMappingsActionCreator = (url, transformMappings) => dispatch =>\n  dispatch({\n    type: POST_V2V_TRANSFORM_MAPPINGS,\n    payload: new Promise((resolve, reject) => {\n      API.post(url, transformMappings)\n        .then(response => {\n          resolve(response);\n        })\n        .catch(e => {\n          reject(e);\n        });\n    })\n  });\n\nexport const postTransformMappingsAction = (url, transformMappings) =>\n  _postTransformMappingsActionCreator(url, transformMappings);\n\n// ****************************************************************************\n// UPDATE_V2V_TRANSFORMATION_MAPPING\n// ****************************************************************************\nconst _updateTransformationMappingActionCreator = (url, transformationMappingBody) => dispatch =>\n  dispatch({\n    type: UPDATE_V2V_TRANSFORMATION_MAPPING,\n    payload: new Promise((resolve, reject) => {\n      const postBody = {\n        action: 'edit',\n        name: transformationMappingBody.name,\n        description: transformationMappingBody.description,\n        transformation_mapping_items: transformationMappingBody.transformation_mapping_items\n      };\n      API.post(url, postBody)\n        .then(response => resolve(response))\n        .catch(e => reject(e));\n    })\n  });\n\nexport const updateTransformationMappingAction = (url, id, transformationMappingBody) => {\n  const uri = new URI(`${url}/${id}`);\n  return _updateTransformationMappingActionCreator(uri.toString(), transformationMappingBody);\n};\n","import { SOURCE_HREF_SLUGS, DESTINATION_HREF_SLUGS } from './MappingWizardResultsStepConstants';\n\nconst normalizeTransformationItem = (transformationItem, targetProvider) => ({\n  source: `${SOURCE_HREF_SLUGS[transformationItem.source_type]}${transformationItem.source_id}`,\n  destination: `${DESTINATION_HREF_SLUGS[targetProvider][transformationItem.destination_type]}${\n    transformationItem.destination_id\n  }`\n});\n\nexport const transformationHasBeenEdited = (transformation, postBody, targetProvider) => {\n  const originalTransformationItems = JSON.stringify(\n    transformation.transformation_mapping_items.map(item => normalizeTransformationItem(item, targetProvider))\n  );\n  const currentTransformationItems = JSON.stringify(postBody.transformation_mapping_items);\n\n  return (\n    transformation.name !== postBody.name ||\n    transformation.description !== postBody.description ||\n    originalTransformationItems !== currentTransformationItems\n  );\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { noop } from 'patternfly-react';\n\nimport { transformationHasBeenEdited } from './helpers';\nimport { FETCH_TRANSFORMATION_MAPPINGS_URL } from '../../../../../Mappings/MappingsConstants';\nimport WizardLoadingState from '../../../../../common/WizardLoadingState';\nimport WizardErrorState from '../../../../../common/WizardErrorState';\n\nclass MappingWizardResultsStep extends React.Component {\n  componentDidMount() {\n    const {\n      postMappingsUrl,\n      postTransformMappingsAction,\n      transformationsBody,\n      editingMapping,\n      updateTransformationMappingAction,\n      targetProvider,\n      fetchTransformationMappingsAction,\n      fetchTransformationMappingsUrl\n    } = this.props;\n\n    if (editingMapping) {\n      if (transformationHasBeenEdited(editingMapping, transformationsBody, targetProvider)) {\n        updateTransformationMappingAction(postMappingsUrl, editingMapping.id, transformationsBody).then(() => {\n          fetchTransformationMappingsAction(fetchTransformationMappingsUrl);\n        });\n      }\n    } else {\n      postTransformMappingsAction(postMappingsUrl, transformationsBody).then(() => {\n        fetchTransformationMappingsAction(fetchTransformationMappingsUrl);\n      });\n    }\n  }\n\n  onContinueToPlanWizard = id => {\n    this.props.continueToPlanAction(id);\n    this.props.redirectTo('/plans');\n  };\n\n  render() {\n    const {\n      isPostingMappings,\n      isRejectedPostingMappings,\n      isUpdatingMapping,\n      transformationMappingsResult,\n      errorPostingMappings, // eslint-disable-line no-unused-vars\n      transformationsBody\n    } = this.props;\n\n    if (isPostingMappings) {\n      return (\n        <WizardLoadingState\n          title={__('Creating Infrastructure Mapping...')}\n          message={__('Please wait while the infrastructure mapping is created.')}\n        />\n      );\n    } else if (isRejectedPostingMappings) {\n      return (\n        <WizardErrorState\n          title={__('Error Creating Infrastructure Mapping')}\n          message={__(\"We're sorry, something went wrong. Please try again.\")}\n        />\n      );\n    } else if (isUpdatingMapping) {\n      return (\n        <WizardLoadingState\n          title={__('Saving Infrastructure Mapping...')}\n          message={__('Please wait while the infrastructure mapping is saved.')}\n        />\n      );\n    } else if (transformationMappingsResult) {\n      return (\n        <div className=\"wizard-pf-complete blank-slate-pf\">\n          <div className=\"wizard-pf-success-icon\">\n            <span className=\"glyphicon glyphicon-ok-circle\" />\n          </div>\n          <h3 className=\"blank-slate-pf-main-action\">\n            {sprintf(__('All mappings in %s have been mapped.'), transformationsBody.name)}\n          </h3>\n        </div>\n      );\n    }\n    return null;\n  }\n}\nMappingWizardResultsStep.propTypes = {\n  postMappingsUrl: PropTypes.string,\n  postTransformMappingsAction: PropTypes.func,\n  transformationsBody: PropTypes.object,\n  isPostingMappings: PropTypes.bool,\n  isRejectedPostingMappings: PropTypes.bool,\n  errorPostingMappings: PropTypes.object,\n  transformationMappingsResult: PropTypes.object,\n  continueToPlanAction: PropTypes.func,\n  editingMapping: PropTypes.object,\n  updateTransformationMappingAction: PropTypes.func,\n  isUpdatingMapping: PropTypes.bool,\n  targetProvider: PropTypes.string,\n  fetchTransformationMappingsAction: PropTypes.func,\n  fetchTransformationMappingsUrl: PropTypes.string,\n  redirectTo: PropTypes.func\n};\nMappingWizardResultsStep.defaultProps = {\n  postMappingsUrl: '/api/transformation_mappings',\n  postTransformMappingsAction: noop,\n  transformationsBody: {},\n  isPostingMappings: true,\n  isRejectedPostingMappings: false,\n  errorPostingMappings: null,\n  transformationMappingsResult: null,\n  continueToPlanAction: noop,\n  fetchTransformationMappingsUrl: FETCH_TRANSFORMATION_MAPPINGS_URL\n};\nexport default MappingWizardResultsStep;\n","import Immutable from 'seamless-immutable';\n\nimport {\n  FETCH_V2V_SOURCE_NETWORKS,\n  FETCH_V2V_TARGET_NETWORKS,\n  FETCH_V2V_PUBLIC_CLOUD_NETWORKS\n} from './MappingWizardNetworksStepConstants';\nimport { V2V_MAPPING_WIZARD_EXITED } from '../../../../screens/MappingWizard/MappingWizardConstants';\n\nexport const initialState = Immutable({\n  isFetchingSourceNetworks: false,\n  isRejectedSourceNetworks: false,\n  errorSourceNetworks: null,\n  isFetchingTargetNetworks: false,\n  isRejectedTargetNetworks: false,\n  errorTargetNetworks: null,\n  sourceNetworks: [],\n  targetNetworks: [],\n  isFetchingPublicCloudNetworks: false,\n  isRejectedPublicCloudNetworks: false,\n  errorPublicCloudNetworks: null,\n  publicCloudNetworks: []\n});\n\nexport default (state = initialState, action) => {\n  switch (action.type) {\n    case `${FETCH_V2V_SOURCE_NETWORKS}_PENDING`:\n      return state.set('isFetchingSourceNetworks', true).set('isRejectedSourceNetworks', false);\n    case `${FETCH_V2V_SOURCE_NETWORKS}_FULFILLED`:\n      return state\n        .set('sourceNetworks', action.payload.sourceNetworks)\n        .set('isRejectedSourceNetworks', false)\n        .set('isFetchingSourceNetworks', false);\n    case `${FETCH_V2V_SOURCE_NETWORKS}_REJECTED`:\n      return state\n        .set('errorSourceNetworks', action.payload)\n        .set('isRejectedSourceNetworks', true)\n        .set('isFetchingSourceNetworks', false);\n\n    case `${FETCH_V2V_TARGET_NETWORKS}_PENDING`:\n      return state.set('isFetchingTargetNetworks', true).set('isRejectedTargetNetworks', false);\n    case `${FETCH_V2V_TARGET_NETWORKS}_FULFILLED`:\n      return state\n        .set('targetNetworks', action.payload.targetNetworks)\n        .set('isRejectedTargetNetworks', false)\n        .set('isFetchingTargetNetworks', false);\n    case `${FETCH_V2V_TARGET_NETWORKS}_REJECTED`:\n      return state\n        .set('errorTargetNetworks', action.payload)\n        .set('isRejectedTargetNetworks', true)\n        .set('isFetchingTargetNetworks', false);\n\n    case `${FETCH_V2V_PUBLIC_CLOUD_NETWORKS}_PENDING`:\n      return state.set('isFetchingPublicCloudNetworks', true).set('isRejectedPublicCloudNetworks', false);\n    case `${FETCH_V2V_PUBLIC_CLOUD_NETWORKS}_FULFILLED`:\n      return state.set('publicCloudNetworks', action.payload).set('isFetchingPublicCloudNetworks', false);\n    case `${FETCH_V2V_PUBLIC_CLOUD_NETWORKS}_REJECTED`:\n      return state\n        .set('errorPublicCloudNetworks', action.payload)\n        .set('isRejectedPublicCloudNetworks', true)\n        .set('isFetchingPublicCloudNetworks', false);\n\n    case V2V_MAPPING_WIZARD_EXITED:\n      return initialState;\n\n    default:\n      return state;\n  }\n};\n","import URI from 'urijs';\nimport API from '../../../../../../../../common/API';\nimport {\n  FETCH_V2V_SOURCE_NETWORKS,\n  FETCH_V2V_TARGET_NETWORKS,\n  FETCH_V2V_PUBLIC_CLOUD_NETWORKS,\n  QUERY_ATTRIBUTES\n} from './MappingWizardNetworksStepConstants';\nimport { V2V_TARGET_PROVIDER_NETWORK_KEYS } from '../../MappingWizardConstants';\n\nconst _filterSourceNetworks = response => {\n  const { data } = response;\n  if (data.lans) {\n    const sourceNetworks = data.lans.map(lan => ({\n      ...lan,\n      providerName: data.ext_management_system.name,\n      clusterId: data.id\n    }));\n    return {\n      sourceNetworks\n    };\n  }\n  return {\n    sourceNetworks: []\n  };\n};\n\nconst _getSourceNetworksActionCreator = url => dispatch =>\n  dispatch({\n    type: FETCH_V2V_SOURCE_NETWORKS,\n    payload: new Promise((resolve, reject) => {\n      API.get(url)\n        .then(response => {\n          resolve(_filterSourceNetworks(response));\n        })\n        .catch(e => {\n          reject(e);\n        });\n    })\n  });\n\nexport const fetchSourceNetworksAction = (url, id) => {\n  const uri = new URI(`${url}/${id}`);\n  // creates url like: http://localhost:3000/api/clusters/1?attributes=lans\n  uri.addSearch({ attributes: QUERY_ATTRIBUTES.source });\n\n  return _getSourceNetworksActionCreator(uri.toString());\n};\n\nconst _filterTargetNetworks = (response, targetProvider) => {\n  const { data } = response;\n  if (data[V2V_TARGET_PROVIDER_NETWORK_KEYS[targetProvider]]) {\n    const targetNetworks = data[V2V_TARGET_PROVIDER_NETWORK_KEYS[targetProvider]].map(network => ({\n      ...network,\n      providerName: data.ext_management_system.name,\n      clusterId: data.id\n    }));\n\n    return {\n      targetNetworks\n    };\n  }\n  return {\n    targetNetworks: []\n  };\n};\n\nconst _getTargetNetworksActionCreator = (url, targetProvider) => dispatch =>\n  dispatch({\n    type: FETCH_V2V_TARGET_NETWORKS,\n    payload: new Promise((resolve, reject) => {\n      API.get(url)\n        .then(response => {\n          resolve(_filterTargetNetworks(response, targetProvider));\n        })\n        .catch(e => {\n          reject(e);\n        });\n    })\n  });\n\nexport const fetchTargetNetworksAction = (url, id, targetProvider) => {\n  const uri = new URI(`${url}/${id}`);\n  // creates url like: http://localhost:3000/api/clusters/1?attributes=lans\n  uri.addSearch({ attributes: QUERY_ATTRIBUTES[targetProvider] });\n\n  return _getTargetNetworksActionCreator(uri.toString(), targetProvider);\n};\n\nconst _normalizePublicCloudNetworks = (response, targetCloudTenant) => {\n  const {\n    data: { resources: networks }\n  } = response;\n\n  return networks.map(network => ({\n    ...network,\n    providerName: targetCloudTenant.ext_management_system.name,\n    clusterId: targetCloudTenant.id\n  }));\n};\n\nconst _getPublicCloudNetworksActionCreator = (url, targetCloudTenant) => dispatch =>\n  dispatch({\n    type: FETCH_V2V_PUBLIC_CLOUD_NETWORKS,\n    payload: new Promise((resolve, reject) => {\n      API.get(url)\n        .then(response => {\n          resolve(_normalizePublicCloudNetworks(response, targetCloudTenant));\n        })\n        .catch(e => reject(e));\n    })\n  });\n\nexport const fetchPublicCloudNetworksAction = (url, targetCloudTenant) => {\n  const uri = new URI(`${url}/${targetCloudTenant.ext_management_system.id}/cloud_networks`);\n  uri.addSearch({ expand: 'resources' });\n\n  return _getPublicCloudNetworksActionCreator(uri.toString(), targetCloudTenant);\n};\n","export const normalizeCloudNetworkHref = network => {\n  const normalizedHref = network.href && network.href.replace(/\\/providers\\/\\d+/, '');\n\n  return { ...network, href: normalizedHref };\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport cx from 'classnames';\nimport { Icon } from 'patternfly-react';\n\nimport DualPaneMapper from '../../../DualPaneMapper/DualPaneMapper';\nimport DualPaneMapperList from '../../../DualPaneMapper/DualPaneMapperList';\nimport DualPaneMapperCount from '../../../DualPaneMapper/DualPaneMapperCount';\nimport DualPaneMapperListItem from '../../../DualPaneMapper/DualPaneMapperListItem';\nimport MappingWizardTreeView from '../../../MappingWizardTreeView/MappingWizardTreeView';\nimport { networkKey } from '../../../../../../../common/networkKey';\nimport { multiProviderTargetLabel } from '../../../helpers';\n\nimport {\n  sourceNetworksFilter,\n  clustersMappingWithTreeViewAttrs,\n  targetNetworkWithTreeViewAttrs,\n  networkGroupingForRep,\n  mappingsForTreeView,\n  mappingWithTargetNetworkRemoved,\n  mappingWithSourceNetworkRemoved,\n  getRepresentatives\n} from './helpers';\n\nclass NetworksStepForm extends React.Component {\n  state = {\n    selectedSourceNetworks: [],\n    selectedTargetNetwork: null,\n    selectedNode: null\n  };\n\n  componentWillReceiveProps(nextProps) {\n    if (this.props.selectedCluster && nextProps.selectedCluster.id !== this.props.selectedCluster.id) {\n      this.setState(() => ({\n        selectedSourceNetworks: [],\n        selectedTargetNetwork: null\n      }));\n    }\n  }\n\n  selectSourceNetwork = sourceNetwork => {\n    this.setState(prevState => {\n      const isAlreadySelected = prevState.selectedSourceNetworks.some(\n        selectedSourceNetwork => networkKey(selectedSourceNetwork) === networkKey(sourceNetwork)\n      );\n      if (isAlreadySelected) {\n        return {\n          selectedSourceNetworks: prevState.selectedSourceNetworks.filter(\n            selectedSourceNetwork => networkKey(selectedSourceNetwork) !== networkKey(sourceNetwork)\n          )\n        };\n      }\n      return {\n        selectedSourceNetworks: [...prevState.selectedSourceNetworks, sourceNetwork]\n      };\n    });\n  };\n\n  selectTargetNetwork = targetNetwork => {\n    this.setState(() => ({ selectedTargetNetwork: targetNetwork }));\n  };\n\n  addNetworkMapping = () => {\n    const {\n      input: { value: networksStepMappings, onChange },\n      selectedCluster,\n      selectedClusterMapping,\n      groupedSourceNetworks\n    } = this.props;\n\n    const { selectedTargetNetwork, selectedSourceNetworks } = this.state;\n\n    const noMappingForTargetCluster = !networksStepMappings.some(\n      targetClusterWithNetworkMappings => targetClusterWithNetworkMappings.id === selectedClusterMapping.id\n    );\n\n    const addingToExistingMapping = networksStepMappings.some(targetClusterWithNetworkMappings =>\n      targetClusterWithNetworkMappings.nodes.some(networkMapping => networkMapping.id === selectedTargetNetwork.id)\n    );\n\n    if (networksStepMappings.length === 0 || noMappingForTargetCluster) {\n      // ADD A NETWORKS STEP MAPPING\n      //   targetCluster\n      //   -- selectedTargetNetwork\n      //   ----  [...network groupings for selected source networks]\n      const networksStepMappingToAdd = {\n        ...clustersMappingWithTreeViewAttrs(selectedClusterMapping),\n        nodes: [\n          {\n            ...targetNetworkWithTreeViewAttrs(selectedTargetNetwork),\n            nodes: selectedSourceNetworks.reduce(\n              (sourceNetworks, sourceNetworkGroupRep) => [\n                ...sourceNetworks,\n                ...networkGroupingForRep(sourceNetworkGroupRep, groupedSourceNetworks, selectedCluster)\n              ],\n              []\n            )\n          }\n        ]\n      };\n      onChange([...networksStepMappings, networksStepMappingToAdd]);\n    } else {\n      const updatedNetworksStepMappings = networksStepMappings.map(targetClusterWithNetworkMappings => {\n        if (targetClusterWithNetworkMappings.id !== selectedClusterMapping.id) {\n          return targetClusterWithNetworkMappings;\n        } else if (addingToExistingMapping) {\n          // ADD TO EXISTING NETWORKS MAPPING\n          //   matchingTargetCluster\n          //   -- selectedTargetNetwork\n          //   ---- [...alreadyMappedSourceNetworks, ...network groupings for selected source networks]\n          return {\n            ...targetClusterWithNetworkMappings,\n            nodes: targetClusterWithNetworkMappings.nodes.map(networkMapping => {\n              if (networkMapping.id === selectedTargetNetwork.id) {\n                return {\n                  ...networkMapping,\n                  nodes: [\n                    ...networkMapping.nodes,\n                    ...selectedSourceNetworks.reduce(\n                      (sourceNetworks, networkGroupRep) => [\n                        ...sourceNetworks,\n                        ...networkGroupingForRep(networkGroupRep, groupedSourceNetworks, selectedCluster)\n                      ],\n                      []\n                    )\n                  ]\n                };\n              }\n              return networkMapping;\n            })\n          };\n        }\n        // ADD TO EXISTING NETWORKS STEP MAPPING\n        //   matchingTargetCluster\n        //   -- existingNetworkMapping(s)\n        //   -- selectedTargetNetwork\n        //   ---- [...network groupings for selected source networks]\n        return {\n          ...targetClusterWithNetworkMappings,\n          nodes: [\n            ...targetClusterWithNetworkMappings.nodes,\n            {\n              ...targetNetworkWithTreeViewAttrs(selectedTargetNetwork),\n              nodes: selectedSourceNetworks.reduce(\n                (sourceNetworks, networkGroupRep) => [\n                  ...sourceNetworks,\n                  ...networkGroupingForRep(networkGroupRep, groupedSourceNetworks, selectedCluster)\n                ],\n                []\n              )\n            }\n          ]\n        };\n      });\n      onChange(updatedNetworksStepMappings);\n    }\n\n    this.setState(prevState => ({\n      selectedTargetNetwork: null,\n      selectedSourceNetworks: []\n    }));\n  };\n\n  selectNode = selectedNode => {\n    const { value: networksStepMappings, onChange } = this.props.input;\n    const isTargetNetwork = selectedNode.nodes;\n\n    if (isTargetNetwork) {\n      const updatedMappings = networksStepMappings.map(targetClusterWithNetworksMappings => {\n        const { nodes: networksMappings, ...targetCluster } = targetClusterWithNetworksMappings;\n        return {\n          ...targetCluster,\n          nodes: networksMappings.map(networksMapping => {\n            const { nodes: sourceNetworks, ...targetNetwork } = networksMapping;\n            return targetNetwork.id === selectedNode.id\n              ? {\n                  ...targetNetwork,\n                  selected: !targetNetwork.selected,\n                  nodes: sourceNetworks.map(sourceNetwork => ({\n                    ...sourceNetwork,\n                    selected: false\n                  }))\n                }\n              : {\n                  ...targetNetwork,\n                  selected: false,\n                  nodes: sourceNetworks.map(sourceNetwork => ({\n                    ...sourceNetwork,\n                    selected: false\n                  }))\n                };\n          })\n        };\n      });\n      onChange(updatedMappings);\n    } else {\n      const updatedMappings = networksStepMappings.map(targetClusterWithNetworksMappings => {\n        const { nodes: networksMappings, ...targetCluster } = targetClusterWithNetworksMappings;\n        return {\n          ...targetCluster,\n          nodes: networksMappings.map(networksMapping => {\n            const { nodes: sourceNetworks, ...targetNetwork } = networksMapping;\n            return {\n              ...targetNetwork,\n              selected: false,\n              nodes: sourceNetworks.map(sourceNetwork => {\n                if (networkKey(sourceNetwork) === networkKey(selectedNode)) {\n                  return {\n                    ...sourceNetwork,\n                    selected: !sourceNetwork.selected\n                  };\n                } else if (sourceNetwork.selected) {\n                  return {\n                    ...sourceNetwork,\n                    selected: false\n                  };\n                }\n                return sourceNetwork;\n              })\n            };\n          })\n        };\n      });\n      onChange(updatedMappings);\n    }\n    this.setState(() => ({ selectedNode }));\n  };\n\n  removeNode = () => {\n    const { value: networksStepMappings, onChange } = this.props.input;\n    const { selectedNode } = this.state;\n    const isTargetNetwork = selectedNode.nodes;\n\n    // *********************\n    // NETWORKS STEP MAPPING\n    // *********************\n    // Target Cluster\n    // --> Target Network\n    // ----> Source network grouping(s)\n\n    // ****************\n    // NETWORKS MAPPING\n    // ****************\n    // Target Network\n    // --> Source network grouping(s)\n\n    const updatedMappings = isTargetNetwork\n      ? networksStepMappings.reduce((updatedNetworksStepMappings, networksStepMapping) => {\n          const updatedMapping = mappingWithTargetNetworkRemoved(networksStepMapping, selectedNode);\n          return updatedMapping ? [...updatedNetworksStepMappings, updatedMapping] : [...updatedNetworksStepMappings];\n        }, [])\n      : networksStepMappings.reduce((updatedNetworksStepMappings, networksStepMapping) => {\n          const { nodes: networksMappings, ...targetCluster } = networksStepMapping;\n          const updatedNodes = networksMappings.reduce((updatedNetworksMappings, networksMapping) => {\n            const updatedMapping = mappingWithSourceNetworkRemoved(networksMapping, selectedNode);\n            return updatedMapping ? [...updatedNetworksMappings, updatedMapping] : [...updatedNetworksMappings];\n          }, []);\n          return updatedNodes.length > 0\n            ? [...updatedNetworksStepMappings, { ...targetCluster, nodes: updatedNodes }]\n            : [...updatedNetworksStepMappings];\n        }, []);\n\n    onChange(updatedMappings);\n    this.setState(() => ({ selectedNode: null }));\n  };\n\n  removeAll = () => {\n    const { input } = this.props;\n    input.onChange([]);\n  };\n\n  allNetworksMapped = filteredNetworks =>\n    !filteredNetworks.length && (\n      <div className=\"dual-pane-mapper-item\">\n        <Icon type=\"pf\" name=\"ok\" /> {__('All source networks have been mapped.')}\n      </div>\n    );\n\n  render() {\n    const {\n      groupedSourceNetworks,\n      groupedTargetNetworks,\n      isFetchingSourceNetworks,\n      isFetchingTargetNetworks,\n      input,\n      selectedCluster,\n      targetProvider,\n      preLoadingMappings\n    } = this.props;\n    const { selectedSourceNetworks, selectedTargetNetwork, selectedNode } = this.state;\n\n    const classes = cx('dual-pane-mapper-form', {\n      'is-hidden': !selectedCluster\n    });\n\n    const sourceCounter = (\n      <DualPaneMapperCount\n        selectedItems={selectedSourceNetworks.length}\n        totalItems={sourceNetworksFilter(groupedSourceNetworks, input.value).length}\n      />\n    );\n\n    const targetCounter = <DualPaneMapperCount selectedItems={selectedTargetNetwork ? 1 : 0} totalItems={1} />;\n\n    return (\n      <div className={classes}>\n        <p style={{ marginLeft: -48 }}>\n          {__(\n            'Select one or more source networks to map to a single target. Select Add Mapping. Multiple mappings can be added.') // prettier-ignore\n          }\n        </p>\n        <DualPaneMapper\n          handleButtonClick={this.addNetworkMapping}\n          validMapping={!(selectedTargetNetwork && (selectedSourceNetworks && selectedSourceNetworks.length > 0))}\n        >\n          <DualPaneMapperList\n            id=\"source_networks\"\n            listTitle={__('Source Provider \\\\ Datacenter \\\\ Network')}\n            loading={isFetchingSourceNetworks}\n            counter={sourceCounter}\n          >\n            {groupedSourceNetworks && (\n              <React.Fragment>\n                {sourceNetworksFilter(groupedSourceNetworks, input.value).map(sourceNetwork => (\n                  <DualPaneMapperListItem\n                    item={sourceNetwork}\n                    text={`${sourceNetwork.providerName} \\\\ ${selectedCluster.v_parent_datacenter} \\\\ ${\n                      sourceNetwork.name\n                    }`}\n                    key={sourceNetwork.id}\n                    selected={\n                      selectedSourceNetworks &&\n                      selectedSourceNetworks.some(\n                        selectedSourceNetwork => networkKey(selectedSourceNetwork) === networkKey(sourceNetwork)\n                      )\n                    }\n                    handleClick={this.selectSourceNetwork}\n                    handleKeyPress={this.selectSourceNetwork}\n                  />\n                ))}\n                {this.allNetworksMapped(sourceNetworksFilter(groupedSourceNetworks, input.value))}\n              </React.Fragment>\n            )}\n          </DualPaneMapperList>\n          <DualPaneMapperList\n            id=\"target_networks\"\n            listTitle={multiProviderTargetLabel(targetProvider, 'network')}\n            loading={isFetchingTargetNetworks}\n            counter={targetCounter}\n          >\n            {groupedTargetNetworks &&\n              getRepresentatives(groupedTargetNetworks).map(targetNetwork => (\n                <DualPaneMapperListItem\n                  item={targetNetwork}\n                  text={`${targetNetwork.providerName} \\\\ ${targetNetwork.name}`}\n                  key={targetNetwork.id}\n                  selected={selectedTargetNetwork && networkKey(selectedTargetNetwork) === networkKey(targetNetwork)}\n                  handleClick={this.selectTargetNetwork}\n                  handleKeyPress={this.selectTargetNetwork}\n                />\n              ))}\n          </DualPaneMapperList>\n        </DualPaneMapper>\n        <MappingWizardTreeView\n          mappings={mappingsForTreeView(input.value)}\n          selectNode={this.selectNode}\n          removeNode={this.removeNode}\n          removeAll={this.removeAll}\n          selectedNode={selectedNode}\n          loading={isFetchingSourceNetworks || isFetchingTargetNetworks || preLoadingMappings}\n        />\n      </div>\n    );\n  }\n}\n\nNetworksStepForm.propTypes = {\n  input: PropTypes.object,\n  groupedSourceNetworks: PropTypes.object,\n  groupedTargetNetworks: PropTypes.object,\n  isFetchingSourceNetworks: PropTypes.bool,\n  isFetchingTargetNetworks: PropTypes.bool,\n  selectedCluster: PropTypes.object,\n  selectedClusterMapping: PropTypes.object,\n  targetProvider: PropTypes.string,\n  preLoadingMappings: PropTypes.bool\n};\n\nexport default NetworksStepForm;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { noop } from 'patternfly-react';\nimport { Field, reduxForm } from 'redux-form';\nimport { length } from 'redux-form-validators';\n\nimport NetworksStepForm from './components/NetworksStepForm/NetworksStepForm';\nimport { BootstrapSelect } from '../../../../../common/forms/BootstrapSelect';\nimport { getClusterOptions, updateMappings } from '../helpers';\nimport { FETCH_NETWORK_URLS, HAS_CLOUD_NETWORKS } from './MappingWizardNetworksStepConstants';\nimport { createNetworksMappings } from './components/NetworksStepForm/helpers';\n\nclass MappingWizardNetworksStep extends React.Component {\n  state = {\n    selectedCluster: undefined, // dropdown selected cluster\n    selectedClusterMapping: null, // cluster mapping from step-2 associated with selected source cluster\n    preLoadingMappings: false\n  };\n\n  constructor(props) {\n    super(props);\n\n    const { clusterMappings, pristine } = this.props;\n\n    const sourceClusters = clusterMappings.reduce(\n      (clusters, clusterMapping) => clusters.concat(clusterMapping.nodes),\n      []\n    );\n\n    const synchronousSetState = fn => {\n      this.state = { ...this.state, ...fn() };\n    };\n\n    if (sourceClusters.length === 1 || !pristine) {\n      this.selectSourceCluster(sourceClusters[0].id, synchronousSetState);\n    }\n  }\n\n  componentDidMount() {\n    const {\n      editingMapping,\n      targetProvider,\n      initialize,\n      initialized,\n      clusterMappings,\n      change,\n      mappingWizardNetworksStepForm\n    } = this.props;\n\n    if (editingMapping && !initialized) {\n      this.setState({ preLoadingMappings: true }); // eslint-disable-line react/no-did-mount-set-state\n      createNetworksMappings(editingMapping, targetProvider, clusterMappings).then(networksMappings => {\n        initialize({ networksMappings: updateMappings(networksMappings, clusterMappings) });\n        this.setState({ preLoadingMappings: false });\n      });\n      return;\n    }\n\n    if (mappingWizardNetworksStepForm && mappingWizardNetworksStepForm.values) {\n      change(\n        'networksMappings',\n        updateMappings(mappingWizardNetworksStepForm.values.networksMappings, clusterMappings)\n      );\n    }\n  }\n\n  componentWillReceiveProps(nextProps) {\n    const { showAlertAction, isRejectedSourceNetworks, isRejectedTargetNetworks } = this.props;\n\n    const { selectedCluster, selectedClusterMapping } = this.state;\n\n    if (isRejectedSourceNetworks !== nextProps.isRejectedSourceNetworks && nextProps.isRejectedSourceNetworks) {\n      const msg = sprintf(\n        __('Error retrieving cluster networks: %s, ID: %s'),\n        selectedCluster.name,\n        selectedCluster.id\n      );\n      showAlertAction(msg);\n    } else if (\n      isRejectedTargetNetworks !== nextProps.isRejectedTargetNetworks &&\n      nextProps.isRejectedTargetNetworks &&\n      !isRejectedSourceNetworks\n    ) {\n      const msg = sprintf(\n        __('Error retrieving cluster networks: %s, ID: %s'),\n        selectedClusterMapping.name,\n        selectedClusterMapping.id\n      );\n      showAlertAction(msg);\n    }\n  }\n\n  selectSourceCluster = (sourceClusterId, setState = this.setState) => {\n    // when dropdown selection occurs for source cluster, we go retrieve the\n    // newworks for that cluster\n    const {\n      fetchNetworksUrls,\n      fetchSourceNetworksAction,\n      fetchTargetNetworksAction,\n      fetchPublicCloudNetworksAction,\n      clusterMappings,\n      targetProvider\n    } = this.props;\n\n    const selectedClusterMapping = clusterMappings.find(clusterMapping =>\n      clusterMapping.nodes.some(sourceCluster => sourceCluster.id === sourceClusterId)\n    );\n\n    const { nodes: sourceClusters, ...targetCluster } = selectedClusterMapping;\n\n    setState(() => ({\n      selectedCluster: sourceClusters.find(sourceCluster => sourceCluster.id === sourceClusterId),\n      selectedClusterMapping\n    }));\n\n    fetchSourceNetworksAction(fetchNetworksUrls.source, sourceClusterId);\n    fetchTargetNetworksAction(fetchNetworksUrls[targetProvider], targetCluster.id, targetProvider);\n\n    if (HAS_CLOUD_NETWORKS[targetProvider]) {\n      fetchPublicCloudNetworksAction(fetchNetworksUrls.public, targetCluster);\n    }\n  };\n\n  render() {\n    const {\n      clusterMappings,\n      isFetchingSourceNetworks,\n      isFetchingTargetNetworks,\n      groupedSourceNetworks,\n      groupedTargetNetworks,\n      form,\n      targetProvider\n    } = this.props;\n\n    const { selectedCluster, selectedClusterMapping, preLoadingMappings } = this.state;\n\n    const clusterOptions = getClusterOptions(clusterMappings);\n\n    return (\n      <div>\n        <Field\n          name=\"cluster_select\"\n          label={__('Select a source cluster whose networks you want to map')}\n          data_live_search=\"true\"\n          component={BootstrapSelect}\n          options={clusterOptions}\n          option_key=\"id\"\n          option_value=\"name\"\n          onSelect={this.selectSourceCluster}\n          pre_selected_value={clusterOptions.length === 1 ? clusterOptions[0].id : ''}\n          choose_text={`<${__('Select a source cluster')}>`}\n          render_within_form=\"true\"\n          form_name={form}\n          inline_label\n          labelWidth={6}\n          controlWidth={4}\n        />\n        <Field\n          name=\"networksMappings\"\n          component={NetworksStepForm}\n          groupedSourceNetworks={groupedSourceNetworks}\n          groupedTargetNetworks={groupedTargetNetworks}\n          selectedCluster={selectedCluster}\n          selectedClusterMapping={selectedClusterMapping}\n          isFetchingSourceNetworks={isFetchingSourceNetworks}\n          isFetchingTargetNetworks={isFetchingTargetNetworks}\n          validate={length({ min: 1 })}\n          targetProvider={targetProvider}\n          preLoadingMappings={preLoadingMappings}\n        />\n      </div>\n    );\n  }\n}\n\nMappingWizardNetworksStep.propTypes = {\n  clusterMappings: PropTypes.array,\n  editingMapping: PropTypes.object,\n  fetchNetworksUrls: PropTypes.object,\n  fetchPublicCloudNetworksAction: PropTypes.func,\n  fetchSourceNetworksAction: PropTypes.func,\n  fetchTargetNetworksAction: PropTypes.func,\n  initialize: PropTypes.func,\n  initialized: PropTypes.bool,\n  isFetchingSourceNetworks: PropTypes.bool,\n  isRejectedSourceNetworks: PropTypes.bool,\n  isFetchingTargetNetworks: PropTypes.bool,\n  isRejectedTargetNetworks: PropTypes.bool,\n  form: PropTypes.string,\n  pristine: PropTypes.bool,\n  showAlertAction: PropTypes.func,\n  groupedSourceNetworks: PropTypes.object,\n  groupedTargetNetworks: PropTypes.object,\n  targetProvider: PropTypes.string,\n  change: PropTypes.func,\n  mappingWizardNetworksStepForm: PropTypes.object\n};\nMappingWizardNetworksStep.defaultProps = {\n  clusterMappings: [],\n  fetchNetworksUrls: FETCH_NETWORK_URLS,\n  fetchSourceNetworksAction: noop,\n  fetchTargetNetworksAction: noop,\n  isFetchingSourceNetworks: false,\n  isRejectedSourceNetworks: false,\n  isFetchingTargetNetworks: false,\n  isRejectedTargetNetworks: false,\n  form: '',\n  pristine: true,\n  showAlertAction: noop,\n  targetProvider: ''\n};\n\nexport default reduxForm({\n  form: 'mappingWizardNetworksStep',\n  destroyOnUnmount: false\n})(MappingWizardNetworksStep);\n","import Immutable from 'seamless-immutable';\n\nimport { FETCH_V2V_SOURCE_DATASTORES, FETCH_V2V_TARGET_DATASTORES } from './MappingWizardDatastoresStepConstants';\nimport { V2V_MAPPING_WIZARD_EXITED } from '../../../../screens/MappingWizard/MappingWizardConstants';\n\nconst initialState = Immutable({\n  isFetchingSourceDatastores: false,\n  isRejectedSourceDatastores: false,\n  errorSourceDatastores: null,\n  isFetchingTargetDatastores: false,\n  isRejectedTargetDatastores: false,\n  errorTargetDatastores: null,\n  sourceDatastores: [],\n  targetDatastores: []\n});\n\nexport default (state = initialState, action) => {\n  switch (action.type) {\n    case `${FETCH_V2V_SOURCE_DATASTORES}_PENDING`:\n      return state.set('isFetchingSourceDatastores', true).set('isRejectedSourceDatastores', false);\n    case `${FETCH_V2V_SOURCE_DATASTORES}_FULFILLED`:\n      return state\n        .set('sourceDatastores', action.payload.sourceDatastores)\n        .set('isRejectedSourceDatastores', false)\n        .set('isFetchingSourceDatastores', false);\n    case `${FETCH_V2V_SOURCE_DATASTORES}_REJECTED`:\n      return state\n        .set('errorSourceDatastores', action.payload)\n        .set('isRejectedSourceDatastores', true)\n        .set('isFetchingSourceDatastores', false);\n\n    case `${FETCH_V2V_TARGET_DATASTORES}_PENDING`:\n      return state.set('isFetchingTargetDatastores', true).set('isRejectedTargetDatastores', false);\n    case `${FETCH_V2V_TARGET_DATASTORES}_FULFILLED`:\n      return state\n        .set('targetDatastores', action.payload.targetDatastores)\n        .set('isRejectedTargetDatastores', false)\n        .set('isFetchingTargetDatastores', false);\n    case `${FETCH_V2V_TARGET_DATASTORES}_REJECTED`:\n      return state\n        .set('errorTargetDatastores', action.payload)\n        .set('isRejectedTargetDatastores', true)\n        .set('isFetchingTargetDatastores', false);\n\n    case V2V_MAPPING_WIZARD_EXITED:\n      return initialState;\n\n    default:\n      return state;\n  }\n};\n","import URI from 'urijs';\n\nimport API from '../../../../../../../../common/API';\nimport {\n  FETCH_V2V_SOURCE_DATASTORES,\n  FETCH_V2V_TARGET_DATASTORES,\n  QUERY_ATTRIBUTES\n} from './MappingWizardDatastoresStepConstants';\nimport { V2V_TARGET_PROVIDER_STORAGE_KEYS } from '../../MappingWizardConstants';\n\nconst _filterSourceDatastores = response => {\n  const { data } = response;\n  if (data.storages) {\n    const sourceDatastores = data.storages.map(storage => ({\n      ...storage,\n      providerName: data.ext_management_system.name,\n      datacenterName: data.v_parent_datacenter\n    }));\n    return {\n      sourceDatastores\n    };\n  }\n  return {\n    sourceDatastores: []\n  };\n};\n\nconst _getSourceDatastoresActionCreator = url => dispatch =>\n  dispatch({\n    type: FETCH_V2V_SOURCE_DATASTORES,\n    payload: new Promise((resolve, reject) => {\n      API.get(url)\n        .then(response => {\n          resolve(_filterSourceDatastores(response));\n        })\n        .catch(e => {\n          reject(e);\n        });\n    })\n  });\n\nexport const fetchSourceDatastoresAction = (url, id) => {\n  const uri = new URI(`${url}/${id}`);\n  // creates url like: http://localhost:3000/api/clusters/1?attributes=storages\n  uri.addSearch({ attributes: QUERY_ATTRIBUTES.source });\n\n  return _getSourceDatastoresActionCreator(uri.toString());\n};\n\nconst _filterTargetDatastores = (response, targetProvider) => {\n  const { data } = response;\n\n  if (data[V2V_TARGET_PROVIDER_STORAGE_KEYS[targetProvider]]) {\n    const targetDatastores = data[V2V_TARGET_PROVIDER_STORAGE_KEYS[targetProvider]].map(storage => ({\n      ...storage,\n      providerName: data.ext_management_system.name\n    }));\n    return {\n      targetDatastores\n    };\n  }\n  return {\n    targetDatastores: []\n  };\n};\n\nconst _getTargetDatastoresActionCreator = (url, targetProvider) => dispatch =>\n  dispatch({\n    type: FETCH_V2V_TARGET_DATASTORES,\n    payload: new Promise((resolve, reject) => {\n      API.get(url)\n        .then(response => {\n          resolve(_filterTargetDatastores(response, targetProvider));\n        })\n        .catch(e => reject(e));\n    })\n  });\n\nexport const fetchTargetDatastoresAction = (url, id, targetProvider) => {\n  const uri = new URI(`${url}/${id}`);\n  // creates url like: http://localhost:3000/api/clusters/1?attributes=storages\n  uri.addSearch({ attributes: QUERY_ATTRIBUTES[targetProvider] });\n\n  return _getTargetDatastoresActionCreator(uri.toString(), targetProvider);\n};\n","export const sourceDatastoreFilter = (datastoresToFilter, datastoreStepMappings) => {\n  const mappedDatastores = datastoreStepMappings.reduce((mappedDatastoresArray, targetClusterDatastoreMappings) => {\n    const sourceDatastores = targetClusterDatastoreMappings.nodes.reduce(\n      (datastores, datastoreMapping) => datastores.concat(datastoreMapping.nodes),\n      []\n    );\n    return mappedDatastoresArray.concat(sourceDatastores);\n  }, []);\n\n  return datastoresToFilter.filter(\n    datastore => !mappedDatastores.some(mappedDatastore => mappedDatastore.id === datastore.id)\n  );\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport cx from 'classnames';\nimport { Icon } from 'patternfly-react';\n\nimport DualPaneMapper from '../../../DualPaneMapper/DualPaneMapper';\nimport DualPaneMapperList from '../../../DualPaneMapper/DualPaneMapperList';\nimport DualPaneMapperCount from '../../../DualPaneMapper/DualPaneMapperCount';\nimport DualPaneMapperListItem from '../../../DualPaneMapper/DualPaneMapperListItem';\nimport MappingWizardTreeView from '../../../MappingWizardTreeView/MappingWizardTreeView';\n\nimport { sourceDatastoreFilter } from '../../MappingWizardDatastoresStepSelectors';\nimport { targetDatastoreTreeViewInfo, sourceDatastoreInfo, targetDatastoreInfo, updateMappings } from './helpers';\nimport { multiProviderTargetLabel } from '../../../helpers';\n\nclass DatastoresStepForm extends React.Component {\n  state = {\n    selectedSourceDatastores: [],\n    selectedTargetDatastore: null,\n    selectedNode: null\n  };\n\n  componentWillReceiveProps(nextProps) {\n    if (this.props.selectedCluster && nextProps.selectedCluster.id !== this.props.selectedCluster.id) {\n      this.setState(() => ({\n        selectedSourceDatastores: [],\n        selectedTargetDatastore: null\n      }));\n    }\n  }\n\n  selectSourceDatastore = sourceDatastore => {\n    this.setState(prevState => {\n      const isAlreadySelected = prevState.selectedSourceDatastores.some(\n        datastore => datastore.id === sourceDatastore.id\n      );\n      if (isAlreadySelected) {\n        return {\n          selectedSourceDatastores: prevState.selectedSourceDatastores.filter(\n            datastore => datastore.id !== sourceDatastore.id\n          )\n        };\n      }\n      return {\n        selectedSourceDatastores: [...prevState.selectedSourceDatastores, sourceDatastore]\n      };\n    });\n  };\n\n  selectTargetDatastore = targetDatastore => {\n    this.setState(() => ({ selectedTargetDatastore: targetDatastore }));\n  };\n\n  addDatastoreMapping = () => {\n    const { input, selectedCluster, selectedClusterMapping } = this.props;\n\n    const { selectedTargetDatastore } = this.state;\n\n    const noMappingForTargetCluster = !input.value.some(\n      datastoreMapping => datastoreMapping.id === selectedClusterMapping.id\n    );\n\n    const addingToExistingMapping = input.value.some(targetClusterDatastoreMappings =>\n      targetClusterDatastoreMappings.nodes.some(datastoreMapping => datastoreMapping.id === selectedTargetDatastore.id)\n    );\n\n    this.setState(prevState => {\n      if (input.value.length === 0 || noMappingForTargetCluster) {\n        input.onChange([\n          ...input.value,\n          {\n            ...selectedClusterMapping,\n            text: selectedClusterMapping.name,\n            selectable: false,\n            nodes: [\n              {\n                ...prevState.selectedTargetDatastore,\n                text: targetDatastoreTreeViewInfo(\n                  prevState.selectedTargetDatastore,\n                  prevState.selectedSourceDatastores\n                ),\n                selectable: true,\n                selected: false,\n                state: {\n                  expanded: true\n                },\n                nodes: prevState.selectedSourceDatastores.map(datastore => ({\n                  ...datastore,\n                  text: datastore.name,\n                  icon: 'fa fa-file-o',\n                  selectable: true,\n                  selected: false,\n                  sourceClusterId: selectedCluster.id\n                }))\n              }\n            ]\n          }\n        ]);\n      } else {\n        input.onChange(\n          input.value.map(datastoreMapping => {\n            if (datastoreMapping.id !== selectedClusterMapping.id) {\n              return datastoreMapping;\n            } else if (addingToExistingMapping) {\n              return {\n                ...datastoreMapping,\n                nodes: datastoreMapping.nodes.map(mapping => {\n                  if (mapping.id === prevState.selectedTargetDatastore.id) {\n                    return {\n                      ...mapping,\n                      text: targetDatastoreTreeViewInfo(\n                        mapping,\n                        mapping.nodes.concat(prevState.selectedSourceDatastores)\n                      ),\n                      nodes: mapping.nodes.concat(\n                        prevState.selectedSourceDatastores.map(datastore => ({\n                          ...datastore,\n                          text: datastore.name,\n                          icon: 'fa fa-file-o',\n                          selectable: true,\n                          selected: false,\n                          sourceClusterId: selectedCluster.id\n                        }))\n                      )\n                    };\n                  }\n                  return mapping;\n                })\n              };\n            }\n            return {\n              ...datastoreMapping,\n              nodes: datastoreMapping.nodes.concat({\n                ...prevState.selectedTargetDatastore,\n                text: targetDatastoreTreeViewInfo(\n                  prevState.selectedTargetDatastore,\n                  prevState.selectedSourceDatastores\n                ),\n                selectable: true,\n                selected: false,\n                state: {\n                  expanded: true\n                },\n                nodes: prevState.selectedSourceDatastores.map(datastore => ({\n                  ...datastore,\n                  text: datastore.name,\n                  icon: 'fa fa-file-o',\n                  selectable: true,\n                  selected: false,\n                  sourceClusterId: selectedCluster.id\n                }))\n              })\n            };\n          })\n        );\n      }\n      return {\n        selectedTargetDatastore: null,\n        selectedSourceDatastores: []\n      };\n    });\n  };\n\n  selectNode = selectedNode => {\n    const { value: datastoresStepMappings, onChange } = this.props.input;\n    const isTargetDatastore = selectedNode.nodes;\n\n    if (isTargetDatastore) {\n      const updatedMappings = datastoresStepMappings.map(targetClusterWithDatastoresMappings => {\n        const { nodes: datastoresMappings, ...targetCluster } = targetClusterWithDatastoresMappings;\n        return {\n          ...targetCluster,\n          nodes: datastoresMappings.map(datastoresMapping => {\n            const { nodes: sourceDatastores, ...targetDatastore } = datastoresMapping;\n            return targetDatastore.id === selectedNode.id\n              ? {\n                  ...targetDatastore,\n                  selected: !targetDatastore.selected,\n                  nodes: sourceDatastores.map(sourceDatastore => ({\n                    ...sourceDatastore,\n                    selected: false\n                  }))\n                }\n              : {\n                  ...targetDatastore,\n                  selected: false,\n                  nodes: sourceDatastores.map(sourceDatastore => ({\n                    ...sourceDatastore,\n                    selected: false\n                  }))\n                };\n          })\n        };\n      });\n      onChange(updatedMappings);\n    } else {\n      const updatedMappings = datastoresStepMappings.map(targetClusterWithDatastoresMappings => {\n        const { nodes: datastoresMappings, ...targetCluster } = targetClusterWithDatastoresMappings;\n        return {\n          ...targetCluster,\n          nodes: datastoresMappings.map(datastoresMapping => {\n            const { nodes: sourceDatastores, ...targetDatastore } = datastoresMapping;\n            return {\n              ...targetDatastore,\n              selected: false,\n              nodes: sourceDatastores.map(sourceDatastore => {\n                if (sourceDatastore.id === selectedNode.id) {\n                  return {\n                    ...sourceDatastore,\n                    selected: !sourceDatastore.selected\n                  };\n                } else if (sourceDatastore.selected) {\n                  return {\n                    ...sourceDatastore,\n                    selected: false\n                  };\n                }\n                return sourceDatastore;\n              })\n            };\n          })\n        };\n      });\n      onChange(updatedMappings);\n    }\n    this.setState(() => ({ selectedNode }));\n  };\n\n  removeNode = () => {\n    const { value: datastoresStepMappings, onChange } = this.props.input;\n    const { selectedNode } = this.state;\n\n    const updatedMappings = datastoresStepMappings\n      .map(targetClusterWithDatastoresMappings => updateMappings(targetClusterWithDatastoresMappings, selectedNode))\n      .filter(item => item !== undefined);\n    onChange(updatedMappings);\n\n    this.setState(() => ({ selectedNode: null }));\n  };\n\n  removeAll = () => {\n    const { input } = this.props;\n    input.onChange([]);\n  };\n\n  allDatastoresMapped = filteredDatastores =>\n    !filteredDatastores.length && (\n      <div className=\"dual-pane-mapper-item\">\n        <Icon type=\"pf\" name=\"ok\" /> {__('All source datastores have been mapped.')}\n      </div>\n    );\n\n  render() {\n    const {\n      sourceDatastores,\n      targetDatastores,\n      isFetchingSourceDatastores,\n      isFetchingTargetDatastores,\n      input,\n      selectedCluster,\n      targetProvider,\n      preLoadingMappings\n    } = this.props;\n    const { selectedSourceDatastores, selectedTargetDatastore, selectedNode } = this.state;\n\n    const classes = cx('dual-pane-mapper-form', {\n      'is-hidden': !selectedCluster\n    });\n\n    const sourceCounter = (\n      <DualPaneMapperCount\n        selectedItems={selectedSourceDatastores.length}\n        totalItems={sourceDatastoreFilter(sourceDatastores, input.value).length}\n      />\n    );\n\n    const targetCounter = <DualPaneMapperCount selectedItems={selectedTargetDatastore ? 1 : 0} totalItems={1} />;\n\n    return (\n      <div className={classes}>\n        <p style={{ marginLeft: -40 }}>\n          {__(\n            'Select source datastore(s) and a target datastore and click Add Mapping to add the mapping. Multiple mappings can be added.') // prettier-ignore\n          }\n        </p>\n        <DualPaneMapper\n          handleButtonClick={this.addDatastoreMapping}\n          validMapping={!(selectedTargetDatastore && (selectedSourceDatastores && selectedSourceDatastores.length > 0))}\n        >\n          <DualPaneMapperList\n            id=\"source_datastores\"\n            listTitle={__('Source Provider \\\\ Datacenter \\\\ Datastore')}\n            loading={isFetchingSourceDatastores}\n            counter={sourceCounter}\n          >\n            {sourceDatastores && (\n              <React.Fragment>\n                {sourceDatastoreFilter(sourceDatastores, input.value).map(item => (\n                  <DualPaneMapperListItem\n                    item={item}\n                    text={sourceDatastoreInfo(item)}\n                    key={item.id}\n                    selected={\n                      selectedSourceDatastores &&\n                      selectedSourceDatastores.some(sourceDatastore => sourceDatastore.id === item.id)\n                    }\n                    handleClick={this.selectSourceDatastore}\n                    handleKeyPress={this.selectSourceDatastore}\n                  />\n                ))}\n                {this.allDatastoresMapped(sourceDatastoreFilter(sourceDatastores, input.value))}\n              </React.Fragment>\n            )}\n          </DualPaneMapperList>\n          <DualPaneMapperList\n            id=\"target_datastores\"\n            listTitle={multiProviderTargetLabel(targetProvider, 'storage')}\n            loading={isFetchingTargetDatastores}\n            counter={targetCounter}\n          >\n            {targetDatastores &&\n              targetDatastores.map(item => (\n                <DualPaneMapperListItem\n                  item={item}\n                  text={targetDatastoreInfo(item)}\n                  key={item.id}\n                  selected={selectedTargetDatastore && selectedTargetDatastore.id === item.id}\n                  handleClick={this.selectTargetDatastore}\n                  handleKeyPress={this.selectTargetDatastore}\n                />\n              ))}\n          </DualPaneMapperList>\n        </DualPaneMapper>\n        <MappingWizardTreeView\n          mappings={input.value}\n          selectNode={this.selectNode}\n          removeNode={this.removeNode}\n          removeAll={this.removeAll}\n          selectedNode={selectedNode}\n          loading={isFetchingSourceDatastores || isFetchingTargetDatastores || preLoadingMappings}\n        />\n      </div>\n    );\n  }\n}\n\nexport default DatastoresStepForm;\n\nDatastoresStepForm.propTypes = {\n  input: PropTypes.object,\n  selectedCluster: PropTypes.object,\n  selectedClusterMapping: PropTypes.object,\n  sourceDatastores: PropTypes.array,\n  targetDatastores: PropTypes.array,\n  isFetchingSourceDatastores: PropTypes.bool,\n  isFetchingTargetDatastores: PropTypes.bool,\n  targetProvider: PropTypes.string,\n  preLoadingMappings: PropTypes.bool\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Field, reduxForm } from 'redux-form';\nimport { length } from 'redux-form-validators';\nimport { noop } from 'patternfly-react';\n\nimport DatastoresStepForm from './components/DatastoresStepForm/DatastoresStepForm';\nimport { BootstrapSelect } from '../../../../../common/forms/BootstrapSelect';\nimport { getClusterOptions, updateMappings } from '../helpers';\nimport { FETCH_STORAGE_URLS } from './MappingWizardDatastoresStepConstants';\nimport { createDatastoresMappings } from './components/DatastoresStepForm/helpers';\n\nclass MappingWizardDatastoresStep extends React.Component {\n  state = {\n    selectedCluster: undefined,\n    selectedClusterMapping: null,\n    preLoadingMappings: false\n  };\n\n  constructor(props) {\n    super(props);\n\n    const { clusterMappings, pristine } = this.props;\n\n    const sourceClusters = clusterMappings.reduce(\n      (clusters, clusterMapping) => clusters.concat(clusterMapping.nodes),\n      []\n    );\n\n    const synchronousSetState = fn => {\n      this.state = { ...this.state, ...fn() };\n    };\n\n    if (sourceClusters.length === 1 || !pristine) {\n      this.selectSourceCluster(sourceClusters[0].id, synchronousSetState);\n    }\n  }\n\n  componentDidMount() {\n    const {\n      editingMapping,\n      targetProvider,\n      initialize,\n      initialized,\n      clusterMappings,\n      change,\n      mappingWizardDatastoresStepForm\n    } = this.props;\n\n    if (editingMapping && !initialized) {\n      this.setState({ preLoadingMappings: true }); // eslint-disable-line react/no-did-mount-set-state\n      createDatastoresMappings(editingMapping, targetProvider).then(datastoresMappings => {\n        initialize({ datastoresMappings: updateMappings(datastoresMappings, clusterMappings) });\n        this.setState({ preLoadingMappings: false });\n      });\n      return;\n    }\n\n    if (mappingWizardDatastoresStepForm && mappingWizardDatastoresStepForm.values) {\n      change(\n        'datastoresMappings',\n        updateMappings(mappingWizardDatastoresStepForm.values.datastoresMappings, clusterMappings)\n      );\n    }\n  }\n\n  componentWillReceiveProps(nextProps) {\n    const { showAlertAction, isRejectedSourceDatastores, isRejectedTargetDatastores } = this.props;\n\n    const { selectedCluster, selectedClusterMapping } = this.state;\n    if (isRejectedSourceDatastores !== nextProps.isRejectedSourceDatastores && nextProps.isRejectedSourceDatastores) {\n      const msg = sprintf(\n        __('Error retrieving cluster datastores: %s, ID: %s'),\n        selectedCluster.name,\n        selectedCluster.id\n      );\n      showAlertAction(msg);\n    } else if (\n      isRejectedTargetDatastores !== nextProps.isRejectedTargetDatastores &&\n      nextProps.isRejectedTargetDatastores &&\n      !isRejectedSourceDatastores\n    ) {\n      const msg = sprintf(\n        __('Error retrieving cluster datastores: %s, ID: %s'),\n        selectedClusterMapping.name,\n        selectedClusterMapping.id\n      );\n      showAlertAction(msg);\n    }\n  }\n\n  selectSourceCluster = (sourceClusterId, setState = this.setState) => {\n    // when dropdown selection occurs for source cluster, we go retrieve the datastores for that\n    // cluster\n    const {\n      fetchStoragesUrls,\n      fetchSourceDatastoresAction,\n      fetchTargetDatastoresAction,\n      clusterMappings,\n      targetProvider\n    } = this.props;\n\n    const selectedClusterMapping = clusterMappings.find(clusterMapping =>\n      clusterMapping.nodes.some(sourceCluster => sourceCluster.id === sourceClusterId)\n    );\n\n    const { nodes: sourceClusters, ...targetCluster } = selectedClusterMapping;\n\n    setState(() => ({\n      selectedCluster: sourceClusters.find(sourceCluster => sourceCluster.id === sourceClusterId),\n      selectedClusterMapping\n    }));\n\n    fetchSourceDatastoresAction(fetchStoragesUrls.source, sourceClusterId);\n    fetchTargetDatastoresAction(fetchStoragesUrls[targetProvider], targetCluster.id, targetProvider);\n  };\n\n  render() {\n    const {\n      clusterMappings,\n      isFetchingSourceDatastores,\n      isFetchingTargetDatastores,\n      // source/target datastores change depending on selection\n      sourceDatastores,\n      targetDatastores,\n      form,\n      showAlertAction,\n      targetProvider\n    } = this.props;\n\n    const { selectedCluster, selectedClusterMapping, preLoadingMappings } = this.state;\n\n    const clusterOptions = getClusterOptions(clusterMappings);\n\n    // first we render the dropdown selection for each source cluster in clusterMappings,\n    // then we call `selectSourceCluster` and go get that cluster's datastores on selection\n    return (\n      <div>\n        <Field\n          name=\"cluster_select\"\n          label={__('Select a source cluster whose datastores you want to map')}\n          data_live_search=\"true\"\n          component={BootstrapSelect}\n          options={clusterOptions}\n          option_key=\"id\"\n          option_value=\"name\"\n          onSelect={this.selectSourceCluster}\n          pre_selected_value={clusterOptions.length === 1 ? clusterOptions[0].id : ''}\n          choose_text={`<${__('Select a source cluster')}>`}\n          render_within_form=\"true\"\n          form_name={form}\n          inline_label\n          labelWidth={6}\n          controlWidth={4}\n        />\n        <Field\n          name=\"datastoresMappings\"\n          component={DatastoresStepForm}\n          sourceDatastores={sourceDatastores}\n          targetDatastores={targetDatastores}\n          selectedCluster={selectedCluster}\n          selectedClusterMapping={selectedClusterMapping}\n          isFetchingSourceDatastores={isFetchingSourceDatastores}\n          isFetchingTargetDatastores={isFetchingTargetDatastores}\n          validate={length({ min: 1 })}\n          showAlertAction={showAlertAction}\n          targetProvider={targetProvider}\n          preLoadingMappings={preLoadingMappings}\n        />\n      </div>\n    );\n  }\n}\n\nMappingWizardDatastoresStep.propTypes = {\n  clusterMappings: PropTypes.array,\n  editingMapping: PropTypes.object,\n  fetchStoragesUrls: PropTypes.object,\n  fetchSourceDatastoresAction: PropTypes.func,\n  fetchTargetDatastoresAction: PropTypes.func,\n  sourceDatastores: PropTypes.arrayOf(PropTypes.object),\n  targetDatastores: PropTypes.arrayOf(PropTypes.object),\n  isFetchingSourceDatastores: PropTypes.bool,\n  isRejectedSourceDatastores: PropTypes.bool,\n  isFetchingTargetDatastores: PropTypes.bool,\n  initialize: PropTypes.func,\n  initialized: PropTypes.bool,\n  isRejectedTargetDatastores: PropTypes.bool,\n  form: PropTypes.string,\n  pristine: PropTypes.bool,\n  showAlertAction: PropTypes.func,\n  targetProvider: PropTypes.string,\n  change: PropTypes.func,\n  mappingWizardDatastoresStepForm: PropTypes.object\n};\nMappingWizardDatastoresStep.defaultProps = {\n  clusterMappings: [],\n  fetchStoragesUrls: FETCH_STORAGE_URLS,\n  fetchSourceDatastoresAction: noop,\n  fetchTargetDatastoresAction: noop,\n  sourceDatastores: [],\n  targetDatastores: [],\n  isFetchingSourceDatastores: false,\n  isRejectedSourceDatastores: false,\n  isFetchingTargetDatastores: false,\n  isRejectedTargetDatastores: false,\n  form: '',\n  pristine: true,\n  showAlertAction: noop,\n  targetProvider: ''\n};\n\nexport default reduxForm({\n  form: 'mappingWizardDatastoresStep',\n  destroyOnUnmount: false\n})(MappingWizardDatastoresStep);\n","import Immutable from 'seamless-immutable';\n\nimport { FETCH_V2V_SOURCE_CLUSTERS, QUERY_V2V_PROVIDERS } from './MappingWizardClustersStepConstants';\nimport { V2V_MAPPING_WIZARD_EXITED } from '../../../../screens/MappingWizard/MappingWizardConstants';\n\nexport const initialState = Immutable({\n  sourceClusters: [],\n  isFetchingSourceClusters: false,\n  isRejectedSourceClusters: false,\n  errorSourceClusters: null,\n  targetClusters: [],\n  isFetchingTargetClusters: false,\n  isRejectedTargetClusters: false,\n  errorTargetClusters: null,\n  providers: [],\n  isQueryingProviders: false,\n  isRejectedQueryProviders: false,\n  errorQueryProviders: null\n});\n\nexport default (state = initialState, action) => {\n  switch (action.type) {\n    case `${FETCH_V2V_SOURCE_CLUSTERS}_PENDING`:\n      return state.set('isFetchingSourceClusters', true).set('isRejectedSourceClusters', false);\n    case `${FETCH_V2V_SOURCE_CLUSTERS}_FULFILLED`:\n      if (action.payload.data && action.payload.data.resources && action.payload.data.resources[0]) {\n        return state\n          .set('sourceClusters', action.payload.data.resources)\n          .set('isRejectedSourceClusters', false)\n          .set('isFetchingSourceClusters', false);\n      }\n      return state\n        .set('sourceClusters', [])\n        .set('isFetchingSourceClusters', false)\n        .set('isRejectedSourceClusters', false);\n    case `${FETCH_V2V_SOURCE_CLUSTERS}_REJECTED`:\n      return state\n        .set('errorSourceClusters', action.payload)\n        .set('isRejectedSourceClusters', true)\n        .set('isFetchingSourceClusters', false);\n\n    case `${QUERY_V2V_PROVIDERS}_PENDING`:\n      return state.set('isQueryingProviders', true).set('isRejectedQueryProviders', false);\n    case `${QUERY_V2V_PROVIDERS}_FULFILLED`:\n      return state\n        .set('providers', action.payload.data.results)\n        .set('isQueryingProviders', false)\n        .set('isRejectedQueryProviders', false)\n        .set('errorQueryProviders', null);\n    case `${QUERY_V2V_PROVIDERS}_REJECTED`:\n      return state\n        .set('errorQueryProviders', action.payload)\n        .set('isRejectedQueryProviders', true)\n        .set('isQueryingProviders', false);\n    case V2V_MAPPING_WIZARD_EXITED:\n      return initialState;\n    default:\n      return state;\n  }\n};\n","import URI from 'urijs';\nimport API from '../../../../../../../../common/API';\nimport { FETCH_V2V_SOURCE_CLUSTERS, QUERY_V2V_PROVIDERS } from './MappingWizardClustersStepConstants';\n\nexport { showAlertAction, hideAlertAction } from '../../MappingWizardActions';\n\nconst _getSourceClustersActionCreator = url => dispatch =>\n  dispatch({\n    type: FETCH_V2V_SOURCE_CLUSTERS,\n    payload: API.get(url)\n  });\n\nexport const fetchSourceClustersAction = url => {\n  const uri = new URI(url);\n  return _getSourceClustersActionCreator(uri.toString());\n};\n\n// ****************************************************************************\n// QUERY_V2V_PROVIDERS\n// ****************************************************************************\nconst _queryProvidersActionCreator = (url, providerIds) => dispatch =>\n  dispatch({\n    type: QUERY_V2V_PROVIDERS,\n    payload: API.post(url, {\n      action: 'query',\n      resources: providerIds.map(id => ({ id }))\n    })\n  });\n\nexport const queryProvidersAction = (url, providerIds) => {\n  const uri = new URI(url);\n  uri.addSearch({ attributes: 'authentications' });\n\n  return _queryProvidersActionCreator(uri.toString(), providerIds);\n};\n","export const getProviderIds = clusters => {\n  const providerIds = new Set();\n  clusters.forEach(cluster => providerIds.add(cluster.ems_id));\n  return [...providerIds];\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport cx from 'classnames';\n\nimport { Button, TreeView, Spinner } from 'patternfly-react';\n\nconst ClustersStepTreeView = ({ mappings, selectMapping, removeMapping, removeAll, selectedMapping, loading }) => (\n  <div className=\"treeview-container\">\n    <div className={cx('treeview-container--body', { loading })}>\n      <Spinner loading={loading}>\n        {mappings.length > 0 ? (\n          <TreeView nodes={mappings} selectNode={selectMapping} highlightOnSelect highlightOnHover />\n        ) : (\n          <div className=\"treeview__is-empty\">\n            <h3>{__('No mappings have been added yet')}</h3>\n          </div>\n        )}\n      </Spinner>\n    </div>\n    <div className=\"treeview-container--buttons\">\n      <Button disabled={mappings.length === 0 || !selectedMapping} onClick={removeMapping}>\n        {__('Remove Mapping')}\n      </Button>{' '}\n      <Button disabled={mappings.length === 0} onClick={removeAll}>\n        {__('Remove All')}\n      </Button>\n    </div>\n  </div>\n);\n\nClustersStepTreeView.propTypes = {\n  mappings: PropTypes.array,\n  selectMapping: PropTypes.func,\n  removeMapping: PropTypes.func,\n  removeAll: PropTypes.func,\n  selectedMapping: PropTypes.object,\n  loading: PropTypes.bool\n};\n\nexport default ClustersStepTreeView;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Icon } from 'patternfly-react';\n\nimport DualPaneMapper from '../../../DualPaneMapper/DualPaneMapper';\nimport DualPaneMapperList from '../../../DualPaneMapper/DualPaneMapperList';\nimport DualPaneMapperCount from '../../../DualPaneMapper/DualPaneMapperCount';\nimport DualPaneMapperListItem from '../../../DualPaneMapper/DualPaneMapperListItem';\nimport ClustersStepTreeView from '../ClustersStepTreeView';\nimport { createNewMapping, updateMapping, providerHasSshKeyPair } from './helpers';\nimport { sourceClustersFilter } from '../../MappingWizardClustersStepSelectors';\nimport { TARGET_WARNING_MESSAGES } from '../../MappingWizardClustersStepConstants';\nimport { OPENSTACK, RHV } from '../../../../MappingWizardConstants';\nimport { multiProviderTargetLabel } from '../../../helpers';\n\nclass ClustersStepForm extends React.Component {\n  state = {\n    selectedTargetCluster: null,\n    selectedSourceClusters: [],\n    selectedMapping: null\n  };\n\n  selectSourceCluster = sourceCluster => {\n    this.setState(prevState => {\n      const isAlreadySelected = prevState.selectedSourceClusters.some(cluster => cluster.id === sourceCluster.id);\n      if (isAlreadySelected) {\n        return {\n          selectedSourceClusters: prevState.selectedSourceClusters.filter(cluster => cluster.id !== sourceCluster.id)\n        };\n      }\n      return {\n        selectedSourceClusters: [...prevState.selectedSourceClusters, sourceCluster]\n      };\n    });\n  };\n\n  selectTargetCluster = targetCluster => {\n    this.setState(() => ({ selectedTargetCluster: targetCluster }));\n  };\n\n  addMapping = () => {\n    const {\n      input: { value: clustersStepMappings, onChange }\n    } = this.props;\n    const { selectedTargetCluster, selectedSourceClusters } = this.state;\n\n    const mappingExistsForSelectedTargetCluster = clustersStepMappings.some(\n      clustersStepMapping => clustersStepMapping.id === selectedTargetCluster.id\n    );\n\n    if (mappingExistsForSelectedTargetCluster) {\n      const updatedMappings = clustersStepMappings.map(clustersStepMapping =>\n        updateMapping(clustersStepMapping, selectedTargetCluster, selectedSourceClusters)\n      );\n\n      onChange(updatedMappings);\n    } else {\n      onChange([...clustersStepMappings, createNewMapping(selectedTargetCluster, selectedSourceClusters)]);\n    }\n\n    this.setState(() => ({\n      selectedTargetCluster: null,\n      selectedSourceClusters: []\n    }));\n  };\n\n  selectMapping = selectedMapping => {\n    const { input } = this.props;\n    input.onChange(\n      input.value.map(mapping => {\n        if (mapping.id === selectedMapping.id) {\n          return { ...mapping, selected: !mapping.selected };\n        } else if (mapping.id !== selectedMapping.id && mapping.selected) {\n          return { ...mapping, selected: false };\n        }\n        return mapping;\n      })\n    );\n    this.setState(() => ({ selectedMapping }));\n  };\n\n  removeMapping = () => {\n    const { input } = this.props;\n    this.setState(prevState => {\n      const clustersStepMappings = input.value;\n      input.onChange(\n        clustersStepMappings.filter(\n          targetClusterWithSourceClusters => !(targetClusterWithSourceClusters.id === prevState.selectedMapping.id)\n        )\n      );\n      return {\n        selectedMapping: null\n      };\n    });\n  };\n\n  removeAll = () => {\n    const { input } = this.props;\n    input.onChange([]);\n  };\n\n  noClustersFound = (clusters, loading) =>\n    !clusters.length &&\n    !loading && (\n      <div className=\"dual-pane-mapper-item\">\n        <Icon type=\"pf\" name=\"error-circle-o\" /> {__('No clusters found.')}\n      </div>\n    );\n\n  allClustersMapped = (sourceClusters, filteredClusters, loading) =>\n    !!sourceClusters.length &&\n    !filteredClusters.length &&\n    !loading && (\n      <div className=\"dual-pane-mapper-item\">\n        <Icon type=\"pf\" name=\"ok\" /> {__('All source clusters have been mapped.')}\n      </div>\n    );\n\n  render() {\n    const {\n      sourceClusters,\n      targetClusters,\n      isFetchingSourceClusters,\n      isFetchingTargetClusters,\n      input,\n      targetProvider,\n      rhvConversionHosts,\n      providers,\n      isQueryingProviders\n    } = this.props;\n\n    const { selectedTargetCluster, selectedSourceClusters, selectedMapping } = this.state;\n\n    const filteredSourceClusters = sourceClustersFilter(sourceClusters, input.value);\n\n    const sourceCounter = (\n      <DualPaneMapperCount selectedItems={selectedSourceClusters.length} totalItems={filteredSourceClusters.length} />\n    );\n\n    const targetCounter = <DualPaneMapperCount selectedItems={selectedTargetCluster ? 1 : 0} totalItems={1} />;\n\n    return (\n      <div className=\"dual-pane-mapper-form\">\n        <p style={{ marginLeft: -40 }}>\n          {__(\n            'Select source cluster(s) and a target cluster and click Add Mapping to add the mapping. Multiple mappings can be added.') // prettier-ignore\n          }\n        </p>\n        <DualPaneMapper\n          handleButtonClick={this.addMapping}\n          validMapping={!(selectedTargetCluster && (selectedSourceClusters && selectedSourceClusters.length > 0))}\n        >\n          {sourceClusters && (\n            <DualPaneMapperList\n              id=\"source_clusters\"\n              listTitle={__('Source Provider \\\\ Datacenter \\\\ Cluster')}\n              loading={isFetchingSourceClusters}\n              counter={sourceCounter}\n            >\n              {filteredSourceClusters.map(item => (\n                <DualPaneMapperListItem\n                  item={item}\n                  text={\n                    item.v_parent_datacenter\n                      ? `${item.ext_management_system.name} \\\\ ${item.v_parent_datacenter} \\\\ ${item.name}`\n                      : `${item.name}`\n                  }\n                  key={item.id}\n                  selected={\n                    selectedSourceClusters && selectedSourceClusters.some(sourceCluster => sourceCluster.id === item.id)\n                  }\n                  handleClick={this.selectSourceCluster}\n                  handleKeyPress={this.selectSourceCluster}\n                />\n              ))}\n              {this.noClustersFound(sourceClusters, isFetchingSourceClusters)}\n              {this.allClustersMapped(sourceClusters, filteredSourceClusters, isFetchingSourceClusters)}\n            </DualPaneMapperList>\n          )}\n          {targetClusters && (\n            <DualPaneMapperList\n              id=\"target_clusters\"\n              listTitle={multiProviderTargetLabel(targetProvider, 'cluster')}\n              loading={isFetchingTargetClusters}\n              counter={targetCounter}\n            >\n              {targetClusters.map(item => {\n                let showWarning;\n                if (targetProvider === RHV) {\n                  const conversionHostsInCluster = rhvConversionHosts.filter(\n                    ch => ch.resource.ems_cluster_id === item.id\n                  );\n                  showWarning = conversionHostsInCluster.length === 0;\n                } else if (targetProvider === OPENSTACK) {\n                  showWarning = providers.length && !isQueryingProviders && !providerHasSshKeyPair(item, providers);\n                }\n\n                return (\n                  <DualPaneMapperListItem\n                    item={item}\n                    text={\n                      item.v_parent_datacenter\n                        ? `${item.ext_management_system.name} \\\\ ${item.v_parent_datacenter} \\\\ ${item.name}`\n                        : `${item.ext_management_system.name} \\\\ ${item.name}`\n                    }\n                    key={item.id}\n                    selected={selectedTargetCluster && selectedTargetCluster.id === item.id}\n                    handleClick={this.selectTargetCluster}\n                    handleKeyPress={this.selectTargetCluster}\n                    warningMessage={showWarning ? TARGET_WARNING_MESSAGES[targetProvider] : ''}\n                  />\n                );\n              })}\n              {this.noClustersFound(targetClusters, isFetchingTargetClusters)}\n            </DualPaneMapperList>\n          )}\n        </DualPaneMapper>\n        {input.value && (\n          <ClustersStepTreeView\n            mappings={input.value}\n            selectMapping={this.selectMapping}\n            removeMapping={this.removeMapping}\n            removeAll={this.removeAll}\n            selectedMapping={selectedMapping}\n            loading={isFetchingTargetClusters || isFetchingSourceClusters}\n          />\n        )}\n      </div>\n    );\n  }\n}\n\nClustersStepForm.propTypes = {\n  input: PropTypes.object,\n  sourceClusters: PropTypes.arrayOf(PropTypes.object),\n  targetClusters: PropTypes.arrayOf(PropTypes.object),\n  isFetchingSourceClusters: PropTypes.bool,\n  isFetchingTargetClusters: PropTypes.bool,\n  targetProvider: PropTypes.string,\n  rhvConversionHosts: PropTypes.array,\n  providers: PropTypes.array,\n  isQueryingProviders: PropTypes.bool\n};\n\nexport default ClustersStepForm;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Button, noop } from 'patternfly-react';\nimport { Field, reduxForm } from 'redux-form';\nimport { length } from 'redux-form-validators';\n\nimport ClustersStepForm from './components/ClustersStepForm/ClustersStepForm';\nimport { QUERY_PROVIDERS_URL } from './MappingWizardClustersStepConstants';\nimport { FETCH_TARGET_COMPUTE_URLS } from '../../../../../../../../redux/common/targetResources/targetResourcesConstants';\nimport { getProviderIds } from './helpers';\nimport { OPENSTACK } from '../../MappingWizardConstants';\n\nclass MappingWizardClustersStep extends React.Component {\n  componentDidMount() {\n    const { targetProvider, ospConversionHosts, showAlertAction } = this.props;\n    this.fetchClusters();\n    if (targetProvider === OPENSTACK && ospConversionHosts.length === 0) {\n      showAlertAction(\n        __('No OpenStack conversion hosts are configured. You can continue to create an infrastructure mapping, but you must configure a conversion host before migration execution.'), // prettier-ignore\n        'warning'\n      );\n    }\n  }\n\n  componentWillUnmount() {\n    this.props.hideAlertAction();\n  }\n\n  fetchClusters = () => {\n    const {\n      fetchSourceClustersUrl,\n      fetchSourceClustersAction,\n      fetchTargetComputeUrls,\n      fetchTargetClustersAction,\n      targetProvider,\n      queryProvidersAction,\n      queryProvidersUrl\n    } = this.props;\n\n    fetchSourceClustersAction(fetchSourceClustersUrl);\n    fetchTargetClustersAction(fetchTargetComputeUrls[targetProvider]).then(result => {\n      const safeToProceed = result.value && result.value.data && result.value.data.resources.length > 0;\n      if (targetProvider === OPENSTACK && safeToProceed) {\n        queryProvidersAction(queryProvidersUrl, getProviderIds(result.value.data.resources));\n      }\n    });\n  };\n\n  render() {\n    const {\n      isFetchingSourceClusters,\n      sourceClusters,\n      isFetchingTargetClusters,\n      targetClusters,\n      isRejectedSourceClusters,\n      isRejectedTargetClusters,\n      targetProvider,\n      rhvConversionHosts,\n      providers,\n      isQueryingProviders\n    } = this.props;\n\n    if (isRejectedSourceClusters || isRejectedTargetClusters) {\n      return (\n        <div className=\"wizard-pf-complete blank-slate-pf\">\n          <div className=\"wizard-pf-success-icon\">\n            <span className=\"pficon pficon-error-circle-o\" />\n          </div>\n          <h3 className=\"blank-slate-pf-main-action\">{__('Error Retrieving Clusters')}</h3>\n          <p className=\"blank-slate-pf-secondary-action\">\n            {__(\"We're sorry, something went wrong. Please try again.\")}\n          </p>\n          <Button bsStyle=\"primary\" onClick={this.fetchClusters}>\n            {__('Retry')}\n          </Button>\n        </div>\n      );\n    }\n    return (\n      <Field\n        name=\"clusterMappings\"\n        component={ClustersStepForm}\n        sourceClusters={sourceClusters}\n        targetClusters={targetClusters}\n        validate={[length({ min: 1 })]}\n        isFetchingSourceClusters={isFetchingSourceClusters}\n        isFetchingTargetClusters={isFetchingTargetClusters}\n        targetProvider={targetProvider}\n        rhvConversionHosts={rhvConversionHosts}\n        providers={providers}\n        isQueryingProviders={isQueryingProviders}\n      />\n    );\n  }\n}\n\nMappingWizardClustersStep.propTypes = {\n  fetchSourceClustersUrl: PropTypes.string,\n  fetchSourceClustersAction: PropTypes.func,\n  fetchTargetComputeUrls: PropTypes.object,\n  fetchTargetClustersAction: PropTypes.func,\n  showAlertAction: PropTypes.func,\n  hideAlertAction: PropTypes.func,\n  sourceClusters: PropTypes.arrayOf(PropTypes.object),\n  targetClusters: PropTypes.arrayOf(PropTypes.object),\n  isFetchingSourceClusters: PropTypes.bool,\n  isFetchingTargetClusters: PropTypes.bool,\n  isRejectedSourceClusters: PropTypes.bool,\n  isRejectedTargetClusters: PropTypes.bool,\n  targetProvider: PropTypes.string,\n  rhvConversionHosts: PropTypes.array,\n  ospConversionHosts: PropTypes.array,\n  providers: PropTypes.array,\n  isQueryingProviders: PropTypes.bool,\n  queryProvidersAction: PropTypes.func,\n  queryProvidersUrl: PropTypes.string\n};\nMappingWizardClustersStep.defaultProps = {\n  fetchSourceClustersAction: noop,\n  fetchTargetClustersAction: noop,\n  isFetchingSourceClusters: true,\n  isFetchingTargetClusters: true,\n  isRejectedSourceClusters: false,\n  isRejectedTargetClusters: false,\n  targetProvider: '',\n  rhvConversionHosts: [],\n  ospConversionHosts: [],\n  fetchSourceClustersUrl:\n    '/api/clusters?expand=resources' +\n    '&attributes=ext_management_system.emstype,v_parent_datacenter,ext_management_system.name' +\n    '&filter[]=ext_management_system.emstype=vmwarews',\n  fetchTargetComputeUrls: FETCH_TARGET_COMPUTE_URLS,\n  queryProvidersUrl: QUERY_PROVIDERS_URL\n};\n\nexport default reduxForm({\n  form: 'mappingWizardClustersStep',\n  destroyOnUnmount: false\n})(MappingWizardClustersStep);\n","module.exports = function(module) {\n\tif (!module.webpackPolyfill) {\n\t\tmodule.deprecate = function() {};\n\t\tmodule.paths = [];\n\t\t// module.parent = undefined by default\n\t\tif (!module.children) module.children = [];\n\t\tObject.defineProperty(module, \"loaded\", {\n\t\t\tenumerable: true,\n\t\t\tget: function() {\n\t\t\t\treturn module.l;\n\t\t\t}\n\t\t});\n\t\tObject.defineProperty(module, \"id\", {\n\t\t\tenumerable: true,\n\t\t\tget: function() {\n\t\t\t\treturn module.i;\n\t\t\t}\n\t\t});\n\t\tmodule.webpackPolyfill = 1;\n\t}\n\treturn module;\n};\n","import { TRANSFORMATION_MAPPING_ITEM_DESTINATION_TYPES } from './MappingWizardConstants';\n\nexport const mappingUrlRegex = /\\/api\\/\\w{1,}\\/\\d{1,}/;\n\nexport const createTransformationMappings = (\n  mappingWizardGeneralStep,\n  mappingWizardClustersStep,\n  mappingWizardDatastoresStep,\n  mappingWizardNetworksStep\n) => {\n  const clusterTransformationMappings = mappingWizardClustersStep.values.clusterMappings.reduce(\n    (clusterTransformationsArray, targetClusterWithSourceClusters) => {\n      const destination = targetClusterWithSourceClusters.href.match(mappingUrlRegex)[0];\n      const transformations = targetClusterWithSourceClusters.nodes.reduce(\n        (clusterTransformations, sourceCluster) =>\n          clusterTransformations.concat({\n            source: sourceCluster.href.match(mappingUrlRegex)[0],\n            destination\n          }),\n        []\n      );\n      return clusterTransformationsArray.concat(transformations);\n    },\n    []\n  );\n\n  const datastoreTransformationMappings = mappingWizardDatastoresStep.values.datastoresMappings.reduce(\n    (datastoreTransformationsPerTargetCluster, targetClusterWithDatastoreMappings) => {\n      const datastoreTransformationsForTargetCluster = targetClusterWithDatastoreMappings.nodes.reduce(\n        (datastoreTransformationsPerDatastoreMapping, targetDatastoreWithSourceDatastores) => {\n          const datastoreTransformations = targetDatastoreWithSourceDatastores.nodes.reduce(\n            (transformations, sourceDatastore) =>\n              transformations.concat({\n                source: sourceDatastore.href.match(mappingUrlRegex)[0],\n                destination: targetDatastoreWithSourceDatastores.href.match(mappingUrlRegex)[0]\n              }),\n            []\n          );\n          return datastoreTransformationsPerDatastoreMapping.concat(datastoreTransformations);\n        },\n        []\n      );\n      return datastoreTransformationsPerTargetCluster.concat(datastoreTransformationsForTargetCluster);\n    },\n    []\n  );\n\n  const networkTransformationMappings = mappingWizardNetworksStep.values.networksMappings.reduce(\n    (networkTransformationsPerTargetCluster, targetClusterWithNetworkMappings) => {\n      const networkTransformationsForTargetCluster = targetClusterWithNetworkMappings.nodes.reduce(\n        (networkTransformationsPerNetworkMapping, targetNetworkWithSourceNetworks) => {\n          const networkTransformations = targetNetworkWithSourceNetworks.nodes.reduce(\n            (transformations, sourceNetwork) =>\n              transformations.concat({\n                source: sourceNetwork.href.match(mappingUrlRegex)[0],\n                destination: targetNetworkWithSourceNetworks.href.match(mappingUrlRegex)[0]\n              }),\n            []\n          );\n          return networkTransformationsPerNetworkMapping.concat(networkTransformations);\n        },\n        []\n      );\n      return networkTransformationsPerTargetCluster.concat(networkTransformationsForTargetCluster);\n    },\n    []\n  );\n\n  return {\n    name: mappingWizardGeneralStep.values.name,\n    description: mappingWizardGeneralStep.values.description,\n    state: 'draft',\n    transformation_mapping_items: [\n      ...clusterTransformationMappings,\n      ...datastoreTransformationMappings,\n      ...networkTransformationMappings\n    ]\n  };\n};\n\nexport const getMappedSourceClusters = clusterMappings =>\n  clusterMappings.reduce(\n    (sourceClusters, targetClusterWithSourceClusters) => sourceClusters.concat(targetClusterWithSourceClusters.nodes),\n    []\n  );\n\nexport const getSourceClustersWithMappings = mappings =>\n  mappings.reduce((idsPerTargetCluster, targetClusterWithMappings) => {\n    const idsForTargetCluster = targetClusterWithMappings.nodes.reduce(\n      (idsPerMapping, targetObjectWithSourceObjects) => {\n        const idsForSourceObjects = targetObjectWithSourceObjects.nodes.map(\n          sourceObject => sourceObject.sourceClusterId\n        );\n        return idsPerMapping.concat(Array.from(new Set(idsForSourceObjects)));\n      },\n      []\n    );\n    return idsPerTargetCluster.concat(Array.from(new Set(idsForTargetCluster)));\n  }, []);\n\nexport const groupClusterTransformationItemsByDestinationId = (transformationItems = []) =>\n  transformationItems.reduce(\n    (map, item) => ({\n      ...map,\n      [item.destination_id]: map[item.destination_id] ? [...map[item.destination_id], item.source_id] : [item.source_id]\n    }),\n    {}\n  );\n\nexport const getTransformationMappingItemsBySourceType = (type, transformation) =>\n  transformation.transformation_mapping_items.filter(item => item.source_type === type);\n\nexport const getTransformationMappingItemsByDestinationType = (type, transformation) =>\n  transformation.transformation_mapping_items.filter(item => item.destination_type === type);\n\nexport const determineTargetProvider = transformation =>\n  getTransformationMappingItemsByDestinationType(\n    TRANSFORMATION_MAPPING_ITEM_DESTINATION_TYPES.openstack.cluster,\n    transformation\n  ).length\n    ? 'openstack'\n    : 'rhevm';\n","import Immutable from 'seamless-immutable';\n\nimport { SET_V2V_EDITING_MAPPING, FETCH_V2V_CONVERSION_HOSTS } from './MappingWizardGeneralStepConstants';\nimport { V2V_MAPPING_WIZARD_EXITED } from '../../../../screens/MappingWizard/MappingWizardConstants';\n\nexport const initialState = Immutable({\n  editingMapping: null,\n  conversionHosts: [],\n  isFetchingConversionHosts: false,\n  isRejectedConversionHosts: false,\n  errorFetchingConversionHosts: null\n});\n\nexport default (state = initialState, action) => {\n  switch (action.type) {\n    case SET_V2V_EDITING_MAPPING:\n      return state.set('editingMapping', action.payload);\n\n    case `${FETCH_V2V_CONVERSION_HOSTS}_PENDING`:\n      return state\n        .set('isFetchingConversionHosts', true)\n        .set('isRejectedConversionHosts', false)\n        .set('errorFetchingConversionHosts', null);\n    case `${FETCH_V2V_CONVERSION_HOSTS}_FULFILLED`:\n      return state\n        .set('conversionHosts', action.payload.data.resources)\n        .set('isFetchingConversionHosts', false)\n        .set('isRejectedConversionHosts', false)\n        .set('errorFetchingConversionHosts', null);\n    case `${FETCH_V2V_CONVERSION_HOSTS}_REJECTED`:\n      return state\n        .set('isFetchingConversionHosts', false)\n        .set('isRejectedConversionHosts', true)\n        .set('errorFetchingConversionHosts', action.payload);\n\n    case V2V_MAPPING_WIZARD_EXITED:\n      return initialState;\n\n    default:\n      return state;\n  }\n};\n","import URI from 'urijs';\nimport API from '../../../../../../../../common/API';\nimport { SET_V2V_EDITING_MAPPING, FETCH_V2V_CONVERSION_HOSTS } from './MappingWizardGeneralStepConstants';\n\nexport const setEditingMappingAction = payload => ({\n  type: SET_V2V_EDITING_MAPPING,\n  payload\n});\n\nconst _getConversionHostsActionCreator = url => dispatch =>\n  dispatch({\n    type: FETCH_V2V_CONVERSION_HOSTS,\n    payload: API.get(url)\n  });\n\nexport const fetchConversionHostsAction = url => {\n  const uri = new URI(url);\n  return _getConversionHostsActionCreator(uri.toString());\n};\n","export const asyncValidate = (values, dispatch, props) =>\n  new Promise((resolve, reject) => {\n    const { name: newTransformationName } = values;\n    const { transformationMappings, editingMapping } = props;\n    const existingTransformationNames = transformationMappings.reduce(\n      (names, transformationMapping) => [...names, transformationMapping.name.trim()],\n      []\n    );\n    const duplicateName = existingTransformationNames.find(\n      existingTransformationName => existingTransformationName === newTransformationName.trim()\n    );\n    const duplicateIsEditingMappingName = editingMapping && duplicateName === editingMapping.name;\n\n    if (duplicateName && !duplicateIsEditingMappingName) {\n      props.showAlertAction(sprintf(__('Infrastructure mapping %s already exists'), newTransformationName));\n      const error = { name: __('Mapping name already exists. Enter a unique name.') };\n      reject(error);\n    } else {\n      resolve();\n    }\n  });\n\nexport const onChange = (values, dispatch, props) => {\n  if (props.valid) {\n    props.hideAlertAction();\n  }\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { reduxForm, Field, reset } from 'redux-form';\nimport { required } from 'redux-form-validators';\nimport { Form, noop } from 'patternfly-react';\n\nimport { FormField } from '../../../../../common/forms/FormField';\nimport { BootstrapSelect } from '../../../../../common/forms/BootstrapSelect';\nimport { validation } from '../../../../../../../../common/constants';\nimport { V2V_TARGET_PROVIDERS } from '../../MappingWizardConstants';\nimport { asyncValidate, onChange } from './helpers';\nimport { determineTargetProvider } from '../../helpers';\n\nclass MappingWizardGeneralStep extends React.Component {\n  componentDidMount = () => {\n    const {\n      editingMapping,\n      initialize,\n      initialized,\n      conversionHosts,\n      fetchConversionHostsAction,\n      fetchConversionHostsUrl\n    } = this.props;\n\n    if (editingMapping && !initialized) {\n      initialize({\n        name: editingMapping.name,\n        description: editingMapping.description,\n        targetProvider: determineTargetProvider(editingMapping)\n      });\n    }\n\n    if (conversionHosts.length === 0) {\n      fetchConversionHostsAction(fetchConversionHostsUrl);\n    }\n  };\n\n  onSelect = selection => {\n    const { targetProvider, dispatch, setEditingMappingAction } = this.props;\n    if (targetProvider !== selection) {\n      setEditingMappingAction(null);\n      dispatch(reset('mappingWizardClustersStep'));\n      dispatch(reset('mappingWizardDatastoresStep'));\n      dispatch(reset('mappingWizardNetworksStep'));\n    }\n  };\n\n  render() {\n    const { targetProvider, editingMapping } = this.props;\n\n    return (\n      <Form className=\"form-horizontal\">\n        <Field\n          name=\"name\"\n          label={__('Name')}\n          required\n          component={FormField}\n          type=\"text\"\n          help={validation.name.help}\n          maxLength={validation.name.maxLength}\n          maxLengthWarning={validation.name.maxLengthWarning}\n          validate={[\n            required({\n              msg: validation.name.requiredMessage\n            })\n          ]}\n        />\n        <Field\n          name=\"description\"\n          label={__('Description')}\n          component={FormField}\n          type=\"textarea\"\n          help={validation.description.help}\n          maxLength={validation.description.maxLength}\n          maxLengthWarning={validation.description.maxLengthWarning}\n        />\n        <Field\n          name=\"targetProvider\"\n          label={__('Target Provider')}\n          component={BootstrapSelect}\n          options={V2V_TARGET_PROVIDERS}\n          option_key=\"id\"\n          option_value=\"name\"\n          pre_selected_value={targetProvider || V2V_TARGET_PROVIDERS[0].id}\n          labelWidth={2}\n          controlWidth={9}\n          inline_label\n          onSelect={this.onSelect}\n          disabled={!!editingMapping}\n        />\n      </Form>\n    );\n  }\n}\n\nMappingWizardGeneralStep.propTypes = {\n  targetProvider: PropTypes.string,\n  dispatch: PropTypes.func,\n  editingMapping: PropTypes.object,\n  initialize: PropTypes.func,\n  initialized: PropTypes.bool,\n  setEditingMappingAction: PropTypes.func,\n  fetchConversionHostsAction: PropTypes.func,\n  fetchConversionHostsUrl: PropTypes.string,\n  conversionHosts: PropTypes.array\n};\n\nMappingWizardGeneralStep.defaultProps = {\n  targetProvider: '',\n  conversionHosts: [],\n  fetchConversionHostsUrl: '/api/conversion_hosts?attributes=resource&expand=resources',\n  dispatch: noop\n};\n\n// Decorate with reduxForm(). It will read the initialValues prop provided by connect()\nexport default reduxForm({\n  form: 'mappingWizardGeneralStep', // a unique identifier for this form\n  destroyOnUnmount: false, // preserve form data\n  asyncValidate,\n  asyncBlurFields: ['name'],\n  onChange\n  // forceUnregisterOnUnmount: true, // unregister fields on unmount\n})(MappingWizardGeneralStep);\n","import Immutable from 'seamless-immutable';\n\nimport {\n  V2V_SET_TRANSFORMATIONS_BODY,\n  V2V_SHOW_WARNING_MODAL,\n  V2V_HIDE_WARNING_MODAL,\n  V2V_SHOW_ALERT,\n  V2V_HIDE_ALERT\n} from './MappingWizardConstants';\n\nconst initialState = Immutable({\n  transformationsBody: {},\n  warningModalVisible: false,\n  alert: ''\n});\n\nexport default (state = initialState, action) => {\n  switch (action.type) {\n    case V2V_SET_TRANSFORMATIONS_BODY:\n      return state.set('transformationsBody', action.payload);\n    case V2V_SHOW_WARNING_MODAL:\n      return Immutable.merge(state, {\n        warningModalVisible: true,\n        sourceClustersWithoutMappings: action.payload\n      });\n    case V2V_HIDE_WARNING_MODAL:\n      return Immutable.merge(state, {\n        warningModalVisible: false\n      });\n    case V2V_SHOW_ALERT:\n      return Immutable.merge(state, action.payload);\n    case V2V_HIDE_ALERT:\n      return state.set('alertText', '');\n    default:\n      return state;\n  }\n};\n","export const mappingWizardFormFilter = form => ({\n  mappingWizardGeneralStep: form.mappingWizardGeneralStep,\n  mappingWizardClustersStep: form.mappingWizardClustersStep,\n  mappingWizardDatastoresStep: form.mappingWizardDatastoresStep,\n  mappingWizardNetworksStep: form.mappingWizardNetworksStep\n});\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { Button, Icon, Modal } from 'patternfly-react';\n\n// Note: This component is now redundant with ConfirmModal, but it still has some application-specific code so it stays for now.\n// TODO: Clean this up and turn it into a usage of ConfirmModal!\n\nconst WarningModal = ({\n  warningModalVisible,\n  hideWarningModalAction,\n  onFinalStep,\n  activeStepIndex,\n  nextStep,\n  sourceClustersWithoutMappings\n}) => {\n  const currentStep = activeStepIndex === 2 ? 'Datastores' : 'Networks';\n\n  return (\n    <Modal\n      show={warningModalVisible}\n      onHide={hideWarningModalAction}\n      onExited={hideWarningModalAction}\n      dialogClassName=\"warning-modal\"\n      backdropClassName=\"warning-modal\"\n      backdrop=\"static\"\n    >\n      <Modal.Header>\n        <button className=\"close\" onClick={hideWarningModalAction} aria-hidden=\"true\" aria-label=\"Close\">\n          <Icon type=\"pf\" name=\"close\" />\n        </button>\n        <Modal.Title>{sprintf(__('Unmapped %s'), currentStep)}</Modal.Title>\n      </Modal.Header>\n      <Modal.Body className=\"warning-modal-body\">\n        <div className=\"warning-modal-body--icon\">\n          <Icon type=\"pf\" name=\"warning-triangle-o\" />\n        </div>\n        <div className=\"warning-modal-body--list\">\n          <h3>{sprintf(__('The following source clusters have no mapped %s'), currentStep.toLowerCase())}</h3>\n          <ul>\n            {sourceClustersWithoutMappings &&\n              sourceClustersWithoutMappings.map(sourceCluster => <li key={sourceCluster.id}>{sourceCluster.name}</li>)}\n          </ul>\n        </div>\n      </Modal.Body>\n      <Modal.Footer className=\"warning-modal-footer\">\n        <Button bsStyle=\"default\" className=\"btn-cancel\" onClick={hideWarningModalAction}>\n          {__('Cancel')}\n        </Button>\n        <Button bsStyle=\"primary\" onClick={onFinalStep ? hideWarningModalAction : nextStep} autoFocus>\n          {onFinalStep ? __('Close') : activeStepIndex === 3 ? __('Create') : __('Continue')}\n        </Button>\n      </Modal.Footer>\n    </Modal>\n  );\n};\n\nWarningModal.propTypes = {\n  warningModalVisible: PropTypes.bool,\n  hideWarningModalAction: PropTypes.func,\n  onFinalStep: PropTypes.bool,\n  activeStepIndex: PropTypes.number,\n  nextStep: PropTypes.func,\n  sourceClustersWithoutMappings: PropTypes.array\n};\n\nexport default WarningModal;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { noop } from 'patternfly-react';\nimport ModalWizard from '../../../common/ModalWizard';\nimport componentRegistry from '../../../../../../components/componentRegistry';\n\nclass MappingWizardBody extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.mappingWizardGeneralStepContainer = componentRegistry.markup('MappingWizardGeneralStepContainer');\n    this.mappingWizardClustersStepContainer = componentRegistry.markup('MappingWizardClustersStepContainer');\n    this.mappingWizardDatastoresStepContainer = componentRegistry.markup('MappingWizardDatastoresStepContainer');\n    this.mappingWizardNetworksStepContainer = componentRegistry.markup('MappingWizardNetworksStepContainer');\n    this.mappingWizardResultsStepContainer = componentRegistry.markup('MappingWizardResultsStepContainer');\n  }\n  shouldComponentUpdate(nextProps, nextState) {\n    return JSON.stringify(this.props) !== JSON.stringify(nextProps);\n  }\n  componentWillUnmount() {\n    const { hideAlertAction } = this.props;\n    hideAlertAction();\n  }\n  render() {\n    return (\n      <ModalWizard.Body\n        {...this.props}\n        loadingTitle={__('Loading Infrastructure Mappings...')}\n        loadingMessage={__('This may take a minute.')}\n        stepButtonsDisabled\n        steps={[\n          {\n            title: __('General'),\n            render: () => this.mappingWizardGeneralStepContainer,\n            disableGoto: !this.props.mappingWizardGeneralStep.values\n          },\n          {\n            title: __('Map Compute'),\n            render: () => this.mappingWizardClustersStepContainer,\n            disableGoto: !this.props.mappingWizardClustersStep.values\n          },\n          {\n            title: __('Map Storage'),\n            render: () => this.mappingWizardDatastoresStepContainer,\n            disableGoto: !this.props.mappingWizardDatastoresStep.values\n          },\n          {\n            title: __('Map Networks'),\n            render: () => this.mappingWizardNetworksStepContainer,\n            disableGoto: !this.props.mappingWizardNetworksStep.values\n          },\n          {\n            title: __('Results'),\n            render: () => this.mappingWizardResultsStepContainer,\n            disableGoto: true\n          }\n        ]}\n      />\n    );\n  }\n}\n\nMappingWizardBody.propTypes = {\n  loaded: PropTypes.bool,\n  activeStepIndex: PropTypes.number,\n  activeStep: PropTypes.string,\n  goToStep: PropTypes.func,\n  disableNextStep: PropTypes.bool,\n  transformationsBody: PropTypes.object,\n  mappingWizardGeneralStep: PropTypes.object,\n  mappingWizardClustersStep: PropTypes.object,\n  mappingWizardDatastoresStep: PropTypes.object,\n  mappingWizardNetworksStep: PropTypes.object,\n  hideAlertAction: PropTypes.func\n};\n\nMappingWizardBody.defaultProps = {\n  loaded: false,\n  activeStepIndex: 0,\n  activeStep: '1',\n  goToStep: noop,\n  disableNextStep: true,\n  transformationsBody: {},\n  mappingWizardGeneralStep: {},\n  mappingWizardClustersStep: {},\n  mappingWizardDatastoresStep: {},\n  mappingWizardNetworksStep: {},\n  hideAlertAction: noop\n};\n\nexport default MappingWizardBody;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { noop, Button, Icon, Wizard } from 'patternfly-react';\nimport { createTransformationMappings, getMappedSourceClusters, getSourceClustersWithMappings } from './helpers';\nimport MappingWizardBody from './MappingWizardBody';\nimport WarningModal from './components/WarningModal/WarningModal';\n\nconst mappingWizardSteps = [\n  'mappingWizardGeneralStep',\n  'mappingWizardClustersStep',\n  'mappingWizardDatastoresStep',\n  'mappingWizardNetworksStep',\n  'mappingWizardResultsStep'\n];\n\nclass MappingWizard extends React.Component {\n  state = { activeStepIndex: 0 };\n\n  prevStep = () => {\n    const { activeStepIndex } = this.state;\n    this.setState({ activeStepIndex: Math.max(activeStepIndex - 1, 0) });\n  };\n\n  nextStep = () => {\n    const { activeStepIndex } = this.state;\n    const {\n      mappingWizardGeneralStep,\n      mappingWizardClustersStep,\n      mappingWizardDatastoresStep,\n      mappingWizardNetworksStep,\n      setTransformationsBodyAction,\n      showWarningModalAction,\n      hideWarningModalAction,\n      warningModalVisible,\n      showAlertAction,\n      hideAlertAction\n    } = this.props;\n\n    if (activeStepIndex === 0) {\n      if (mappingWizardGeneralStep.asyncErrors) {\n        showAlertAction(sprintf(__('Infrastructure mapping %s already exists'), mappingWizardGeneralStep.values.name));\n      } else {\n        hideAlertAction();\n        this.setState({\n          activeStepIndex: Math.min(activeStepIndex + 1, mappingWizardSteps.length - 1)\n        });\n      }\n    } else if (activeStepIndex === 2 && !warningModalVisible) {\n      const { clusterMappings } = mappingWizardClustersStep.values;\n      const { datastoresMappings } = mappingWizardDatastoresStep.values;\n\n      const sourceClustersWithoutDatastoresMappings = getMappedSourceClusters(clusterMappings).filter(\n        sourceCluster => !getSourceClustersWithMappings(datastoresMappings).includes(sourceCluster.id)\n      );\n\n      if (sourceClustersWithoutDatastoresMappings.length > 0) {\n        showWarningModalAction(sourceClustersWithoutDatastoresMappings);\n      } else {\n        this.setState({\n          activeStepIndex: Math.min(activeStepIndex + 1, mappingWizardSteps.length - 1)\n        });\n      }\n    } else if (activeStepIndex === 3 && !warningModalVisible) {\n      const { clusterMappings } = mappingWizardClustersStep.values;\n      const { networksMappings } = mappingWizardNetworksStep.values;\n\n      const sourceClustersWithoutNetworksMappings = getMappedSourceClusters(clusterMappings).filter(\n        sourceCluster => !getSourceClustersWithMappings(networksMappings).includes(sourceCluster.id)\n      );\n\n      if (sourceClustersWithoutNetworksMappings.length > 0) {\n        showWarningModalAction(sourceClustersWithoutNetworksMappings);\n      } else {\n        const transformationsBody = createTransformationMappings(\n          mappingWizardGeneralStep,\n          mappingWizardClustersStep,\n          mappingWizardDatastoresStep,\n          mappingWizardNetworksStep\n        );\n        setTransformationsBodyAction(transformationsBody);\n        this.setState({\n          activeStepIndex: Math.min(activeStepIndex + 1, mappingWizardSteps.length - 1)\n        });\n      }\n    } else {\n      // Either we are not on the datastores or networks step, or we are clicking\n      // the continue button in the warning modal\n      hideWarningModalAction();\n      if (activeStepIndex === 3) {\n        const transformationsBody = createTransformationMappings(\n          mappingWizardGeneralStep,\n          mappingWizardClustersStep,\n          mappingWizardDatastoresStep,\n          mappingWizardNetworksStep\n        );\n        setTransformationsBodyAction(transformationsBody);\n      }\n      this.setState({\n        activeStepIndex: Math.min(activeStepIndex + 1, mappingWizardSteps.length - 1)\n      });\n    }\n  };\n\n  goToStep = activeStepIndex => {\n    const { activeStepIndex: currentStep } = this.state;\n\n    if (currentStep === 2 && activeStepIndex === 3) {\n      this.nextStep();\n    } else {\n      this.setState(() => ({ activeStepIndex }));\n    }\n  };\n\n  render() {\n    const {\n      hideMappingWizard,\n      hideMappingWizardAction,\n      mappingWizardExitedAction,\n      hideWarningModalAction,\n      warningModalVisible,\n      sourceClustersWithoutMappings,\n      mappingWizardGeneralStep,\n      mappingWizardClustersStep,\n      mappingWizardDatastoresStep,\n      mappingWizardNetworksStep,\n      alertText,\n      alertType,\n      hideAlertAction,\n      editingMapping\n    } = this.props;\n\n    const { activeStepIndex, transformationsBody } = this.state;\n    const activeStep = (activeStepIndex + 1).toString();\n    const onFirstStep = activeStepIndex === 0;\n    const onFinalStep = activeStepIndex === mappingWizardSteps.length - 1;\n\n    const currentStepProp = !onFinalStep && mappingWizardSteps[activeStepIndex];\n    const currentStepForm = !onFinalStep && this.props[currentStepProp];\n    const disableNextStep = !onFinalStep && (!!currentStepForm.syncErrors || !!currentStepForm.asyncErrors);\n\n    return (\n      <Wizard\n        show={!hideMappingWizard}\n        onClose={() => {\n          hideMappingWizardAction(onFinalStep);\n        }}\n        onExited={mappingWizardExitedAction}\n        backdrop=\"static\"\n      >\n        <Wizard.Header\n          onClose={() => {\n            hideMappingWizardAction(onFinalStep);\n          }}\n          title={!editingMapping ? __('Create Infrastructure Mapping') : __('Edit Infrastructure Mapping')}\n        />\n\n        <Wizard.Body>\n          <MappingWizardBody\n            loaded\n            activeStepIndex={activeStepIndex}\n            activeStep={activeStep}\n            goToStep={this.goToStep}\n            disableNextStep={disableNextStep}\n            transformationsBody={transformationsBody}\n            mappingWizardGeneralStep={mappingWizardGeneralStep}\n            mappingWizardClustersStep={mappingWizardClustersStep}\n            mappingWizardDatastoresStep={mappingWizardDatastoresStep}\n            mappingWizardNetworksStep={mappingWizardNetworksStep}\n            alertText={alertText}\n            alertType={alertType}\n            hideAlertAction={hideAlertAction}\n          />\n        </Wizard.Body>\n        <Wizard.Footer>\n          <Button\n            bsStyle=\"default\"\n            className=\"btn-cancel\"\n            onClick={() => {\n              hideMappingWizardAction(onFinalStep);\n            }}\n            disabled={onFinalStep}\n          >\n            {__('Cancel')}\n          </Button>\n\n          <Button bsStyle=\"default\" onClick={this.prevStep} disabled={onFirstStep || onFinalStep}>\n            <Icon type=\"fa\" name=\"angle-left\" />\n            {__('Back')}\n          </Button>\n          <Button\n            bsStyle=\"primary\"\n            onClick={onFinalStep ? () => hideMappingWizardAction(onFinalStep) : this.nextStep}\n            disabled={disableNextStep}\n          >\n            {onFinalStep\n              ? __('Close')\n              : activeStepIndex === 3\n                ? editingMapping\n                  ? __('Save')\n                  : __('Create')\n                : __('Next')}\n            {!onFinalStep && <Icon type=\"fa\" name=\"angle-right\" />}\n          </Button>\n        </Wizard.Footer>\n        <WarningModal\n          warningModalVisible={warningModalVisible}\n          hideWarningModalAction={hideWarningModalAction}\n          onFinalStep={onFinalStep}\n          activeStepIndex={activeStepIndex}\n          nextStep={this.nextStep}\n          sourceClustersWithoutMappings={sourceClustersWithoutMappings}\n        />\n      </Wizard>\n    );\n  }\n}\nMappingWizard.propTypes = {\n  hideMappingWizard: PropTypes.bool,\n  hideMappingWizardAction: PropTypes.func,\n  mappingWizardExitedAction: PropTypes.func,\n  mappingWizardGeneralStep: PropTypes.object,\n  mappingWizardClustersStep: PropTypes.object,\n  mappingWizardDatastoresStep: PropTypes.object,\n  mappingWizardNetworksStep: PropTypes.object,\n  setTransformationsBodyAction: PropTypes.func,\n  showWarningModalAction: PropTypes.func,\n  hideWarningModalAction: PropTypes.func,\n  warningModalVisible: PropTypes.bool,\n  sourceClustersWithoutMappings: PropTypes.array,\n  alertText: PropTypes.string,\n  alertType: PropTypes.string,\n  showAlertAction: PropTypes.func,\n  hideAlertAction: PropTypes.func,\n  editingMapping: PropTypes.object\n};\nMappingWizard.defaultProps = {\n  hideMappingWizard: true,\n  hideMappingWizardAction: noop,\n  mappingWizardExitedAction: noop,\n  mappingWizardGeneralStep: {},\n  mappingWizardClustersStep: {},\n  mappingWizardDatastoresStep: {},\n  mappingWizardNetworksStep: {},\n  setTransformationsBodyAction: noop,\n  hideAlertAction: noop\n};\nexport default MappingWizard;\n","export const addAssociatedPlansCount = mappings =>\n  mappings.map(mapping => {\n    mapping.associatedPlansCount = mapping.service_templates && mapping.service_templates.length;\n    return mapping;\n  });\n","export const FETCH_V2V_PLAN_REQUEST = 'FETCH_V2V_PLAN_REQUEST';\nexport const FETCH_V2V_PLAN = 'FETCH_V2V_PLAN';\nexport const FETCH_V2V_ALL_REQUESTS_WITH_TASKS_FOR_PLAN = 'FETCH_V2V_ALL_REQUESTS_WITH_TASKS_FOR_PLAN';\nexport const QUERY_V2V_PLAN_VMS = 'QUERY_V2V_PLAN_VMS';\nexport const RESET_PLAN_STATE = 'RESET_PLAN_STATE';\nexport const FETCH_V2V_MIGRATION_TASK_LOG = 'FETCH_V2V_MIGRATION_TASK_LOG';\nexport const DOWNLOAD_LOG_CLICKED = 'DOWNLOAD_LOG_CLICKED';\nexport const DOWNLOAD_LOG_COMPLETED = 'DOWNLOAD_LOG_COMPLETED';\nexport const FETCH_V2V_ANSIBLE_PLAYBOOK_TEMPLATE = 'FETCH_V2V_ANSIBLE_PLAYBOOK_TEMPLATE';\nexport const FETCH_V2V_ORCHESTRATION_STACK = 'FETCH_V2V_ORCHESTRATION_STACK';\nexport const CANCEL_V2V_PLAN_REQUEST_TASKS = 'CANCEL_V2V_PLAN_REQUEST_TASKS';\nexport const REMOVE_TASKS_SELECTED_FOR_CANCELLATION = 'REMOVE_TASKS_SELECTED_FOR_CANCELLATION';\nexport const UPDATE_TASKS_SELECTED_FOR_CANCELLATION = 'UPDATE_TASKS_SELECTED_FOR_CANCELLATION';\nexport const DELETE_ALL_TASKS_SELECTED_FOR_CANCELLATION = 'DELETE_ALL_TASKS_SELECTED_FOR_CANCELLATION';\nexport const ADD_TASKS_TO_MARKED_FOR_CANCELLATION = 'ADD_TASKS_TO_MARKED_FOR_CANCELLATION';\nexport const ADD_TASK_TO_NOTIFICATION_SENT_LIST = 'ADD_TASK_TO_NOTIFICATION_SENT_LIST';\nexport const FETCH_V2V_REQUEST_TASK = 'FETCH_V2V_REQUEST_TASK';\nexport const FETCH_V2V_CONVERSION_HOST = 'FETCH_V2V_CONVERSION_HOST';\n\nexport const REQUEST_TASKS_URL = '/api/request_tasks';\n\nexport const STATUS_MESSAGE_KEYS = {\n  ACQUIRE_TRANSFORMATION_HOST: 'Acquire Transformation Host',\n  ASSESS_MIGRATION: 'Assess Migration',\n  AUTOMATION_STARTING: 'Automation Starting',\n  COLLAPSE_SNAPSHOTS: 'Collapse Snapshots',\n  CONVERT_DISKS: 'Convert disks',\n  FAILED: 'Failed',\n  SOURCE_MIGRATED: 'Mark source as migrated',\n  MIGRATING: 'Migrating',\n  MIGRATION_COMPLETE: 'Migration complete',\n  POST_MIGRATION: 'Post-migration',\n  POWER_OFF: 'Power off',\n  POWER_ON: 'Power-on VM',\n  PRE_MIGRATION: 'Pre-migration',\n  PRE_TRANSFORM_VM: 'Pre Transform VM',\n  REFRESH_INVENTORY: 'Refresh inventory',\n  RESTORE_VM_ATTRIBUTES: 'Restore VM Attributes',\n  RUN_PRE_MIGRATION_PLAYBOOK: 'Run pre-migration playbook',\n  RUN_POST_MIGRATION_PLAYBOOK: 'Run post-migration playbook',\n  TRANSFORM_VM: 'Transform VM',\n  UPDATE_DESCRIPTION: 'Update description of VM',\n  VALIDATING: 'Validating',\n  VM_TRANSFORMATIONS_COMPLETED: 'VM Transformations completed',\n  VM_MIGRATED: 'Virtual machine migrated',\n  VM_TRANSFORMATIONS_FAILED: 'VM Transformations failed'\n};\n\nconst STATUS_MESSAGES = {};\nSTATUS_MESSAGES[STATUS_MESSAGE_KEYS.ACQUIRE_TRANSFORMATION_HOST] = __('Acquire Transformation Host');\nSTATUS_MESSAGES[STATUS_MESSAGE_KEYS.ASSESS_MIGRATION] = __('Assess Migration');\nSTATUS_MESSAGES[STATUS_MESSAGE_KEYS.AUTOMATION_STARTING] = __('Automation Starting');\nSTATUS_MESSAGES[STATUS_MESSAGE_KEYS.COLLAPSE_SNAPSHOTS] = __('Collapse Snapshots');\nSTATUS_MESSAGES[STATUS_MESSAGE_KEYS.CONVERT_DISKS] = __('Convert disks');\nSTATUS_MESSAGES[STATUS_MESSAGE_KEYS.FAILED] = __('Failed');\nSTATUS_MESSAGES[STATUS_MESSAGE_KEYS.SOURCE_MIGRATED] = __('Mark source as migrated');\nSTATUS_MESSAGES[STATUS_MESSAGE_KEYS.MIGRATING] = __('Migrating');\nSTATUS_MESSAGES[STATUS_MESSAGE_KEYS.MIGRATION_COMPLETE] = __('Migration complete');\nSTATUS_MESSAGES[STATUS_MESSAGE_KEYS.POST_MIGRATION] = __('Postmigration');\nSTATUS_MESSAGES[STATUS_MESSAGE_KEYS.POWER_OFF] = __('Power off');\nSTATUS_MESSAGES[STATUS_MESSAGE_KEYS.POWER_ON] = __('Power-on VM');\nSTATUS_MESSAGES[STATUS_MESSAGE_KEYS.PRE_MIGRATION] = __('Premigration');\nSTATUS_MESSAGES[STATUS_MESSAGE_KEYS.PRE_TRANSFORM_VM] = __('Premigrate VM');\nSTATUS_MESSAGES[STATUS_MESSAGE_KEYS.REFRESH_INVENTORY] = __('Refresh inventory');\nSTATUS_MESSAGES[STATUS_MESSAGE_KEYS.RESTORE_VM_ATTRIBUTES] = __('Restore VM Attributes');\nSTATUS_MESSAGES[STATUS_MESSAGE_KEYS.RUN_PRE_MIGRATION_PLAYBOOK] = __('Run premigration playbook');\nSTATUS_MESSAGES[STATUS_MESSAGE_KEYS.RUN_POST_MIGRATION_PLAYBOOK] = __('Run postmigration playbook');\nSTATUS_MESSAGES[STATUS_MESSAGE_KEYS.TRANSFORM_VM] = __('Migrate VM');\nSTATUS_MESSAGES[STATUS_MESSAGE_KEYS.UPDATE_DESCRIPTION] = __('Update description of VM');\nSTATUS_MESSAGES[STATUS_MESSAGE_KEYS.VALIDATING] = __('Validating');\nSTATUS_MESSAGES[STATUS_MESSAGE_KEYS.VM_TRANSFORMATIONS_COMPLETED] = __('VM migrations completed');\nSTATUS_MESSAGES[STATUS_MESSAGE_KEYS.VM_MIGRATED] = __('Virtual machine migrated');\nSTATUS_MESSAGES[STATUS_MESSAGE_KEYS.VM_TRANSFORMATIONS_FAILED] = __('VM migrations failed');\nSTATUS_MESSAGES[STATUS_MESSAGE_KEYS.CANCELLED] = __('VM cancelled');\n\nexport { STATUS_MESSAGES as V2V_MIGRATION_STATUS_MESSAGES };\n","import { array, string, object } from 'yup';\n\nexport const networksSchema = array()\n  .of(\n    object().shape({\n      href: string().required(),\n      id: string().required(),\n      switch_id: string().required(),\n      name: string().required(),\n      uid_ems: string().required()\n    })\n  )\n  .nullable();\n","import { array, string, object } from 'yup';\n\nexport const datastoresSchema = array()\n  .of(\n    object().shape({\n      href: string().required(),\n      id: string().required()\n    })\n  )\n  .nullable();\n","import { array, string, object } from 'yup';\n\nexport const clustersSchema = array()\n  .of(\n    object().shape({\n      href: string().required(),\n      id: string().required(),\n      ems_id: string().required(),\n      uid_ems: string().required(),\n      ext_management_system: object()\n        .shape({\n          emstype: string().required(),\n          name: string().required()\n        })\n        .required(),\n      v_parent_datacenter: string().nullable()\n    })\n  )\n  .nullable();\n","import { validateSchema } from '../../../../data/schemaHelpers';\nimport { clustersSchema } from '../../../../data/models/clusters';\nimport { datastoresSchema } from '../../../../data/models/datastores';\nimport { mappingsSchema } from '../../../../data/models/transformationMappings';\nimport { networksSchema } from '../../../../data/models/networks';\n\nexport const validateClusters = clusters => {\n  validateSchema(clustersSchema, clusters);\n};\n\nexport const validateDatastores = datastores => {\n  validateSchema(datastoresSchema, datastores);\n};\n\nexport const validateNetworks = networks => {\n  validateSchema(networksSchema, networks);\n};\n\nexport const validateMappings = mappings => {\n  validateSchema(mappingsSchema, mappings);\n};\n","import Immutable from 'seamless-immutable';\n\nimport { validateClusters, validateDatastores, validateNetworks, validateMappings } from './MappingsValidators';\n\nimport {\n  DELETE_V2V_INFRASTRUCTURE_MAPPING,\n  FETCH_V2V_CLOUD_NETWORKS,\n  FETCH_V2V_CLOUD_TENANTS,\n  FETCH_V2V_CLOUD_VOLUME_TYPES,\n  FETCH_V2V_CLUSTERS,\n  FETCH_V2V_DATASTORES,\n  FETCH_V2V_NETWORKS,\n  FETCH_V2V_TRANSFORMATION_MAPPINGS,\n  HIDE_V2V_DELETE_CONFIRMATION_MODAL,\n  OPEN_V2V_MAPPING_WIZARD_ON_MOUNT,\n  SET_V2V_MAPPING_TO_DELETE,\n  SHOW_V2V_DELETE_CONFIRMATION_MODAL,\n  YES_TO_DELETE_AND_HIDE_DELETE_CONFIRMATION_MODAL\n} from './MappingsConstants';\n\nimport {\n  V2V_SHOW_MAPPING_WIZARD,\n  V2V_HIDE_MAPPING_WIZARD,\n  V2V_MAPPING_WIZARD_EXITED\n} from '../Mappings/screens/MappingWizard/MappingWizardConstants';\n\nimport { CONTINUE_TO_PLAN } from '../Overview/OverviewConstants';\nimport { addAssociatedPlansCount } from './helpers';\n\nexport const initialState = Immutable({\n  cloudNetworks: [],\n  cloudTenants: [],\n  cloudVolumeTypes: [],\n  clusters: [],\n  datastores: [],\n  deleteInfrastructureMappingResponse: null,\n  errorCloudNetworks: null,\n  errorCloudTenants: null,\n  errorCloudVolumeTypes: null,\n  errorClusters: null,\n  errorDatastores: null,\n  errorDeleteInfrastructureMapping: null,\n  errorNetworks: null,\n  errorTransformationMappings: null,\n  hideMappingWizard: true,\n  isDeletingInfrastructureMapping: false,\n  isFetchingCloudNetworks: false,\n  isFetchingCloudTenants: false,\n  isFetchingCloudVolumeTypes: false,\n  isFetchingClusters: false,\n  isFetchingDatastores: false,\n  isFetchingNetworks: false,\n  isFetchingTransformationMappings: false,\n  isRejectedCloudNetworks: false,\n  isRejectedCloudTenants: false,\n  isRejectedCloudVolumeTypes: false,\n  isRejectedClusters: false,\n  isRejectedDatastores: false,\n  isRejectedInfrastructureMapping: false,\n  isRejectedNetworks: false,\n  isRejectedTransformationMappings: false,\n  mappingToDelete: null,\n  mappingWizardVisible: false,\n  networks: [],\n  openMappingWizardOnMount: false,\n  showDeleteConfirmationModal: false,\n  transformationMappings: [],\n  yesToDeleteInfrastructureMapping: false\n});\n\nexport default (state = initialState, action) => {\n  switch (action.type) {\n    case CONTINUE_TO_PLAN:\n      return state.set('hideMappingWizard', true);\n    case `${DELETE_V2V_INFRASTRUCTURE_MAPPING}_PENDING`:\n      return state\n        .set('yesToDeleteInfrastructureMapping', false)\n        .set('isDeletingInfrastructureMapping', action.payload);\n    case `${DELETE_V2V_INFRASTRUCTURE_MAPPING}_FULFILLED`:\n      return state\n        .set('deleteInfrastructureMappingResponse', action.payload.data)\n        .set('isDeletingInfrastructureMapping', null)\n        .set('isRejectedInfrastructureMapping', false)\n        .set('errorDeleteInfrastructureMapping', null);\n    case `${DELETE_V2V_INFRASTRUCTURE_MAPPING}_REJECTED`:\n      return state\n        .set('errorDeleteInfrastructureMapping', action.payload)\n        .set('isRejectedInfrastructureMapping', true)\n        .set('isDeletingInfrastructureMapping', null);\n\n    case `${FETCH_V2V_CLOUD_NETWORKS}_PENDING`:\n      return state.set('isFetchingCloudNetworks', true).set('isRejectedCloudNetworks', false);\n    case `${FETCH_V2V_CLOUD_NETWORKS}_FULFILLED`:\n      return state\n        .set('cloudNetworks', action.payload.data.resources)\n        .set('isFetchingCloudNetworks', false)\n        .set('isRejectedCloudNetworks', false)\n        .set('errorCloudNetworks', null);\n    case `${FETCH_V2V_CLOUD_NETWORKS}_REJECTED`:\n      return state\n        .set('errorCloudNetworks', action.payload)\n        .set('isRejectedCloudNetworks', true)\n        .set('isFetchingCloudNetworks', false);\n\n    case `${FETCH_V2V_CLOUD_TENANTS}_PENDING`:\n      return state.set('isFetchingCloudTenants', true).set('isRejectedCloudTenants', false);\n    case `${FETCH_V2V_CLOUD_TENANTS}_FULFILLED`:\n      return state\n        .set('cloudTenants', action.payload.data.resources)\n        .set('isFetchingCloudTenants', false)\n        .set('isRejectedCloudTenants', false)\n        .set('errorCloudTenants', null);\n    case `${FETCH_V2V_CLOUD_TENANTS}_REJECTED`:\n      return state\n        .set('errorCloudTenants', action.payload)\n        .set('isRejectedCloudTenants', true)\n        .set('isFetchingCloudTenants', false);\n\n    case `${FETCH_V2V_CLOUD_VOLUME_TYPES}_PENDING`:\n      return state.set('isFetchingCloudVolumeTypes', true).set('isRejectedCloudVolumeTypes', false);\n    case `${FETCH_V2V_CLOUD_VOLUME_TYPES}_FULFILLED`:\n      return state\n        .set('cloudVolumeTypes', action.payload.data.resources)\n        .set('isFetchingCloudVolumeTypes', false)\n        .set('isRejectedCloudVolumeTypes', false)\n        .set('errorCloudVolumeTypes', null);\n    case `${FETCH_V2V_CLOUD_VOLUME_TYPES}_REJECTED`:\n      return state\n        .set('errorCloudVolumeTypes', action.payload)\n        .set('isRejectedCloudVolumeTypes', true)\n        .set('isFetchingCloudVolumeTypes', false);\n\n    case `${FETCH_V2V_CLUSTERS}_PENDING`:\n      return state.set('isFetchingClusters', true).set('isRejectedClusters', false);\n    case `${FETCH_V2V_CLUSTERS}_FULFILLED`:\n      validateClusters(action.payload.data.resources);\n      return state\n        .set('clusters', action.payload.data.resources)\n        .set('isFetchingClusters', false)\n        .set('isRejectedClusters', false)\n        .set('errorClusters', null);\n    case `${FETCH_V2V_CLUSTERS}_REJECTED`:\n      return state\n        .set('errorClusters', action.payload)\n        .set('isRejectedClusters', true)\n        .set('isFetchingClusters', false);\n\n    case `${FETCH_V2V_DATASTORES}_PENDING`:\n      return state.set('isFetchingDatastores', true).set('isRejectedDatastores', false);\n    case `${FETCH_V2V_DATASTORES}_FULFILLED`:\n      validateDatastores(action.payload.data.resources);\n      return state\n        .set('datastores', action.payload.data.resources)\n        .set('isFetchingDatastores', false)\n        .set('isRejectedDatastores', false)\n        .set('errorDatastores', null);\n    case `${FETCH_V2V_DATASTORES}_REJECTED`:\n      return state\n        .set('errorDatastores', action.payload)\n        .set('isRejectedDatastores', true)\n        .set('isFetchingDatastores', false);\n\n    case `${FETCH_V2V_NETWORKS}_PENDING`:\n      return state.set('isFetchingNetworks', true).set('isRejectedNetworks', false);\n    case `${FETCH_V2V_NETWORKS}_FULFILLED`:\n      validateNetworks(action.payload.data.resources);\n      return state\n        .set('networks', action.payload.data.resources)\n        .set('isFetchingNetworks', false)\n        .set('isRejectedNetworks', false)\n        .set('errorNetworks', null);\n    case `${FETCH_V2V_NETWORKS}_REJECTED`:\n      return state\n        .set('errorNetworks', action.payload)\n        .set('isRejectedNetworks', true)\n        .set('isFetchingNetworks', false);\n\n    case `${FETCH_V2V_TRANSFORMATION_MAPPINGS}_PENDING`:\n      return state.set('isFetchingTransformationMappings', true).set('isRejectedTransformationMappings', false);\n    case `${FETCH_V2V_TRANSFORMATION_MAPPINGS}_FULFILLED`:\n      validateMappings(action.payload.data.resources);\n      return state\n        .set('transformationMappings', addAssociatedPlansCount(action.payload.data.resources))\n        .set('isRejectedTransformationMappings', false)\n        .set('isFetchingTransformationMappings', false)\n        .set('isContinuingToPlan', false);\n    case `${FETCH_V2V_TRANSFORMATION_MAPPINGS}_REJECTED`:\n      return state\n        .set('errorTransformationMappings', action.payload)\n        .set('isRejectedTransformationMappings', true)\n        .set('isFetchingTransformationMappings', false);\n\n    case HIDE_V2V_DELETE_CONFIRMATION_MODAL:\n      return state.set('yesToDeleteInfrastructureMapping', false).set('showDeleteConfirmationModal', action.payload);\n\n    case OPEN_V2V_MAPPING_WIZARD_ON_MOUNT:\n      return state.set('openMappingWizardOnMount', true);\n\n    case SET_V2V_MAPPING_TO_DELETE:\n      return state.set('mappingToDelete', action.payload);\n\n    case SHOW_V2V_DELETE_CONFIRMATION_MODAL:\n      return state.set('showDeleteConfirmationModal', true);\n\n    case YES_TO_DELETE_AND_HIDE_DELETE_CONFIRMATION_MODAL:\n      return state.set('yesToDeleteInfrastructureMapping', true).set('showDeleteConfirmationModal', false);\n\n    case V2V_HIDE_MAPPING_WIZARD: {\n      return state.set('hideMappingWizard', true);\n    }\n\n    case V2V_MAPPING_WIZARD_EXITED:\n      return state.set('mappingWizardVisible', false).set('openMappingWizardOnMount', false);\n\n    case V2V_SHOW_MAPPING_WIZARD:\n      return Immutable.merge(state, { mappingWizardVisible: true, hideMappingWizard: false });\n\n    default:\n      return state;\n  }\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst MappingTarget = ({ children, ...props }) => <div className=\"infra-mapping-item-target\">{children}</div>;\nMappingTarget.propTypes = {\n  children: PropTypes.node\n};\nexport default MappingTarget;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst MappingSource = ({ children, ...props }) => (\n  <div className=\"infra-mapping-source-container\">\n    <div className=\"infra-mapping-item-source\">{children}</div>\n    <div className=\"arrow-wrapper\">\n      <div className=\"arrow-stem\" />\n      <div className=\"arrow-head\" />\n    </div>\n  </div>\n);\nMappingSource.propTypes = {\n  children: PropTypes.node\n};\nexport default MappingSource;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Button, Modal, Icon } from 'patternfly-react';\n\nconst unUsedMappingInPlans = (mappingToDelete, notStartedTransformationPlans, finishedWithErrorTransformationPlans) => {\n  const planNames = [];\n\n  const plansWithMappingToBeDeleted = notStartedTransformationPlans.filter(\n    plan => plan.options.config_info.transformation_mapping_id === mappingToDelete.id\n  );\n  plansWithMappingToBeDeleted.map(plan => planNames.push({ name: plan.name, id: plan.id }));\n\n  const plansWithErrorWithMappingToBeDeleted = finishedWithErrorTransformationPlans.filter(\n    plan => plan.options.config_info.transformation_mapping_id === mappingToDelete.id\n  );\n  plansWithErrorWithMappingToBeDeleted.map(plan => planNames.push({ name: plan.name, id: plan.id }));\n\n  if (planNames.length > 0) {\n    const deleteMessageAboutUnMigratedVMs = (\n      <div>\n        <h4>\n          {__('The infrastructure mapping is associated with migration plans that include unmigrated VMs. Deleting the mapping will prevent you from migrating the VMs in these plans:') // prettier-ignore\n          }\n        </h4>\n      </div>\n    );\n\n    const deleteMessageAboutPlansUsingMapping = (\n      <div className=\"warning-modal-body-enable-scrollbar\">\n        <strong>\n          {planNames.map(plan => (\n            <ul key={plan.id}>{plan.name}</ul>\n          ))}\n        </strong>\n      </div>\n    );\n    return (\n      <div>\n        {deleteMessageAboutUnMigratedVMs}\n        {deleteMessageAboutPlansUsingMapping}\n      </div>\n    );\n  }\n  return '';\n};\n\nconst displayDeleteMessage = mappingToDelete => {\n  const mappingNameStyled = `<strong>${mappingToDelete.name}</strong>`;\n  const regularDeleteMessage = sprintf(\n    __('Are you sure you want to delete the infrastructure mapping %s ?'),\n    mappingNameStyled\n  );\n  return <div dangerouslySetInnerHTML={{ __html: regularDeleteMessage }} />;\n};\n\nconst DeleteInfrastructureMappingConfirmationModal = ({\n  showDeleteConfirmationModal,\n  hideDeleteConfirmationModalAction,\n  mappingToDelete,\n  yesToDeleteInfrastructureMappingAction,\n  notStartedTransformationPlans,\n  finishedWithErrorTransformationPlans\n}) => (\n  <Modal show={showDeleteConfirmationModal} onHide={hideDeleteConfirmationModalAction} backdrop=\"static\">\n    <Modal.Header>\n      <Modal.CloseButton onClick={hideDeleteConfirmationModalAction} />\n      <Modal.Title>{__('Delete Infrastructure Mapping')}</Modal.Title>\n    </Modal.Header>\n    <Modal.Body className=\"warning-modal-body\">\n      <div className=\"warning-modal-body--icon\">\n        <Icon type=\"pf\" name=\"delete\" />\n      </div>\n      <div className=\"warning-modal-body--list\">\n        <h4>\n          {mappingToDelete &&\n            unUsedMappingInPlans(mappingToDelete, notStartedTransformationPlans, finishedWithErrorTransformationPlans)}\n        </h4>\n        <h4>{mappingToDelete && displayDeleteMessage(mappingToDelete)}</h4>\n      </div>\n    </Modal.Body>\n    <Modal.Footer>\n      <Button bsStyle=\"default\" className=\"btn-cancel\" onClick={hideDeleteConfirmationModalAction}>\n        {__('Cancel')}\n      </Button>\n      <Button bsStyle=\"primary\" onClick={yesToDeleteInfrastructureMappingAction}>\n        {__('Delete')}\n      </Button>\n    </Modal.Footer>\n  </Modal>\n);\n\nDeleteInfrastructureMappingConfirmationModal.propTypes = {\n  showDeleteConfirmationModal: PropTypes.bool,\n  hideDeleteConfirmationModalAction: PropTypes.func,\n  mappingToDelete: PropTypes.object,\n  yesToDeleteInfrastructureMappingAction: PropTypes.func,\n  notStartedTransformationPlans: PropTypes.array,\n  finishedWithErrorTransformationPlans: PropTypes.array\n};\n\nexport default DeleteInfrastructureMappingConfirmationModal;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Immutable from 'seamless-immutable';\nimport EllipsisWithTooltip from 'react-ellipsis-with-tooltip';\nimport { Button, Icon, ListView, Grid, Toolbar, OverlayTrigger, Popover } from 'patternfly-react';\n\nimport { formatDateTime } from '../../../../../../components/dates/MomentDate';\nimport ShowWizardEmptyState from '../../../common/ShowWizardEmptyState/ShowWizardEmptyState';\nimport DeleteInfrastructureMappingConfirmationModal from '../DeleteInfrastructureMappingConfirmationModal/DeleteInfrastructureMappingConfirmationModal';\nimport MappingSource from './components/MappingSource';\nimport MappingTarget from './components/MappingTarget';\nimport { mapInfrastructureMappings, getHeaderText } from './helpers';\nimport ListViewToolbar from '../../../common/ListViewToolbar/ListViewToolbar';\nimport { INFRA_MAPPINGS_FILTER_TYPES, INFRA_MAPPINGS_SORT_FIELDS } from './InfrastructureMappingsListConstants';\n\nclass InfrastructureMappingsList extends React.Component {\n  state = { transformationMappingsMutable: [] };\n\n  static getDerivedStateFromProps(nextProps, prevState) {\n    if (nextProps.transformationMappings === prevState.transformationMappings) {\n      return null;\n    }\n    const mutableMappings = Immutable.asMutable(nextProps.transformationMappings, { deep: true });\n\n    mutableMappings.forEach((mapping, i) => {\n      const existing = prevState.transformationMappingsMutable.find(m => m.id === mapping.id);\n      if (existing) {\n        mapping.expanded = existing.expanded || false;\n        mapping.expandType = existing.expandType || null;\n      }\n    });\n    return {\n      transformationMappings: nextProps.transformationMappings,\n      transformationMappingsMutable: mutableMappings\n    };\n  }\n\n  clusterName = cluster =>\n    cluster.v_parent_datacenter\n      ? `${cluster.ext_management_system.name} \\\\ ${cluster.v_parent_datacenter} \\\\ ${cluster.name}`\n      : `${cluster.ext_management_system.name} \\\\ ${cluster.name}`;\n\n  toggleExpand = (mapping, key) => {\n    if (key === mapping.expandType) {\n      mapping.expanded = !mapping.expanded;\n    } else {\n      mapping.expanded = true;\n      mapping.expandType = key;\n    }\n    this.setState({\n      transformationMappingsMutable: this.state.transformationMappingsMutable\n    });\n  };\n\n  closeExpand = mapping => {\n    mapping.expanded = false;\n    this.setState({\n      transformationMappingsMutable: this.state.transformationMappingsMutable\n    });\n  };\n\n  renderEmptyState = () => (\n    <ShowWizardEmptyState\n      showWizardAction={this.props.createInfraMappingClick}\n      description={__('Create an infrastructure mapping to later be used by a migration plan')}\n      buttonText={__('Create Infrastructure Mapping')}\n      className=\"mappings\"\n    />\n  );\n\n  renderHeadingWithLink = () => (\n    <div className=\"heading-with-link-container\">\n      <div className=\"pull-left\">\n        <h3>{__('Infrastructure Mappings')}</h3>\n      </div>\n      <div className=\"pull-right\">\n        {/** todo: create IconLink in patternfly-react * */}\n        <a\n          href=\"#\"\n          onClick={e => {\n            e.preventDefault();\n            this.props.createInfraMappingClick();\n          }}\n        >\n          <Icon type=\"pf\" name=\"add-circle-o\" />\n          {` `}\n          {__('Create Infrastructure Mapping')}\n        </a>\n      </div>\n    </div>\n  );\n\n  renderMappingErrorsPopoverIcon = (mapping, resourceType) => (\n    <OverlayTrigger\n      rootClose\n      trigger=\"click\"\n      placement=\"top\"\n      overlay={\n        <Popover id={`error-popover-${mapping.name}-${resourceType}`} style={{ width: 400 }}>\n          {__('Missing elements may indicate a change in your provider configuration. If you change the source or target provider, delete this mapping and create a new one.') /* prettier-ignore */}\n        </Popover>\n      }\n    >\n      <Icon type=\"pf\" name=\"error-circle-o\" />\n    </OverlayTrigger>\n  );\n\n  render() {\n    const {\n      clusters,\n      networks,\n      datastores,\n      cloudTenants,\n      cloudNetworks,\n      cloudVolumeTypes,\n      error,\n      inProgressRequestsTransformationMappings,\n      showDeleteConfirmationModalAction,\n      setMappingToDeleteAction,\n      showDeleteConfirmationModal,\n      hideDeleteConfirmationModalAction,\n      mappingToDelete,\n      yesToDeleteInfrastructureMappingAction,\n      notStartedTransformationPlans,\n      finishedWithErrorTransformationPlans,\n      showMappingWizardEditModeAction\n    } = this.props;\n\n    const { transformationMappingsMutable } = this.state;\n\n    return (\n      <React.Fragment>\n        <ListViewToolbar\n          filterTypes={INFRA_MAPPINGS_FILTER_TYPES}\n          sortFields={INFRA_MAPPINGS_SORT_FIELDS}\n          listItems={transformationMappingsMutable}\n        >\n          {({\n            filteredSortedPaginatedListItems,\n            renderFilterControls,\n            renderSortControls,\n            renderActiveFilters,\n            renderPaginationRow\n          }) =>\n            error ? (\n              <ShowWizardEmptyState\n                title={__('Error loading mappings.')}\n                iconType=\"pf\"\n                iconName=\"error-circle-o\"\n                className=\"mappings\"\n                description={\n                  <React.Fragment>\n                    <span>{__('There was an error loading Infrastructure Mappings.')}</span>\n                    <br />\n                    <span>{__('Please refresh and try again.')}</span>\n                  </React.Fragment>\n                }\n              />\n            ) : transformationMappingsMutable.length > 0 ? (\n              <React.Fragment>\n                <Grid.Row>\n                  <Toolbar>\n                    {renderFilterControls()}\n                    {renderSortControls()}\n                    {!error && (\n                      <Toolbar.RightContent>\n                        <a\n                          href=\"#\"\n                          onClick={e => {\n                            e.preventDefault();\n                            this.props.createInfraMappingClick();\n                          }}\n                        >\n                          <Icon type=\"pf\" name=\"add-circle-o\" />\n                          {` `}\n                          {__('Create Infrastructure Mapping')}\n                        </a>\n                      </Toolbar.RightContent>\n                    )}\n                    {renderActiveFilters(filteredSortedPaginatedListItems)}\n                  </Toolbar>\n                </Grid.Row>\n                <div style={{ overflow: 'auto', paddingBottom: 300, height: '100%' }}>\n                  <ListView style={{ marginTop: 10 }} className=\"infra-mappings-list-view\" id=\"infrastructure_mappings\">\n                    {filteredSortedPaginatedListItems.items.map(mapping => {\n                      const associatedPlansCount = mapping.service_templates && mapping.service_templates.length;\n\n                      const { targetClusters, targetDatastores, targetNetworks } = mapInfrastructureMappings(\n                        mapping.transformation_mapping_items,\n                        clusters,\n                        datastores,\n                        networks,\n                        cloudTenants,\n                        cloudNetworks,\n                        cloudVolumeTypes\n                      );\n                      const headerText = getHeaderText(mapping.transformation_mapping_items);\n\n                      let sourceClusterCount = 0;\n                      let targetClusterCount = 0;\n\n                      if (targetClusters) {\n                        Object.keys(targetClusters).forEach(key => {\n                          targetClusterCount += 1;\n                          sourceClusterCount += targetClusters[key].sourceClusters.length;\n                        });\n                      }\n\n                      let sourceDatastoreCount = 0;\n                      let targetDatastoreCount = 0;\n                      if (targetDatastores) {\n                        Object.keys(targetDatastores).forEach(key => {\n                          targetDatastoreCount += 1;\n                          sourceDatastoreCount += targetDatastores[key].sources.length;\n                        });\n                      }\n\n                      let sourceLanCount = 0;\n                      let targetLanCount = 0;\n                      if (targetNetworks) {\n                        Object.keys(targetNetworks).forEach(key => {\n                          targetLanCount += 1;\n                          sourceLanCount += targetNetworks[key].sources.length;\n                        });\n                      }\n\n                      return (\n                        <ListView.Item\n                          key={mapping.id}\n                          heading={mapping.name}\n                          description={\n                            <EllipsisWithTooltip id={mapping.description}>\n                              <small>{mapping.description}</small>\n                            </EllipsisWithTooltip>\n                          }\n                          stacked\n                          compoundExpand\n                          compoundExpanded={mapping.expanded}\n                          onCloseCompoundExpand={() => this.closeExpand(mapping)}\n                          additionalInfo={[\n                            <ListView.InfoItem key={0} id=\"networks\">\n                              {targetNetworks === null ? (\n                                <div className=\"list-view-pf-expand\">\n                                  {this.renderMappingErrorsPopoverIcon(mapping, 'networks')}\n                                  {__('Networks missing')}\n                                </div>\n                              ) : (\n                                <ListView.Expand\n                                  expanded={mapping.expanded && mapping.expandType === 0}\n                                  toggleExpanded={() => {\n                                    this.toggleExpand(mapping, 0);\n                                  }}\n                                >\n                                  <Icon type=\"pf\" name=\"network\" />\n                                  <div className=\"mappings-expand-label-group\">\n                                    <div className=\"mappings-expand-label\">\n                                      {sprintf(\n                                        n__('%d Source Network', '%d Source Networks', sourceLanCount),\n                                        sourceLanCount\n                                      )}\n                                    </div>\n                                    <div className=\"mappings-expand-label\">\n                                      {sprintf(\n                                        n__('%d Target Network', '%d Target Networks', targetLanCount),\n                                        targetLanCount\n                                      )}\n                                    </div>\n                                  </div>\n                                </ListView.Expand>\n                              )}\n                            </ListView.InfoItem>,\n                            <ListView.InfoItem key={1} id=\"datastores\">\n                              {targetDatastores === null ? (\n                                <div className=\"list-view-pf-expand\">\n                                  {this.renderMappingErrorsPopoverIcon(mapping, 'datastores')}\n                                  {__('Datastores missing')}\n                                </div>\n                              ) : (\n                                <ListView.Expand\n                                  expanded={mapping.expanded && mapping.expandType === 1}\n                                  toggleExpanded={() => {\n                                    this.toggleExpand(mapping, 1);\n                                  }}\n                                >\n                                  <Icon type=\"fa\" name=\"database\" />\n                                  <div className=\"mappings-expand-label-group\">\n                                    <div className=\"mappings-expand-label\">\n                                      {sprintf(\n                                        n__('%d Source Datastore', '%d Source Datastores', sourceDatastoreCount),\n                                        sourceDatastoreCount\n                                      )}\n                                    </div>\n                                    <div className=\"mappings-expand-label\">\n                                      {sprintf(\n                                        n__('%d Target Datastore', '%d Target Datastores', targetDatastoreCount),\n                                        targetDatastoreCount\n                                      )}\n                                    </div>\n                                  </div>\n                                </ListView.Expand>\n                              )}\n                            </ListView.InfoItem>,\n                            <ListView.InfoItem key={2} id=\"clusters\">\n                              {targetClusters === null ? (\n                                <div className=\"list-view-pf-expand\">\n                                  {this.renderMappingErrorsPopoverIcon(mapping, 'clusters')}\n                                  {__('Clusters missing')}\n                                </div>\n                              ) : (\n                                <ListView.Expand\n                                  expanded={mapping.expanded && mapping.expandType === 2}\n                                  toggleExpanded={() => {\n                                    this.toggleExpand(mapping, 2);\n                                  }}\n                                >\n                                  <Icon type=\"pf\" name=\"cluster\" />\n                                  <div className=\"mappings-expand-label-group\">\n                                    <div className=\"mappings-expand-label\">\n                                      {sprintf(\n                                        n__('%d Source Cluster', '%d Source Clusters', sourceClusterCount),\n                                        sourceClusterCount\n                                      )}\n                                    </div>\n                                    <div className=\"mappings-expand-label\">\n                                      {sprintf(\n                                        n__('%d Target Cluster', '%d Target Clusters', targetClusterCount),\n                                        targetClusterCount\n                                      )}\n                                    </div>\n                                  </div>\n                                </ListView.Expand>\n                              )}\n                            </ListView.InfoItem>,\n                            associatedPlansCount ? (\n                              <ListView.InfoItem key={3} id=\"associated-plans\">\n                                <ListView.Expand\n                                  expanded={mapping.expanded && mapping.expandType === 3}\n                                  toggleExpanded={() => {\n                                    this.toggleExpand(mapping, 3);\n                                  }}\n                                >\n                                  <Icon type=\"pf\" name=\"catalog\" />\n                                  {sprintf(\n                                    n__('%d Associated Plan', '%d Associated Plans', associatedPlansCount),\n                                    associatedPlansCount\n                                  )}\n                                </ListView.Expand>\n                              </ListView.InfoItem>\n                            ) : null\n                          ]}\n                          actions={\n                            <div>\n                              <Button\n                                bsStyle=\"link\"\n                                disabled={\n                                  !!associatedPlansCount || !targetClusters || !targetDatastores || !targetNetworks\n                                }\n                                onClick={e => {\n                                  e.stopPropagation();\n                                  showMappingWizardEditModeAction(mapping);\n                                }}\n                              >\n                                <Icon type=\"pf\" name=\"edit\" />\n                              </Button>\n                              {inProgressRequestsTransformationMappings.find(\n                                inProgressRequestsTransformationMapping =>\n                                  inProgressRequestsTransformationMapping === mapping.id\n                              ) ? (\n                                <Button bsStyle=\"link\" disabled>\n                                  <Icon type=\"pf\" className=\"delete-infra-mapping-icon-disabled\" name=\"delete\" />\n                                </Button>\n                              ) : (\n                                <Button\n                                  bsStyle=\"link\"\n                                  onClick={e => {\n                                    e.stopPropagation();\n                                    setMappingToDeleteAction(mapping);\n                                    showDeleteConfirmationModalAction();\n                                  }}\n                                >\n                                  <Icon type=\"pf\" name=\"delete\" />\n                                </Button>\n                              )}\n                            </div>\n                          }\n                        >\n                          <Grid.Row>\n                            <Grid.Col sm={12}>\n                              {mapping.expandType === 0 && (\n                                <React.Fragment>\n                                  <Grid.Row className=\"infra-mapping-header-row\">\n                                    <Grid.Col xs={6}>\n                                      <b>{headerText.sourceNetworks}</b>\n                                    </Grid.Col>\n                                    <Grid.Col xs={6}>\n                                      <b>{headerText.targetNetworks}</b>\n                                    </Grid.Col>\n                                  </Grid.Row>\n\n                                  {Object.keys(targetNetworks).map(key => {\n                                    const mappedTarget = targetNetworks[key];\n                                    return (\n                                      <Grid.Row key={key} className=\"infra-mapping-networks-row\">\n                                        <Grid.Col xs={6}>\n                                          <MappingSource>\n                                            {mappedTarget.sources.map(source => (\n                                              <div key={source.sourceNetwork.id}>\n                                                {this.clusterName(source.sourceCluster)}\n                                                {` \\\\ ${source.sourceNetwork.name} `}\n                                              </div>\n                                            ))}\n                                          </MappingSource>\n                                        </Grid.Col>\n                                        <Grid.Col xs={6}>\n                                          <MappingTarget>\n                                            {this.clusterName(mappedTarget.target.targetCluster)}\n                                            {` \\\\ ${mappedTarget.target.targetNetwork.name} `}\n                                          </MappingTarget>\n                                        </Grid.Col>\n                                      </Grid.Row>\n                                    );\n                                  })}\n                                </React.Fragment>\n                              )}\n                              {mapping.expandType === 1 && (\n                                <React.Fragment>\n                                  <Grid.Row className=\"infra-mapping-header-row\">\n                                    <Grid.Col xs={6}>\n                                      <b>{headerText.sourceDatastores}</b>\n                                    </Grid.Col>\n                                    <Grid.Col xs={6}>\n                                      <b>{headerText.targetDatastores}</b>\n                                    </Grid.Col>\n                                  </Grid.Row>\n\n                                  {Object.keys(targetDatastores).map(key => {\n                                    const mappedTarget = targetDatastores[key];\n                                    return (\n                                      <Grid.Row key={key} className=\"infra-mapping-datastores-row\">\n                                        <Grid.Col xs={6}>\n                                          <MappingSource>\n                                            {mappedTarget.sources.map(source => (\n                                              <div key={source.sourceDatastore.id}>\n                                                {this.clusterName(source.sourceCluster)}\n                                                {` \\\\ ${source.sourceDatastore.name} `}\n                                              </div>\n                                            ))}\n                                          </MappingSource>\n                                        </Grid.Col>\n                                        <Grid.Col xs={6}>\n                                          <MappingTarget>\n                                            {this.clusterName(mappedTarget.target.targetCluster)}\n                                            {` \\\\ ${mappedTarget.target.targetDatastore.name} `}\n                                          </MappingTarget>\n                                        </Grid.Col>\n                                      </Grid.Row>\n                                    );\n                                  })}\n                                </React.Fragment>\n                              )}\n                              {mapping.expandType === 2 && (\n                                <React.Fragment>\n                                  <Grid.Row className=\"infra-mapping-header-row\">\n                                    <Grid.Col xs={6}>\n                                      <b>{headerText.sourceClusters}</b>\n                                    </Grid.Col>\n                                    <Grid.Col xs={6}>\n                                      <b>{headerText.targetClusters}</b>\n                                    </Grid.Col>\n                                  </Grid.Row>\n\n                                  {Object.keys(targetClusters).map(key => {\n                                    const target = targetClusters[key];\n                                    return (\n                                      <Grid.Row key={key} className=\"infra-mapping-clusters-row\">\n                                        <Grid.Col xs={6}>\n                                          <MappingSource>\n                                            {target.sourceClusters.map(source => (\n                                              <div key={source.id}>{this.clusterName(source)}</div>\n                                            ))}\n                                          </MappingSource>\n                                        </Grid.Col>\n                                        <Grid.Col xs={6}>\n                                          <MappingTarget>{this.clusterName(target.targetCluster)}</MappingTarget>\n                                        </Grid.Col>\n                                      </Grid.Row>\n                                    );\n                                  })}\n                                </React.Fragment>\n                              )}\n                              {mapping.expandType === 3 && (\n                                <React.Fragment>\n                                  <Grid.Row>\n                                    <Grid.Col xs={12}>\n                                      <b>{__('Created:')}</b>\n                                      {` `}\n                                      {formatDateTime(mapping.created_at)}\n                                    </Grid.Col>\n                                  </Grid.Row>\n                                  <br />\n                                  <Grid.Row>\n                                    <Grid.Col xs={12}>\n                                      <b>{__('Associated Plans')}</b>\n                                    </Grid.Col>\n                                  </Grid.Row>\n                                  <Grid.Row className=\"infra-mapping-associated-plans-row\">\n                                    <Grid.Col xs={12}>\n                                      {' '}\n                                      {associatedPlansCount > 0\n                                        ? mapping.service_templates.map((plan, id) => (\n                                            <div key={id}>\n                                              <span>{plan.name}</span>\n                                              {` `}\n                                              {` `}\n                                            </div>\n                                          ))\n                                        : null}\n                                    </Grid.Col>\n                                  </Grid.Row>\n                                </React.Fragment>\n                              )}\n                            </Grid.Col>\n                          </Grid.Row>\n                        </ListView.Item>\n                      );\n                    })}\n                  </ListView>\n                  {renderPaginationRow(filteredSortedPaginatedListItems)}\n                </div>\n              </React.Fragment>\n            ) : (\n              this.renderEmptyState()\n            )\n          }\n        </ListViewToolbar>\n        <DeleteInfrastructureMappingConfirmationModal\n          showDeleteConfirmationModal={showDeleteConfirmationModal}\n          hideDeleteConfirmationModalAction={hideDeleteConfirmationModalAction}\n          mappingToDelete={mappingToDelete}\n          yesToDeleteInfrastructureMappingAction={yesToDeleteInfrastructureMappingAction}\n          notStartedTransformationPlans={notStartedTransformationPlans}\n          finishedWithErrorTransformationPlans={finishedWithErrorTransformationPlans}\n        />\n      </React.Fragment>\n    );\n  }\n}\n\nInfrastructureMappingsList.propTypes = {\n  clusters: PropTypes.array,\n  datastores: PropTypes.array,\n  networks: PropTypes.array,\n  cloudTenants: PropTypes.array,\n  cloudVolumeTypes: PropTypes.array,\n  cloudNetworks: PropTypes.array,\n  transformationMappings: PropTypes.array, // eslint-disable-line react/no-unused-prop-types\n  error: PropTypes.bool,\n  createInfraMappingClick: PropTypes.func,\n  inProgressRequestsTransformationMappings: PropTypes.array,\n  showDeleteConfirmationModalAction: PropTypes.func,\n  setMappingToDeleteAction: PropTypes.func,\n  showDeleteConfirmationModal: PropTypes.bool,\n  hideDeleteConfirmationModalAction: PropTypes.func,\n  mappingToDelete: PropTypes.object,\n  yesToDeleteInfrastructureMappingAction: PropTypes.func,\n  notStartedTransformationPlans: PropTypes.array,\n  finishedWithErrorTransformationPlans: PropTypes.array,\n  showMappingWizardEditModeAction: PropTypes.func\n};\n\nexport default InfrastructureMappingsList;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { Breadcrumb, Spinner } from 'patternfly-react';\n\nimport Toolbar from '../../../config/Toolbar';\nimport componentRegistry from '../../../../components/componentRegistry';\nimport InfrastructureMappingsList from './components/InfrastructureMappingsList/InfrastructureMappingsList';\nimport { FETCH_TRANSFORMATION_PLANS_URL, FETCH_ARCHIVED_TRANSFORMATION_PLANS_URL } from '../Overview/OverviewConstants';\nimport { FETCH_TRANSFORMATION_MAPPINGS_URL, FETCH_CLOUD_TENANTS_URL } from './MappingsConstants';\nimport { FETCH_V2V_PROVIDERS_URL } from '../../../../redux/common/providers/providersConstants';\nimport ShowWizardEmptyState from '../common/ShowWizardEmptyState/ShowWizardEmptyState';\n\nclass Mappings extends Component {\n  constructor(props) {\n    super(props);\n    this.willUnmount = false;\n  }\n\n  mappingWizard = componentRegistry.markup('MappingWizardContainer', this.props.store);\n\n  componentDidMount = () => {\n    const {\n      fetchArchivedTransformationPlansUrl,\n      fetchCloudNetworksAction,\n      fetchCloudNetworksUrl,\n      fetchCloudTenantsAction,\n      fetchCloudTenantsUrl,\n      fetchCloudVolumeTypesAction,\n      fetchCloudVolumeTypesUrl,\n      fetchClustersAction,\n      fetchClustersUrl,\n      fetchDatastoresAction,\n      fetchDatastoresUrl,\n      fetchNetworksAction,\n      fetchNetworksUrl,\n      fetchProvidersAction,\n      fetchProvidersUrl,\n      fetchTransformationMappingsAction,\n      fetchTransformationMappingsUrl,\n      fetchTransformationPlansAction,\n      fetchTransformationPlansUrl,\n      openMappingWizardOnMount,\n      showMappingWizardAction\n    } = this.props;\n\n    if (openMappingWizardOnMount) {\n      showMappingWizardAction();\n    }\n\n    fetchCloudNetworksAction(fetchCloudNetworksUrl);\n    fetchCloudTenantsAction(fetchCloudTenantsUrl, {\n      addSearch: { attributes: 'ext_management_system.name,cloud_networks,cloud_volume_types' }\n    });\n    fetchCloudVolumeTypesAction(fetchCloudVolumeTypesUrl);\n    fetchClustersAction(fetchClustersUrl);\n    fetchDatastoresAction(fetchDatastoresUrl);\n    fetchNetworksAction(fetchNetworksUrl);\n    fetchProvidersAction(fetchProvidersUrl);\n    fetchTransformationMappingsAction(fetchTransformationMappingsUrl);\n\n    Promise.all([\n      fetchTransformationPlansAction({\n        url: fetchTransformationPlansUrl,\n        archived: false\n      }),\n      fetchTransformationPlansAction({\n        url: fetchArchivedTransformationPlansUrl,\n        archived: true\n      })\n    ]).then(() => {\n      if (!this.pollingInterval && !this.willUnmount) {\n        this.startPolling();\n      }\n    });\n  };\n\n  componentDidUpdate = prevProps => {\n    if (\n      prevProps.yesToDeleteInfrastructureMapping !== this.props.yesToDeleteInfrastructureMapping &&\n      this.props.yesToDeleteInfrastructureMapping\n    ) {\n      this.props\n        .deleteInfrastructureMappingAction(this.props.mappingToDelete)\n        .then(() => this.props.fetchTransformationMappingsAction(this.props.fetchTransformationMappingsUrl));\n    }\n\n    if (prevProps.mappinWizardVisible !== this.props.mappingWizardVisible) {\n      if (this.props.mappingWizardVisible) {\n        this.stopPolling();\n      } else if (!this.props.mappingWizardVisible && !this.pollingInterval && !this.willUnmount) {\n        this.props.fetchTransformationPlansAction({\n          url: this.props.fetchTransformationPlansUrl,\n          archived: false\n        });\n        this.startPolling();\n      }\n    }\n  };\n\n  componentWillUnmount() {\n    this.willUnmount = true;\n    this.stopPolling();\n  }\n\n  startPolling = () => {\n    const { fetchTransformationPlansAction, fetchTransformationPlansUrl } = this.props;\n    this.pollingInterval = setInterval(() => {\n      fetchTransformationPlansAction({\n        url: fetchTransformationPlansUrl,\n        archived: false\n      });\n    }, 15000);\n  };\n\n  stopPolling = () => {\n    if (this.pollingInterval) {\n      clearInterval(this.pollingInterval);\n      this.pollingInterval = null;\n    }\n  };\n\n  inProgressRequestsTransformationMappings = () => {\n    const { activeTransformationPlans } = this.props;\n    const mappings = [];\n\n    if (activeTransformationPlans) {\n      activeTransformationPlans.map(plan => mappings.push(plan.options.config_info.transformation_mapping_id));\n    }\n\n    return mappings;\n  };\n\n  render() {\n    const {\n      archivedTransformationPlans,\n      cloudNetworks,\n      cloudTenants,\n      cloudVolumeTypes,\n      clusters,\n      datastores,\n      deleteInfrastructureMappingAction,\n      finishedWithErrorTransformationPlans,\n      hasSufficientProviders,\n      hideDeleteConfirmationModalAction,\n      isFetchingCloudNetworks,\n      isFetchingCloudTenants,\n      isFetchingCloudVolumeTypes,\n      isFetchingClusters,\n      isFetchingDatastores,\n      isFetchingNetworks,\n      isFetchingProviders,\n      isFetchingTransformationMappings,\n      isRejectedCloudNetworks,\n      isRejectedCloudTenants,\n      isRejectedCloudVolumeTypes,\n      isRejectedClusters,\n      isRejectedDatastores,\n      isRejectedNetworks,\n      isRejectedTransformationMappings,\n      mappingToDelete,\n      mappingWizardVisible,\n      networks,\n      notStartedTransformationPlans,\n      transformationMappings,\n      transformationPlans,\n      setMappingToDeleteAction,\n      showDeleteConfirmationModal,\n      showDeleteConfirmationModalAction,\n      showMappingWizardAction,\n      showMappingWizardEditModeAction,\n      yesToDeleteInfrastructureMappingAction\n    } = this.props;\n\n    return (\n      <React.Fragment>\n        <Toolbar>\n          <Breadcrumb.Item active>{__('Compute')}</Breadcrumb.Item>\n          <Breadcrumb.Item active>{__('Migration')}</Breadcrumb.Item>\n          <Breadcrumb.Item active>\n            <strong>{__('Infrastructure Mappings')}</strong>\n          </Breadcrumb.Item>\n        </Toolbar>\n        <Spinner\n          loading={\n            isFetchingCloudNetworks ||\n            isFetchingCloudTenants ||\n            isFetchingCloudVolumeTypes ||\n            isFetchingClusters ||\n            isFetchingDatastores ||\n            isFetchingNetworks ||\n            isFetchingProviders ||\n            isFetchingTransformationMappings\n          }\n          style={{ marginTop: 100 }}\n        >\n          {hasSufficientProviders ? (\n            <InfrastructureMappingsList\n              clusters={clusters}\n              datastores={datastores}\n              networks={networks}\n              cloudTenants={cloudTenants}\n              cloudNetworks={cloudNetworks}\n              cloudVolumeTypes={cloudVolumeTypes}\n              transformationMappings={transformationMappings}\n              error={\n                isRejectedClusters ||\n                isRejectedDatastores ||\n                isRejectedNetworks ||\n                isRejectedCloudNetworks ||\n                isRejectedCloudTenants ||\n                isRejectedCloudVolumeTypes ||\n                isRejectedTransformationMappings\n              }\n              createInfraMappingClick={showMappingWizardAction}\n              inProgressRequestsTransformationMappings={this.inProgressRequestsTransformationMappings()}\n              showDeleteConfirmationModalAction={showDeleteConfirmationModalAction}\n              setMappingToDeleteAction={setMappingToDeleteAction}\n              showDeleteConfirmationModal={showDeleteConfirmationModal}\n              hideDeleteConfirmationModalAction={hideDeleteConfirmationModalAction}\n              mappingToDelete={mappingToDelete}\n              yesToDeleteInfrastructureMappingAction={yesToDeleteInfrastructureMappingAction}\n              notStartedTransformationPlans={notStartedTransformationPlans}\n              finishedWithErrorTransformationPlans={finishedWithErrorTransformationPlans}\n              deleteInfrastructureMappingAction={deleteInfrastructureMappingAction}\n              migrationPlansExist={transformationPlans.length > 0 || archivedTransformationPlans.length > 0}\n              showMappingWizardEditModeAction={showMappingWizardEditModeAction}\n            />\n          ) : (\n            <ShowWizardEmptyState\n              description={\n                __('The source and target providers must be configured before attempting a migration') // prettier-ignore\n              }\n              buttonText={__('Configure Providers')}\n              buttonHref=\"/ems_infra/show_list\"\n              className=\"mappings\"\n            />\n          )}\n        </Spinner>\n        {mappingWizardVisible && this.mappingWizard}\n      </React.Fragment>\n    );\n  }\n}\n\nMappings.propTypes = {\n  activeTransformationPlans: PropTypes.array,\n  archivedTransformationPlans: PropTypes.array,\n  cloudNetworks: PropTypes.array,\n  cloudTenants: PropTypes.array,\n  cloudVolumeTypes: PropTypes.array,\n  clusters: PropTypes.array,\n  datastores: PropTypes.array,\n  deleteInfrastructureMappingAction: PropTypes.func,\n  networks: PropTypes.array,\n  transformationMappings: PropTypes.array,\n  fetchArchivedTransformationPlansUrl: PropTypes.string,\n  fetchCloudNetworksAction: PropTypes.func,\n  fetchCloudNetworksUrl: PropTypes.string,\n  fetchCloudTenantsAction: PropTypes.func,\n  fetchCloudTenantsUrl: PropTypes.string,\n  fetchCloudVolumeTypesAction: PropTypes.func,\n  fetchCloudVolumeTypesUrl: PropTypes.string,\n  fetchClustersAction: PropTypes.func,\n  fetchClustersUrl: PropTypes.string,\n  fetchDatastoresAction: PropTypes.func,\n  fetchDatastoresUrl: PropTypes.string,\n  fetchNetworksAction: PropTypes.func,\n  fetchNetworksUrl: PropTypes.string,\n  fetchProvidersAction: PropTypes.func,\n  fetchProvidersUrl: PropTypes.string,\n  fetchTransformationMappingsAction: PropTypes.func,\n  fetchTransformationMappingsUrl: PropTypes.string,\n  fetchTransformationPlansAction: PropTypes.func,\n  fetchTransformationPlansUrl: PropTypes.string,\n  finishedWithErrorTransformationPlans: PropTypes.array,\n  hasSufficientProviders: PropTypes.bool,\n  hideDeleteConfirmationModalAction: PropTypes.func,\n  isFetchingCloudNetworks: PropTypes.bool,\n  isFetchingCloudTenants: PropTypes.bool,\n  isFetchingCloudVolumeTypes: PropTypes.bool,\n  isFetchingClusters: PropTypes.bool,\n  isFetchingDatastores: PropTypes.bool,\n  isFetchingNetworks: PropTypes.bool,\n  isFetchingProviders: PropTypes.bool,\n  isFetchingTransformationMappings: PropTypes.bool,\n  isRejectedCloudNetworks: PropTypes.bool,\n  isRejectedCloudTenants: PropTypes.bool,\n  isRejectedCloudVolumeTypes: PropTypes.bool,\n  isRejectedClusters: PropTypes.bool,\n  isRejectedDatastores: PropTypes.bool,\n  isRejectedNetworks: PropTypes.bool,\n  isRejectedTransformationMappings: PropTypes.bool,\n  mappingToDelete: PropTypes.object,\n  mappingWizardVisible: PropTypes.bool,\n  notStartedTransformationPlans: PropTypes.array,\n  openMappingWizardOnMount: PropTypes.bool,\n  setMappingToDeleteAction: PropTypes.func,\n  showDeleteConfirmationModal: PropTypes.bool,\n  showDeleteConfirmationModalAction: PropTypes.func,\n  showMappingWizardAction: PropTypes.func,\n  showMappingWizardEditModeAction: PropTypes.func,\n  store: PropTypes.object,\n  transformationPlans: PropTypes.array,\n  yesToDeleteInfrastructureMapping: PropTypes.bool,\n  yesToDeleteInfrastructureMappingAction: PropTypes.func\n};\n\nMappings.defaultProps = {\n  fetchCloudNetworksUrl: '/api/cloud_networks?expand=resources',\n  fetchCloudTenantsUrl: FETCH_CLOUD_TENANTS_URL,\n  fetchCloudVolumeTypesUrl: '/api/cloud_volume_types?expand=resources',\n  fetchClustersUrl:\n    '/api/clusters/' +\n    '?attributes=ext_management_system.emstype,v_parent_datacenter,ext_management_system.name,lans,storages' +\n    '&expand=resources',\n  fetchDatastoresUrl: '/api/data_stores?expand=resources',\n  fetchNetworksUrl: '/api/lans/?expand=resources',\n  fetchTransformationMappingsUrl: FETCH_TRANSFORMATION_MAPPINGS_URL,\n  fetchArchivedTransformationPlansUrl: FETCH_ARCHIVED_TRANSFORMATION_PLANS_URL,\n  fetchTransformationPlansUrl: FETCH_TRANSFORMATION_PLANS_URL,\n  fetchProvidersUrl: FETCH_V2V_PROVIDERS_URL\n};\n\nexport default Mappings;\n","export const FETCH_V2V_PROVIDERS = 'FETCH_V2V_PROVIDERS';\n\nexport const FETCH_V2V_PROVIDERS_URL = '/api/providers?expand=resources&attributes=authentications';\n\nexport const PROVIDERS = {\n  source: ['ManageIQ::Providers::Vmware::InfraManager'],\n  target: ['ManageIQ::Providers::Redhat::InfraManager', 'ManageIQ::Providers::Openstack::CloudManager']\n};\n","import numeral from 'numeral';\n\nimport { STATUS_MESSAGE_KEYS, V2V_MIGRATION_STATUS_MESSAGES } from './PlanConstants';\nimport { IsoElapsedTime } from '../../../../components/dates/IsoElapsedTime';\nimport getMostRecentVMTasksFromRequests from '../Overview/components/Migrations/helpers/getMostRecentVMTasksFromRequests';\n\nconst taskCompletedSuccessfully = task => task.state === 'finished' && task.status === 'Ok';\n\nconst taskCompletedUnsuccessfully = task => task.state === 'finished' && task.status !== 'Ok';\n\nconst processVMTasks = vmTasks => {\n  const tasks = [];\n  vmTasks.forEach(task => {\n    const taskDetails = {\n      id: task.id,\n      message: V2V_MIGRATION_STATUS_MESSAGES[task.message] || __('VM migrations stalled'),\n      delivered_on: new Date(task.options.delivered_on),\n      updated_on: new Date(task.updated_on),\n      completed:\n        task.message === STATUS_MESSAGE_KEYS.VM_TRANSFORMATIONS_COMPLETED ||\n        task.message === STATUS_MESSAGE_KEYS.VM_TRANSFORMATIONS_FAILED ||\n        task.message === STATUS_MESSAGE_KEYS.FAILED ||\n        (!V2V_MIGRATION_STATUS_MESSAGES[task.message] && task.state === 'finished'),\n      state: task.state,\n      status: task.status,\n      options: {},\n      cancelation_status: task.cancelation_status,\n      source_id: task.source_id,\n      log_available: task.options.virtv2v_wrapper && task.options.virtv2v_wrapper.v2v_log.length > 0\n    };\n\n    if (task.options.playbooks) {\n      taskDetails.options.prePlaybookRunning =\n        task.options.playbooks.pre && task.options.playbooks.pre.job_state === 'active';\n      taskDetails.options.postPlaybookRunning =\n        task.options.playbooks.post && task.options.playbooks.post.job_state === 'active';\n      taskDetails.options.prePlaybookComplete =\n        task.options.playbooks.pre && task.options.playbooks.pre.job_state === 'finished';\n      taskDetails.options.postPlaybookComplete =\n        task.options.playbooks.post && task.options.playbooks.post.job_state === 'finished';\n      taskDetails.options.playbooks = task.options.playbooks;\n    }\n\n    taskDetails.options.progress = task.options.progress;\n    taskDetails.options.virtv2v_wrapper = task.options.virtv2v_wrapper;\n\n    if (!task.diskSpaceCompletedGb) {\n      taskDetails.diskSpaceCompletedGb = '0';\n    }\n\n    if (!task.percentComplete) {\n      taskDetails.percentComplete = 0;\n    }\n\n    if (!task.totalDiskSpaceGb) {\n      taskDetails.totalDiskSpaceGb = '100%';\n    }\n\n    const grepVMName = task.description.match(/\\[(.*?)\\]/);\n\n    if (grepVMName) {\n      [taskDetails.descriptionPrefix, taskDetails.vmName] = grepVMName;\n    }\n\n    const startDateTime = taskDetails.delivered_on;\n    const lastUpdateDateTime = taskDetails.updated_on;\n    taskDetails.startDateTime = startDateTime;\n    taskDetails.lastUpdateDateTime = lastUpdateDateTime;\n\n    taskDetails.elapsedTime = IsoElapsedTime(new Date(startDateTime), new Date(lastUpdateDateTime));\n\n    if (taskDetails.completed) {\n      taskDetails.completedSuccessfully =\n        (task.options.progress && task.options.progress.current_description === 'Virtual machine migrated') ||\n        (task.options.progress && task.options.progress.current_description === 'Mark source as migrated');\n    }\n    if (task.options && task.options.virtv2v_disks && task.options.virtv2v_disks.length) {\n      taskDetails.totalDiskSpace = task.options.virtv2v_disks.reduce((a, b) => a + b.size, 0);\n      taskDetails.totalDiskSpaceGb = numeral(taskDetails.totalDiskSpace).format('0.00b');\n\n      const percentComplete =\n        task.options.virtv2v_disks.reduce((a, b) => a + b.percent, 0) / (100 * task.options.virtv2v_disks.length);\n\n      taskDetails.diskSpaceCompleted = percentComplete * taskDetails.totalDiskSpace;\n      taskDetails.diskSpaceCompletedGb = numeral(taskDetails.diskSpaceCompleted).format('0.00b');\n      taskDetails.percentComplete = Math.round(percentComplete * 100);\n    }\n    tasks.push(taskDetails);\n  });\n  return tasks;\n};\n\nexport const removeCancelledTasksFromSelection = (allSelectedTasksForCancel, alreadyCancelledTasks) =>\n  allSelectedTasksForCancel.filter(selectedTask =>\n    alreadyCancelledTasks.every(cancelledTask => selectedTask.id !== cancelledTask.id)\n  );\n\nexport const excludeDownloadDoneTaskId = (allDownloadLogInProgressTaskIds, taskId) =>\n  allDownloadLogInProgressTaskIds.filter(element => element !== taskId);\n\nexport const includeDownloadInProgressTaskId = (allDownloadLogInProgressTaskIds, taskId) =>\n  allDownloadLogInProgressTaskIds ? allDownloadLogInProgressTaskIds.concat(taskId) : [taskId];\n\nexport const getFailedMigrations = vmTasks => vmTasks.filter(task => taskCompletedUnsuccessfully(task));\n\nexport const getSuccessfulMigrations = vmTasks => vmTasks.filter(task => taskCompletedSuccessfully(task));\n\nexport const allVMTasksForRequestOfPlan = (requestWithTasks, actions) => {\n  const tasksOfPlan = getMostRecentVMTasksFromRequests(requestWithTasks, actions);\n  return processVMTasks(tasksOfPlan);\n};\n\nexport const incompleteCancellationTasks = (requestWithTasks, actions, tasksForCancel) => {\n  const tasksOfPlan = getMostRecentVMTasksFromRequests(requestWithTasks, actions);\n  const completedTasksOfPlan = tasksOfPlan.filter(task => task.state === 'finished');\n  return removeCancelledTasksFromSelection(tasksForCancel, completedTasksOfPlan);\n};\n","import Immutable from 'seamless-immutable';\nimport commonUtilitiesHelper from '../common/commonUtilitiesHelper';\n\nimport {\n  FETCH_V2V_PLAN,\n  FETCH_V2V_ALL_REQUESTS_WITH_TASKS_FOR_PLAN,\n  QUERY_V2V_PLAN_VMS,\n  RESET_PLAN_STATE,\n  FETCH_V2V_MIGRATION_TASK_LOG,\n  DOWNLOAD_LOG_CLICKED,\n  DOWNLOAD_LOG_COMPLETED,\n  FETCH_V2V_ANSIBLE_PLAYBOOK_TEMPLATE,\n  FETCH_V2V_ORCHESTRATION_STACK,\n  REMOVE_TASKS_SELECTED_FOR_CANCELLATION,\n  UPDATE_TASKS_SELECTED_FOR_CANCELLATION,\n  DELETE_ALL_TASKS_SELECTED_FOR_CANCELLATION,\n  ADD_TASKS_TO_MARKED_FOR_CANCELLATION,\n  ADD_TASK_TO_NOTIFICATION_SENT_LIST,\n  FETCH_V2V_REQUEST_TASK,\n  FETCH_V2V_CONVERSION_HOST\n} from './PlanConstants';\nimport {\n  excludeDownloadDoneTaskId,\n  includeDownloadInProgressTaskId,\n  getFailedMigrations,\n  getSuccessfulMigrations,\n  allVMTasksForRequestOfPlan,\n  incompleteCancellationTasks,\n  removeCancelledTasksFromSelection\n} from './helpers';\n\nexport const initialState = Immutable({\n  isFetchingPlanRequest: false,\n  isRejectedPlanRequest: false,\n  planRequestPreviouslyFetched: false,\n  errorPlanRequest: null,\n  planRequestTasks: [],\n  planRequestFailed: false,\n  planRequestDenied: false,\n  isFetchingPlan: false,\n  isRejectedPlan: false,\n  errorPlan: null,\n  plan: {},\n  planArchived: false,\n  isQueryingVms: false,\n  isRejectedVms: false,\n  errorVms: null,\n  vms: [],\n  isFetchingAnsiblePlaybookTemplate: false,\n  isRejectedAnsiblePlaybookTemplate: false,\n  errorAnsiblePlaybookTemplate: null,\n  ansiblePlaybookTemplate: {},\n  isFetchingOrchestrationStack: false,\n  isRejectedOrchestrationStack: false,\n  errorOrchestrationStack: null,\n  orchestrationStack: {},\n  selectedTasksForCancel: [],\n  markedForCancellation: [],\n  failedMigrations: [],\n  successfulMigrations: [],\n  notificationsSentList: [],\n  isFetchingRequestTask: false,\n  isRejectedRequestTask: false,\n  requestTask: {},\n  errorRequestTask: null,\n  conversionHosts: {}\n});\n\nexport default (state = initialState, action) => {\n  switch (action.type) {\n    case `${FETCH_V2V_PLAN}_PENDING`:\n      return state.set('isFetchingPlan', true).set('isRejectedPlan', false);\n    case `${FETCH_V2V_PLAN}_FULFILLED`:\n      return state\n        .set('plan', action.payload.data)\n        .set('planName', action.payload.data.name)\n        .set('planArchived', !!action.payload.data.archived)\n        .set('isFetchingPlan', false)\n        .set('isRejectedPlan', false)\n        .set('errorPlan', null);\n    case `${FETCH_V2V_PLAN}_REJECTED`:\n      return state\n        .set('isFetchingPlan', false)\n        .set('isRejectedPlan', true)\n        .set('errorPlan', action.payload);\n\n    case `${FETCH_V2V_ALL_REQUESTS_WITH_TASKS_FOR_PLAN}_PENDING`:\n      return state.set('isFetchingPlanRequest', true).set('isRejectedPlanRequest', false);\n    case `${FETCH_V2V_ALL_REQUESTS_WITH_TASKS_FOR_PLAN}_FULFILLED`:\n      if (action.payload.data) {\n        const vmTasksForRequestOfPlan = allVMTasksForRequestOfPlan(\n          action.payload.data.results,\n          state.plan.options.config_info.actions\n        );\n\n        const mostRecentRequest = commonUtilitiesHelper.getMostRecentEntityByCreationDate(action.payload.data.results);\n        const tasksOfMostRecentRequest = mostRecentRequest.miq_request_tasks;\n        const vmsBeingProcessedInCurrentRun = tasksOfMostRecentRequest.map(task => task.source_id);\n        const tasksCompletedSuccessfullyInPriorRuns = vmTasksForRequestOfPlan.filter(\n          task => vmsBeingProcessedInCurrentRun.indexOf(task.source_id) === -1\n        );\n\n        const addTaskToNotificationAlreadySentList = [];\n        tasksCompletedSuccessfullyInPriorRuns.forEach(task => {\n          if (state.notificationsSentList.indexOf(task.id) === -1) {\n            addTaskToNotificationAlreadySentList.push(task.id);\n          }\n        });\n\n        return state\n          .set('notificationsSentList', state.notificationsSentList.concat(addTaskToNotificationAlreadySentList))\n          .set('planRequestTasks', vmTasksForRequestOfPlan)\n          .set(\n            'selectedTasksForCancel',\n            incompleteCancellationTasks(\n              action.payload.data.results,\n              state.plan.options.config_info.actions,\n              state.selectedTasksForCancel\n            )\n          )\n          .set('allRequestsWithTasksForPlan', action.payload.data.results)\n          .set('planRequestPreviouslyFetched', true)\n          .set('planRequestFailed', mostRecentRequest.status === 'Error')\n          .set('planRequestDenied', mostRecentRequest.status === 'Denied')\n          .set('failedMigrations', getFailedMigrations(vmTasksForRequestOfPlan))\n          .set('successfulMigrations', getSuccessfulMigrations(vmTasksForRequestOfPlan))\n          .set('isRejectedPlanRequest', false)\n          .set('errorPlanRequest', null)\n          .set('isFetchingPlanRequest', false);\n      }\n      return state\n        .set('planRequestPreviouslyFetched', true)\n        .set('isRejectedPlanRequest', false)\n        .set('errorPlanRequest', null)\n        .set('isFetchingPlanRequest', false);\n    case `${FETCH_V2V_ALL_REQUESTS_WITH_TASKS_FOR_PLAN}_REJECTED`:\n      return state\n        .set('errorPlanRequest', action.payload)\n        .set('isRejectedPlanRequest', true)\n        .set('isFetchingPlanRequest', false);\n\n    case `${QUERY_V2V_PLAN_VMS}_PENDING`:\n      return state.set('isQueryingVms', true).set('isRejectedVms', false);\n    case `${QUERY_V2V_PLAN_VMS}_FULFILLED`:\n      return state\n        .set('vms', action.payload.data.results)\n        .set('isQueryingVms', false)\n        .set('isRejectedVms', false)\n        .set('errorVms', null);\n    case `${QUERY_V2V_PLAN_VMS}_REJECTED`:\n      return state\n        .set('isQueryingVms', false)\n        .set('isRejectedVms', true)\n        .set('errorVms', action.payload);\n\n    case RESET_PLAN_STATE:\n      return state\n        .set('planRequestTasks', [])\n        .set('vms', [])\n        .set('planRequestPreviouslyFetched', false)\n        .set('markedForCancellation', [])\n        .set('selectedTasksForCancel', [])\n        .set('planRequestFailed', false)\n        .set('planRequestDenied', false);\n\n    case `${FETCH_V2V_MIGRATION_TASK_LOG}_PENDING`:\n      return state.set('isFetchingMigrationTaskLog', true).set('isRejectedMigrationTaskLog', false);\n    case `${FETCH_V2V_MIGRATION_TASK_LOG}_FULFILLED`:\n      return state\n        .set('isFetchingMigrationTaskLog', false)\n        .set('isRejectedMigrationTaskLog', false)\n        .set('errorMigrationTaskLog', null);\n    case `${FETCH_V2V_MIGRATION_TASK_LOG}_REJECTED`:\n      return state\n        .set('isFetchingMigrationTaskLog', false)\n        .set('isRejectedMigrationTaskLog', true)\n        .set('errorMigrationTaskLog', action.payload);\n\n    case `${FETCH_V2V_ANSIBLE_PLAYBOOK_TEMPLATE}_PENDING`:\n      return state.set('isFetchingAnsiblePlaybookTemplate', true).set('isRejectedAnsiblePlaybookTemplate', false);\n    case `${FETCH_V2V_ANSIBLE_PLAYBOOK_TEMPLATE}_FULFILLED`:\n      return state\n        .set('ansiblePlaybookTemplate', action.payload.data)\n        .set('isFetchingAnsiblePlaybookTemplate', false)\n        .set('isRejectedAnsiblePlaybookTemplate', false)\n        .set('errorAnsiblePlaybookTemplate', null);\n    case `${FETCH_V2V_ANSIBLE_PLAYBOOK_TEMPLATE}_REJECTED`:\n      return state\n        .set('isFetchingAnsiblePlaybookTemplate', false)\n        .set('isRejectedAnsiblePlaybookTemplate', true)\n        .set('errorAnsiblePlaybookTemplate', action.payload);\n\n    case `${FETCH_V2V_ORCHESTRATION_STACK}_PENDING`:\n      return state.set('isFetchingOrchestrationStack', true).set('isRejectedOrchestrationStack', false);\n    case `${FETCH_V2V_ORCHESTRATION_STACK}_FULFILLED`:\n      return state\n        .set('orchestrationStack', action.payload.data)\n        .set('isFetchingOrchestrationStack', false)\n        .set('isRejectedOrchestrationStack', false)\n        .set('errorOrchestrationStack', null);\n    case `${FETCH_V2V_ORCHESTRATION_STACK}_REJECTED`:\n      return state\n        .set('isFetchingOrchestrationStack', false)\n        .set('isRejectedOrchestrationStack', true)\n        .set('errorOrchestrationStack', action.payload);\n\n    case DOWNLOAD_LOG_CLICKED:\n      return state.set(\n        'downloadLogInProgressTaskIds',\n        includeDownloadInProgressTaskId(state.downloadLogInProgressTaskIds, action.payload)\n      );\n    case DOWNLOAD_LOG_COMPLETED:\n      return state.set(\n        'downloadLogInProgressTaskIds',\n        excludeDownloadDoneTaskId(state.downloadLogInProgressTaskIds, action.payload)\n      );\n\n    case REMOVE_TASKS_SELECTED_FOR_CANCELLATION:\n      return state.set(\n        'selectedTasksForCancel',\n        removeCancelledTasksFromSelection(state.selectedTasksForCancel, action.payload)\n      );\n\n    case ADD_TASKS_TO_MARKED_FOR_CANCELLATION:\n      return state.set('markedForCancellation', state.markedForCancellation.concat(action.payload));\n\n    case UPDATE_TASKS_SELECTED_FOR_CANCELLATION:\n      return state.set('selectedTasksForCancel', action.payload);\n\n    case DELETE_ALL_TASKS_SELECTED_FOR_CANCELLATION:\n      return state.set('selectedTasksForCancel', []);\n\n    case ADD_TASK_TO_NOTIFICATION_SENT_LIST:\n      return state.set('notificationsSentList', state.notificationsSentList.concat(action.payload));\n\n    case `${FETCH_V2V_REQUEST_TASK}_PENDING`:\n      return state.set('isFetchingRequestTask', false).set('isRejectedRequestTask', false);\n    case `${FETCH_V2V_REQUEST_TASK}_FULFILLED`:\n      return state\n        .set('requestTask', action.payload.data)\n        .set('isFetchingRequestTask', false)\n        .set('isRejectedRequestTask', false)\n        .set('errorRequestTask', null);\n    case `${FETCH_V2V_REQUEST_TASK}_REJECTED`:\n      return state\n        .set('errorRequestTask', action.payload)\n        .set('isRejectedRequestTask', true)\n        .set('isFetchingRequestTask', false);\n\n    case FETCH_V2V_CONVERSION_HOST:\n      return state.set('conversionHosts', {\n        ...state.conversionHosts,\n        [action.payload.id]: action.payload.conversion_host\n      });\n\n    default:\n      return state;\n  }\n};\n","import URI from 'urijs';\nimport { saveAs } from 'file-saver';\nimport API from '../../../../common/API';\nimport http from '../../../../common/http';\n\nimport {\n  FETCH_V2V_PLAN,\n  FETCH_V2V_ALL_REQUESTS_WITH_TASKS_FOR_PLAN,\n  QUERY_V2V_PLAN_VMS,\n  RESET_PLAN_STATE,\n  FETCH_V2V_MIGRATION_TASK_LOG,\n  DOWNLOAD_LOG_CLICKED,\n  DOWNLOAD_LOG_COMPLETED,\n  FETCH_V2V_ANSIBLE_PLAYBOOK_TEMPLATE,\n  FETCH_V2V_ORCHESTRATION_STACK,\n  CANCEL_V2V_PLAN_REQUEST_TASKS,\n  REMOVE_TASKS_SELECTED_FOR_CANCELLATION,\n  UPDATE_TASKS_SELECTED_FOR_CANCELLATION,\n  DELETE_ALL_TASKS_SELECTED_FOR_CANCELLATION,\n  ADD_TASKS_TO_MARKED_FOR_CANCELLATION,\n  ADD_TASK_TO_NOTIFICATION_SENT_LIST,\n  FETCH_V2V_REQUEST_TASK,\n  FETCH_V2V_CONVERSION_HOST\n} from './PlanConstants';\n\nimport { V2V_NOTIFICATION_ADD } from '../common/NotificationList/NotificationConstants';\n\n// *****************************************************************************\n// * FETCH_V2FETCH_V2V_ORCHESTRATION_STACK\n// *****************************************************************************\nconst _getOrchestrationStackActionCreator = (url, playbookScheduleType, task) => dispatch => {\n  dispatch({\n    type: DOWNLOAD_LOG_CLICKED,\n    payload: task.id\n  });\n\n  return dispatch({\n    type: FETCH_V2V_ORCHESTRATION_STACK,\n    payload: new Promise((resolve, reject) =>\n      API.get(url)\n        .then(response => {\n          resolve(response);\n          dispatch({\n            type: DOWNLOAD_LOG_COMPLETED,\n            payload: task.id\n          });\n          const playbookLogFileName = `${task.vmName}-${playbookScheduleType}.log`;\n          const file = new File([response.data.stdout], playbookLogFileName, { type: 'text/plain;charset=utf-8' });\n          saveAs(file);\n          const successMsg = sprintf(__('\"%s\" download successful'), playbookLogFileName);\n          dispatch({\n            type: V2V_NOTIFICATION_ADD,\n            message: successMsg,\n            notificationType: 'success',\n            actionEnabled: false\n          });\n        })\n        .catch(e => {\n          dispatch({\n            type: DOWNLOAD_LOG_COMPLETED,\n            payload: task.id\n          });\n          reject(e);\n        })\n    )\n  });\n};\n\nexport const fetchOrchestrationStackAction = (url, playbookScheduleType, task) => {\n  const [schedule] = playbookScheduleType.match(/pre|post/);\n  const uri = new URI(`${url}/${task.options.playbooks[schedule].job_id}`);\n\n  uri.addSearch({ attributes: 'stdout' });\n\n  return _getOrchestrationStackActionCreator(uri.toString(), playbookScheduleType, task);\n};\n\n// *****************************************************************************\n// * FETCH_V2V_ANSIBLE_PLAYBOOK_TEMPLATE\n// *****************************************************************************\nconst _getAnsiblePlaybookTemplateActionCreator = url => dispatch =>\n  dispatch({\n    type: FETCH_V2V_ANSIBLE_PLAYBOOK_TEMPLATE,\n    payload: API.get(url)\n  });\n\nexport const fetchAnsiblePlaybookTemplateAction = (url, id) => {\n  const uri = new URI(`${url}/${id}`);\n  return _getAnsiblePlaybookTemplateActionCreator(uri.toString());\n};\n\n// *****************************************************************************\n// * FETCH_V2V_ALL_REQUESTS_WITH_TASKS_FOR_PLAN\n// *****************************************************************************\nconst _getTasksForAllRequestsForPlanActionCreator = (url, allRequests) => dispatch => {\n  dispatch({\n    type: FETCH_V2V_ALL_REQUESTS_WITH_TASKS_FOR_PLAN,\n    payload: new Promise((resolve, reject) => {\n      API.post(url, {\n        action: 'query',\n        resources: allRequests\n      })\n        .then(response => {\n          resolve(response);\n        })\n        .catch(e => reject(e));\n    })\n  });\n};\n\nexport const fetchTasksForAllRequestsForPlanAction = (url, allRequests) =>\n  _getTasksForAllRequestsForPlanActionCreator(url, allRequests);\n\n// *****************************************************************************\n// * QUERY_V2V_PLAN_VMS\n// *****************************************************************************\nconst _queryPlanVmsActionCreator = ids => dispatch => {\n  const resources = ids.map(id => ({\n    id\n  }));\n\n  return dispatch({\n    type: QUERY_V2V_PLAN_VMS,\n    payload: API.post('/api/vms', {\n      action: 'query',\n      resources\n    })\n  });\n};\n\nexport const queryPlanVmsAction = ids => _queryPlanVmsActionCreator(ids);\n\n// *****************************************************************************\n// * FETCH_V2V_PLAN\n// *****************************************************************************\nexport const _getPlanActionCreator = url => dispatch =>\n  dispatch({\n    type: FETCH_V2V_PLAN,\n    payload: new Promise((resolve, reject) => {\n      API.get(url)\n        .then(response => {\n          resolve(response);\n        })\n        .catch(e => {\n          reject(e);\n        });\n    })\n  });\n\nexport const fetchPlanAction = (url, id) => {\n  const uri = new URI(`${url}/${id}`);\n  uri.addSearch({ attributes: 'miq_requests,archived,active' });\n  return _getPlanActionCreator(uri.toString());\n};\n\n// *****************************************************************************\n// * RESET_PLAN_STATE\n// *****************************************************************************\nexport const resetPlanStateAction = () => ({\n  type: RESET_PLAN_STATE\n});\n\nexport const downloadLogAction = (task, logType = 'v2v') => dispatch => {\n  dispatch({\n    type: DOWNLOAD_LOG_CLICKED,\n    payload: task.id\n  });\n  dispatch({\n    type: FETCH_V2V_MIGRATION_TASK_LOG,\n    payload: new Promise((resolve, reject) => {\n      http\n        .get(`/migration_log/download_migration_log/${task.id}?log_type=${logType}`)\n        .then(response => {\n          resolve(response);\n          dispatch({\n            type: DOWNLOAD_LOG_COMPLETED,\n            payload: task.id\n          });\n          let filenameSuffix = '';\n          if (logType === 'v2v') filenameSuffix = 'virt-v2v';\n          if (logType === 'wrapper') filenameSuffix = 'virt-v2v-wrapper';\n          const v2vLogFileName = `${task.vmName}-${filenameSuffix}.log`;\n          if (response.data.status === 'Ok') {\n            const file = new File([response.data.log_contents], v2vLogFileName, { type: 'text/plain;charset=utf-8' });\n            saveAs(file);\n            const successMsg = sprintf(__('\"%s\" download successful'), v2vLogFileName);\n            dispatch({\n              type: V2V_NOTIFICATION_ADD,\n              message: successMsg,\n              notificationType: 'success',\n              actionEnabled: false\n            });\n          } else {\n            const failureMsg = sprintf(\n              __('Failed to download \"%s\". Reason - \"%s\"'),\n              v2vLogFileName,\n              response.data.status_message\n            );\n            dispatch({\n              type: V2V_NOTIFICATION_ADD,\n              message: failureMsg,\n              notificationType: 'error',\n              persistent: true,\n              actionEnabled: false\n            });\n          }\n        })\n        .catch(e => {\n          dispatch({\n            type: DOWNLOAD_LOG_COMPLETED,\n            payload: task.id\n          });\n          reject(e);\n        });\n    })\n  });\n};\n\n// *****************************************************************************\n// * CANCEL MIGRATION TASKS\n// *****************************************************************************\nexport const cancelPlanRequestTasksAction = (url, tasks) => dispatch => {\n  const completedTasks = [];\n  const incompleteTasks = [];\n\n  tasks.forEach(t => {\n    if (t.completed) {\n      completedTasks.push(t);\n    } else {\n      incompleteTasks.push(t);\n    }\n  });\n\n  dispatch({\n    type: REMOVE_TASKS_SELECTED_FOR_CANCELLATION,\n    payload: completedTasks\n  });\n  if (incompleteTasks.length === 0) {\n    dispatch({\n      type: V2V_NOTIFICATION_ADD,\n      message: __('Cannot cancel completed VM Migrations'),\n      notificationType: 'error',\n      persistent: true,\n      actionEnabled: false\n    });\n    return;\n  }\n  const resources = incompleteTasks.map(t => ({ id: t.id }));\n  dispatch({\n    type: CANCEL_V2V_PLAN_REQUEST_TASKS,\n    payload: new Promise((resolve, reject) => {\n      API.post(url, {\n        action: 'cancel',\n        resources\n      })\n        .then(response => {\n          resolve(response);\n\n          const cancelSuccessMsg = __('Migration cancel request submitted for VMs: ');\n          const vmNames = tasks.map(task => task.vmName).join(', ');\n          const cancelSuccessMsgWithVMNames = `${cancelSuccessMsg} ${vmNames}`;\n\n          dispatch({\n            type: V2V_NOTIFICATION_ADD,\n            message: cancelSuccessMsgWithVMNames,\n            notificationType: 'success',\n            actionEnabled: false\n          });\n\n          dispatch({\n            type: ADD_TASKS_TO_MARKED_FOR_CANCELLATION,\n            payload: tasks\n          });\n\n          dispatch({\n            type: REMOVE_TASKS_SELECTED_FOR_CANCELLATION,\n            payload: tasks\n          });\n        })\n        .catch(e => reject(e));\n    })\n  });\n};\n\n// *****************************************************************************\n// * UPDATE SELECTED CANCELLATION TASKS\n// *****************************************************************************\nexport const updateSelectedTasksForCancelAction = updatedSelectedCancellationTasks => dispatch => {\n  dispatch({\n    type: UPDATE_TASKS_SELECTED_FOR_CANCELLATION,\n    payload: updatedSelectedCancellationTasks\n  });\n};\n\n// *****************************************************************************\n// * DELETE ALL SELECTED CANCELLATION TASKS\n// *****************************************************************************\nexport const deleteAllSelectedTasksForCancelAction = updatedSelectedCancellationTasks => dispatch => {\n  dispatch({\n    type: DELETE_ALL_TASKS_SELECTED_FOR_CANCELLATION\n  });\n};\n\n// *****************************************************************************\n// * DISPATCH SUCCESSFUL AND FAILED MIGRATION NOTIFICATIONS\n// *****************************************************************************\nexport const dispatchVMTasksCompletionNotificationAction = (\n  failedMigrations,\n  successfulMigrations,\n  notificationsSentList\n) => dispatch => {\n  failedMigrations.forEach(migration => {\n    if (!notificationsSentList.find(taskId => taskId === migration.id)) {\n      const errorMessage = sprintf(__('%s failed to migrate'), migration.vmName);\n      dispatch({\n        type: V2V_NOTIFICATION_ADD,\n        message: errorMessage,\n        notificationType: 'error',\n        persistent: true,\n        actionEnabled: false\n      });\n      dispatch({\n        type: ADD_TASK_TO_NOTIFICATION_SENT_LIST,\n        payload: migration.id\n      });\n    }\n  });\n\n  successfulMigrations.forEach(migration => {\n    if (!notificationsSentList.find(taskId => taskId === migration.id)) {\n      const successMessage = sprintf(__('%s migrated successfully'), migration.vmName);\n      dispatch({\n        type: V2V_NOTIFICATION_ADD,\n        message: successMessage,\n        notificationType: 'success',\n        actionEnabled: false\n      });\n      dispatch({\n        type: ADD_TASK_TO_NOTIFICATION_SENT_LIST,\n        payload: migration.id\n      });\n    }\n  });\n};\n\n// *****************************************************************************\n// * FETCH_V2V_REQUEST_TASK\n// *****************************************************************************\nconst _getRequestTaskActionCreator = url => dispatch =>\n  dispatch({\n    type: FETCH_V2V_REQUEST_TASK,\n    payload: API.get(url)\n  });\n\nexport const fetchRequestTaskAction = (url, id, options = {}) => {\n  const uri = new URI(`${url}/${id}`);\n  const { attributes } = options;\n\n  if (attributes) {\n    uri.addSearch({ attributes });\n  }\n\n  return _getRequestTaskActionCreator(uri.toString());\n};\n\n// *****************************************************************************\n// * FETCH_V2V_CONVERSION_HOST\n// *****************************************************************************\nexport const fetchConversionHostAction = (url, id) => dispatch => {\n  dispatch(fetchRequestTaskAction(url, id, { attributes: 'conversion_host' })).then(response => {\n    dispatch({\n      type: FETCH_V2V_CONVERSION_HOST,\n      payload: response.value.data\n    });\n  });\n};\n","import { V2V_MIGRATION_STATUS_MESSAGES, STATUS_MESSAGE_KEYS } from '../../PlanConstants';\n\nexport const FINISHED_PLAN_FILTER_TYPES = [\n  {\n    id: 'vmName',\n    title: __('VM Name'),\n    placeholder: __('Filter by VM Name'),\n    filterType: 'text'\n  },\n  {\n    id: 'status',\n    title: __('Status'),\n    placeholder: __('Filter by Status'),\n    filterType: 'select',\n    filterValues: [{ title: __('Ok'), id: 'Ok' }, { title: __('Error'), id: 'Error' }]\n  }\n];\n\nexport const ACTIVE_PLAN_FILTER_TYPES = [\n  {\n    id: 'vmName',\n    title: __('VM Name'),\n    placeholder: __('Filter by VM Name'),\n    filterType: 'text'\n  },\n  {\n    id: 'message',\n    title: __('Status'),\n    placeholder: __('Filter by Status'),\n    filterType: 'select',\n    filterValues: [\n      { title: V2V_MIGRATION_STATUS_MESSAGES[STATUS_MESSAGE_KEYS.VALIDATING], id: STATUS_MESSAGE_KEYS.VALIDATING },\n      {\n        title: V2V_MIGRATION_STATUS_MESSAGES[STATUS_MESSAGE_KEYS.PRE_MIGRATION],\n        id: STATUS_MESSAGE_KEYS.PRE_MIGRATION\n      },\n      { title: V2V_MIGRATION_STATUS_MESSAGES[STATUS_MESSAGE_KEYS.MIGRATING], id: STATUS_MESSAGE_KEYS.MIGRATING },\n      {\n        title: V2V_MIGRATION_STATUS_MESSAGES[STATUS_MESSAGE_KEYS.VM_TRANSFORMATIONS_COMPLETED],\n        id: STATUS_MESSAGE_KEYS.VM_TRANSFORMATIONS_COMPLETED\n      },\n      {\n        title: V2V_MIGRATION_STATUS_MESSAGES[STATUS_MESSAGE_KEYS.VM_TRANSFORMATIONS_FAILED],\n        id: STATUS_MESSAGE_KEYS.VM_TRANSFORMATIONS_FAILED\n      }\n    ]\n  }\n];\n\nexport const FINISHED_PLAN_SORT_FIELDS = [\n  { id: 'elapsedTime', title: __('Elapsed Time'), isNumeric: false },\n  {\n    id: 'vmName',\n    title: __('VM Name'),\n    isNumeric: false\n  },\n  { id: 'status', title: __('Status'), isNumeric: false }\n];\n\nexport const ACTIVE_PLAN_SORT_FIELDS = [\n  { id: 'elapsedTime', title: __('Elapsed Time'), isNumeric: false },\n  {\n    id: 'vmName',\n    title: __('VM Name'),\n    isNumeric: false\n  },\n  { id: 'message', title: __('Status'), isNumeric: false }\n];\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { EmptyState } from 'patternfly-react';\n\nconst PlanEmptyState = ({ title, iconType, iconName, description, descriptionIsNode }) => (\n  <div>\n    <br />\n    <EmptyState>\n      <EmptyState.Icon type={iconType} name={iconName} />\n      <EmptyState.Title>{sprintf(__('%s'), title)}</EmptyState.Title>\n      <EmptyState.Info>{descriptionIsNode ? description : sprintf(__('%s'), description)}</EmptyState.Info>\n    </EmptyState>\n  </div>\n);\n\nPlanEmptyState.propTypes = {\n  title: PropTypes.string,\n  iconType: PropTypes.string,\n  iconName: PropTypes.string,\n  description: PropTypes.oneOfType([PropTypes.string, PropTypes.node]),\n  descriptionIsNode: PropTypes.bool\n};\n\nexport default PlanEmptyState;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Grid, ListView, Toolbar, Tooltip, UtilizationBar } from 'patternfly-react';\nimport ListViewToolbar from '../../common/ListViewToolbar/ListViewToolbar';\n\nconst PlanVmsList = props => (\n  <ListViewToolbar filterTypes={PlanVmsList.filterTypes} sortFields={PlanVmsList.sortFields} listItems={props.planVms}>\n    {({\n      filteredSortedPaginatedListItems,\n      renderFilterControls,\n      renderSortControls,\n      renderActiveFilters,\n      renderPaginationRow\n    }) => (\n      <React.Fragment>\n        <Grid.Row>\n          <Toolbar>\n            {renderFilterControls()}\n            {renderSortControls()}\n            {renderActiveFilters(filteredSortedPaginatedListItems)}\n          </Toolbar>\n        </Grid.Row>\n        <div style={{ overflow: 'auto', paddingBottom: 300, height: '100%' }}>\n          <ListView className=\"plan-request-details-list\">\n            {filteredSortedPaginatedListItems.items.map((task, n) => (\n              <ListView.Item\n                key={task.id}\n                heading={task.name}\n                additionalInfo={[\n                  <ListView.InfoItem key={`${task.id}-times`} style={{ minWidth: 150, paddingRight: 20 }}>\n                    <ListView.Icon type=\"fa\" size=\"lg\" name=\"clock-o\" />\n                    {'00:00:00'}\n                  </ListView.InfoItem>,\n                  <ListView.InfoItem key={`${task.id}-message`} style={{ minWidth: 150, paddingRight: 20 }}>\n                    {__('Not started')}\n                  </ListView.InfoItem>\n                ]}\n                actions={\n                  <UtilizationBar\n                    now={0}\n                    min={0}\n                    max={100}\n                    description={__('0 GBs Migrated')}\n                    label=\" \"\n                    usedTooltipFunction={(max, now) => (\n                      <Tooltip id={Date.now()}>\n                        {now} % {__('Migrated')}\n                      </Tooltip>\n                    )}\n                    availableTooltipFunction={(max, now) => (\n                      <Tooltip id={Date.now()}>\n                        {Math.round(max - now)} % {__('Remaining')}\n                      </Tooltip>\n                    )}\n                    descriptionPlacementTop\n                  />\n                }\n                stacked\n              />\n            ))}\n          </ListView>\n          {renderPaginationRow(filteredSortedPaginatedListItems)}\n        </div>\n      </React.Fragment>\n    )}\n  </ListViewToolbar>\n);\n\nPlanVmsList.propTypes = {\n  planVms: PropTypes.array\n};\n\nPlanVmsList.sortFields = [{ id: 'name', title: __('Name'), isNumeric: false }];\n\nPlanVmsList.filterTypes = [\n  {\n    id: 'name',\n    title: __('Name'),\n    placeholder: __('Filter by Name'),\n    filterType: 'text'\n  }\n];\n\nexport default PlanVmsList;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  Button,\n  Icon,\n  Grid,\n  FormGroup,\n  ListView,\n  Popover,\n  OverlayTrigger,\n  Spinner,\n  Toolbar,\n  Tooltip,\n  UtilizationBar,\n  DropdownButton,\n  MenuItem\n} from 'patternfly-react';\nimport { formatDateTime } from '../../../../../../components/dates/MomentDate';\nimport { V2V_MIGRATION_STATUS_MESSAGES, REQUEST_TASKS_URL } from '../../PlanConstants';\nimport TickingIsoElapsedTime from '../../../../../../components/dates/TickingIsoElapsedTime';\nimport ConfirmModal from '../../../common/ConfirmModal';\n\nclass PlanRequestDetailList extends React.Component {\n  state = {\n    showConfirmCancel: false\n  };\n\n  componentDidUpdate(prevProps, prevState) {\n    if (prevProps.planRequestTasks !== this.props.planRequestTasks) {\n      const {\n        failedMigrations,\n        successfulMigrations,\n        notificationsSentList,\n        dispatchVMTasksCompletionNotificationAction\n      } = this.props;\n      dispatchVMTasksCompletionNotificationAction(failedMigrations, successfulMigrations, notificationsSentList);\n    }\n  }\n\n  onSelect = (eventKey, task) => {\n    const { downloadLogAction, fetchOrchestrationStackUrl, fetchOrchestrationStackAction } = this.props;\n    if (eventKey === 'migration') {\n      downloadLogAction(task, 'v2v');\n    } else if (eventKey === 'wrapper') {\n      downloadLogAction(task, 'wrapper');\n    } else {\n      fetchOrchestrationStackAction(fetchOrchestrationStackUrl, eventKey, task);\n    }\n  };\n\n  overlayTriggerClick = task => {\n    if (!this.props.conversionHosts[task.id]) {\n      this.props.fetchConversionHostAction(this.props.fetchConversionHostUrl, task.id);\n    }\n\n    if (task.options.playbooks) {\n      const playbookStatuses = task.options.playbooks;\n      let runningPlaybook = null;\n\n      for (const scheduleType in playbookStatuses) {\n        if (playbookStatuses[scheduleType].job_state === 'active') {\n          runningPlaybook = scheduleType;\n        }\n      }\n\n      if (runningPlaybook) {\n        const {\n          plan: {\n            options: { config_info }\n          },\n          fetchAnsiblePlaybookTemplateUrl,\n          fetchAnsiblePlaybookTemplateAction\n        } = this.props;\n        const configInfoKey = `${runningPlaybook}_service_id`;\n\n        fetchAnsiblePlaybookTemplateAction(fetchAnsiblePlaybookTemplateUrl, config_info[configInfoKey]);\n      }\n    }\n  };\n\n  getCancelSelectionState = () => {\n    const { selectedTasksForCancel, markedForCancellation, filteredListItems } = this.props;\n    const incompleteTasks = filteredListItems.filter(\n      task => !task.completed && !task.cancelation_status && !markedForCancellation.find(t => t.id === task.id)\n    );\n    return {\n      incompleteTasks,\n      allSelected: selectedTasksForCancel.length === incompleteTasks.length && selectedTasksForCancel.length > 0,\n      noneSelected: selectedTasksForCancel.length === 0\n    };\n  };\n\n  handleCheckboxChange = task => {\n    const { selectedTasksForCancel, updateSelectedTasksForCancelAction } = this.props;\n    const selectedTask = selectedTasksForCancel.find(t => t.id === task.id);\n    let updatedSelectedTasks;\n    if (selectedTask) {\n      updatedSelectedTasks = selectedTasksForCancel.filter(r => !(r.id === task.id));\n    } else {\n      updatedSelectedTasks = [...selectedTasksForCancel, task];\n    }\n    updateSelectedTasksForCancelAction(updatedSelectedTasks);\n  };\n\n  handleSelectAllCheckboxChange = () => {\n    const { allSelected } = this.getCancelSelectionState();\n    if (allSelected) {\n      this.deselectAllTasks();\n    } else {\n      this.selectAllInProgressTasks();\n    }\n  };\n\n  taskIsSelected = task => {\n    const { selectedTasksForCancel } = this.props;\n    return selectedTasksForCancel.findIndex(t => t.id === task.id) > -1;\n  };\n\n  selectAllInProgressTasks = () => {\n    const { incompleteTasks } = this.getCancelSelectionState();\n    const { updateSelectedTasksForCancelAction } = this.props;\n    updateSelectedTasksForCancelAction(incompleteTasks);\n  };\n\n  deselectAllTasks = () => {\n    const { deleteAllSelectedTasksForCancelAction } = this.props;\n    deleteAllSelectedTasksForCancelAction();\n  };\n\n  onCancelMigrationsCancel = () => {\n    this.setState({ showConfirmCancel: false });\n  };\n\n  onCancelMigrationsClick = () => {\n    this.setState({ showConfirmCancel: true });\n  };\n\n  onCancelMigrationsConfirm = () => {\n    // todo: call this from the Confirmation Modal instead\n    // gather the selected tasks in state and feed them through\n    const { selectedTasksForCancel } = this.props;\n    const { cancelPlanRequestTasksAction, cancelPlanRequestTasksUrl } = this.props;\n    cancelPlanRequestTasksAction(cancelPlanRequestTasksUrl, selectedTasksForCancel);\n    this.setState({ showConfirmCancel: false });\n  };\n\n  render() {\n    const { showConfirmCancel } = this.state;\n\n    const {\n      downloadLogInProgressTaskIds,\n      ansiblePlaybookTemplate,\n      planRequestTasks,\n      selectedTasksForCancel,\n      markedForCancellation,\n      filteredSortedPaginatedListItems,\n      renderFilterControls,\n      renderSortControls,\n      renderActiveFilters,\n      renderPaginationRow,\n      conversionHosts\n    } = this.props;\n\n    const { allSelected, noneSelected } = this.getCancelSelectionState();\n\n    const totalNumTasks = planRequestTasks.length;\n\n    const selectAllCheckbox = (\n      <input\n        type=\"checkbox\"\n        checked={allSelected}\n        onClick={event => {\n          // Don't open the dropdown when clicking directly on the checkbox.\n          event.stopPropagation();\n        }}\n        onChange={this.handleSelectAllCheckboxChange}\n      />\n    );\n\n    return (\n      <React.Fragment>\n        <Grid.Row>\n          <Toolbar>\n            <FormGroup style={{ paddingLeft: 0 }}>\n              <DropdownButton title={selectAllCheckbox} id=\"bulk-selector\">\n                <MenuItem eventKey=\"1\" disabled={allSelected} onClick={this.selectAllInProgressTasks}>\n                  {__('Select All')}\n                </MenuItem>\n                <MenuItem eventKey=\"2\" disabled={noneSelected} onClick={this.deselectAllTasks}>\n                  {__('Select None')}\n                </MenuItem>\n              </DropdownButton>\n            </FormGroup>\n            {renderFilterControls({ style: { paddingLeft: 20 } })}\n            {renderSortControls()}\n            <Toolbar.RightContent>\n              <Button disabled={selectedTasksForCancel.length === 0} onClick={this.onCancelMigrationsClick}>\n                {__('Cancel Migration')}\n              </Button>\n            </Toolbar.RightContent>\n            {renderActiveFilters(filteredSortedPaginatedListItems)}\n          </Toolbar>\n          {selectedTasksForCancel.length > 0 && (\n            <Toolbar>\n              <Toolbar.RightContent>\n                {sprintf(__('%s of %s selected'), selectedTasksForCancel.length, totalNumTasks)}\n              </Toolbar.RightContent>\n            </Toolbar>\n          )}\n        </Grid.Row>\n        <div style={{ overflow: 'auto', paddingBottom: 300, height: '100%' }}>\n          <ListView className=\"plan-request-details-list\">\n            {filteredSortedPaginatedListItems.items.map((task, n) => {\n              let taskMessage = task.message;\n              let taskCancelled = false;\n\n              if (markedForCancellation.find(t => t.id === task.id)) {\n                taskMessage = `${task.message}: ${__('Cancel request sent')}`;\n                taskCancelled = true;\n              }\n              switch (task.cancelation_status) {\n                case 'cancel_requested':\n                  taskMessage = `${task.message}: ${__('Cancel requested')}`;\n                  taskCancelled = true;\n                  break;\n                case 'canceling':\n                  taskMessage = `${task.message}: ${__('Canceling')}`;\n                  taskCancelled = true;\n                  break;\n                case 'canceled':\n                  taskMessage = `${task.message}: ${__('Canceled')}`;\n                  taskCancelled = true;\n                  break;\n                default:\n                  taskCancelled = false;\n              }\n\n              let leftContent;\n              if (task.message === 'Pending') {\n                leftContent = (\n                  <ListView.Icon\n                    type=\"pf\"\n                    name=\"pending\"\n                    size=\"md\"\n                    style={{ width: 'inherit', backgroundColor: 'transparent' }}\n                  />\n                );\n              } else if (taskCancelled && task.completed) {\n                taskMessage = `${task.message}: ${__('Migration cancelled')}`;\n                leftContent = (\n                  <ListView.Icon\n                    type=\"fa\"\n                    name=\"ban\"\n                    size=\"md\"\n                    style={{ width: 'inherit', backgroundColor: 'transparent' }}\n                  />\n                );\n              } else if (task.completed && !task.completedSuccessfully) {\n                leftContent = (\n                  <ListView.Icon\n                    type=\"pf\"\n                    name=\"error-circle-o\"\n                    size=\"md\"\n                    style={{ width: 'inherit', backgroundColor: 'transparent' }}\n                  />\n                );\n              } else if (task.completed) {\n                leftContent = (\n                  <ListView.Icon\n                    type=\"pf\"\n                    name=\"ok\"\n                    size=\"md\"\n                    style={{ width: 'inherit', backgroundColor: 'transparent' }}\n                  />\n                );\n              } else {\n                leftContent = <Spinner loading />;\n              }\n              const label = sprintf(__('%s of %s Migrated'), task.diskSpaceCompletedGb, task.totalDiskSpaceGb);\n\n              const popoverContent = (\n                <Popover\n                  id={`popover${task.id}${n}`}\n                  title={V2V_MIGRATION_STATUS_MESSAGES[task.message]}\n                  className=\"task-info-popover no-max-width\"\n                >\n                  <div>\n                    <div>\n                      <b>{__('Start Time')}: </b>\n                      {formatDateTime(task.startDateTime)}\n                    </div>\n                    <div>\n                      <b>{__('Conversion Host')}: </b>\n                      {conversionHosts[task.id] && conversionHosts[task.id].name}\n                    </div>\n                    <br />\n                    <div>\n                      <strong>{__('Status Detail')}: </strong>\n                      {task.options.progress &&\n                        task.options.progress.current_state &&\n                        task.options.progress.states &&\n                        task.options.progress.states[task.options.progress.current_state].message}\n                    </div>\n                    {task.log_available && (\n                      <div>\n                        <br />\n                        <strong>{__('Log:')}</strong>\n                        <br />\n                        {task.options.virtv2v_wrapper.v2v_log}\n                      </div>\n                    )}\n                  </div>\n                </Popover>\n              );\n\n              const statusMessage =\n                task.options.prePlaybookRunning || task.options.postPlaybookRunning ? (\n                  <div>\n                    <b>{__('Running playbook service')}: </b>\n                    {ansiblePlaybookTemplate.name}\n                  </div>\n                ) : (\n                  <div>\n                    <b>{__('Status')}: </b>\n                    {task.options.progress && V2V_MIGRATION_STATUS_MESSAGES[task.options.progress.current_description]}\n                  </div>\n                );\n              return (\n                <ListView.Item\n                  key={task.id}\n                  checkboxInput={\n                    <input\n                      type=\"checkbox\"\n                      disabled={taskCancelled || task.completed}\n                      checked={this.taskIsSelected(task)}\n                      onChange={() => {\n                        this.handleCheckboxChange(task);\n                      }}\n                    />\n                  }\n                  leftContent={leftContent}\n                  heading={task.vmName}\n                  additionalInfo={[\n                    <ListView.InfoItem\n                      key={`${task.id}-message`}\n                      style={{\n                        flexDirection: 'column',\n                        alignItems: 'flex-start',\n                        marginRight: 80,\n                        minWidth: 200\n                      }}\n                    >\n                      <div>\n                        <div style={{ display: 'inline-block', textAlign: 'left' }}>\n                          <span>{taskMessage}</span>\n                          {statusMessage}\n                        </div>\n                        &nbsp;\n                        {/* Todo: revisit FieldLevelHelp props in patternfly-react to support this */}\n                        <OverlayTrigger\n                          rootClose\n                          trigger=\"click\"\n                          onEnter={() => this.overlayTriggerClick(task)}\n                          placement=\"left\"\n                          overlay={popoverContent}\n                        >\n                          <Button bsStyle=\"link\">\n                            <Icon type=\"pf\" name=\"info\" />\n                          </Button>\n                        </OverlayTrigger>\n                      </div>\n                      <div>\n                        <ListView.Icon type=\"fa\" size=\"lg\" name=\"clock-o\" />\n                        <TickingIsoElapsedTime\n                          startTime={task.startDateTime}\n                          endTime={task.completed ? task.lastUpdateDateTime : null}\n                        />\n                      </div>\n                    </ListView.InfoItem>,\n                    <ListView.InfoItem key={`${task.id}-times`} style={{ minWidth: 150, paddingRight: 20 }}>\n                      <UtilizationBar\n                        now={task.percentComplete}\n                        min={0}\n                        max={100}\n                        description={label}\n                        label=\" \"\n                        usedTooltipFunction={(max, now) => (\n                          <Tooltip id={Date.now()}>\n                            {now} % {__('Migrated')}\n                          </Tooltip>\n                        )}\n                        availableTooltipFunction={(max, now) => (\n                          <Tooltip id={Date.now()}>\n                            {max - now} % {__('Remaining')}\n                          </Tooltip>\n                        )}\n                        descriptionPlacementTop\n                      />\n                    </ListView.InfoItem>\n                  ]}\n                  actions={\n                    <DropdownButton\n                      id={`${task.id}-${task.descriptionPrefix}_download_log_dropdown`}\n                      title={__('Download Log')}\n                      pullRight\n                      onSelect={eventKey => this.onSelect(eventKey, task)}\n                      disabled={\n                        !task.log_available ||\n                        (downloadLogInProgressTaskIds &&\n                          downloadLogInProgressTaskIds.find(element => element === task.id) &&\n                          !task.options.prePlaybookComplete &&\n                          !task.options.postPlaybookComplete)\n                      }\n                    >\n                      {task.options.prePlaybookComplete && (\n                        <MenuItem\n                          eventKey=\"preMigration\"\n                          disabled={downloadLogInProgressTaskIds && downloadLogInProgressTaskIds.indexOf(task.id) > -1}\n                        >\n                          {__('Premigration log')}\n                        </MenuItem>\n                      )}\n                      <MenuItem\n                        eventKey=\"migration\"\n                        disabled={downloadLogInProgressTaskIds && downloadLogInProgressTaskIds.indexOf(task.id) > -1}\n                      >\n                        {__('Migration log')}\n                      </MenuItem>\n                      <MenuItem\n                        eventKey=\"wrapper\"\n                        disabled={downloadLogInProgressTaskIds && downloadLogInProgressTaskIds.indexOf(task.id) > -1}\n                      >\n                        {__('Virt-v2v-wrapper log')}\n                      </MenuItem>\n                      {task.options.postPlaybookComplete && (\n                        <MenuItem\n                          eventKey=\"postMigration\"\n                          disabled={downloadLogInProgressTaskIds && downloadLogInProgressTaskIds.indexOf(task.id) > -1}\n                        >\n                          {__('Postmigration log')}\n                        </MenuItem>\n                      )}\n                    </DropdownButton>\n                  }\n                  stacked\n                />\n              );\n            })}\n          </ListView>\n          {renderPaginationRow(filteredSortedPaginatedListItems)}\n        </div>\n        <ConfirmModal\n          show={showConfirmCancel}\n          title={__('Cancel Migrations')}\n          body={\n            <React.Fragment>\n              <p>\n                {__('If you cancel, these VMs will not be migrated and will be fully restored in the source provider.')}\n              </p>\n              <ul>\n                {selectedTasksForCancel.map(task => (\n                  <li key={task.id}>{task.vmName}</li>\n                ))}\n              </ul>\n              <p>{__('Do you want to cancel?')}</p>\n            </React.Fragment>\n          }\n          cancelButtonLabel={__('No')}\n          confirmButtonLabel={__('Cancel Migrations')}\n          onConfirm={this.onCancelMigrationsConfirm}\n          onCancel={this.onCancelMigrationsCancel}\n        />\n      </React.Fragment>\n    );\n  }\n}\n\nPlanRequestDetailList.propTypes = {\n  planRequestTasks: PropTypes.array,\n  downloadLogAction: PropTypes.func,\n  downloadLogInProgressTaskIds: PropTypes.array,\n  plan: PropTypes.object,\n  fetchAnsiblePlaybookTemplateUrl: PropTypes.string,\n  fetchAnsiblePlaybookTemplateAction: PropTypes.func,\n  ansiblePlaybookTemplate: PropTypes.object,\n  fetchOrchestrationStackUrl: PropTypes.string,\n  fetchOrchestrationStackAction: PropTypes.func,\n  cancelPlanRequestTasksAction: PropTypes.func,\n  cancelPlanRequestTasksUrl: PropTypes.string,\n  selectedTasksForCancel: PropTypes.array,\n  updateSelectedTasksForCancelAction: PropTypes.func,\n  deleteAllSelectedTasksForCancelAction: PropTypes.func,\n  markedForCancellation: PropTypes.array,\n  failedMigrations: PropTypes.array,\n  successfulMigrations: PropTypes.array,\n  notificationsSentList: PropTypes.array,\n  dispatchVMTasksCompletionNotificationAction: PropTypes.func,\n  filteredListItems: PropTypes.array,\n  filteredSortedPaginatedListItems: PropTypes.object,\n  renderFilterControls: PropTypes.func,\n  renderSortControls: PropTypes.func,\n  renderActiveFilters: PropTypes.func,\n  renderPaginationRow: PropTypes.func,\n  conversionHosts: PropTypes.object,\n  fetchConversionHostAction: PropTypes.func,\n  fetchConversionHostUrl: PropTypes.string\n};\n\nPlanRequestDetailList.defaultProps = {\n  fetchConversionHostUrl: REQUEST_TASKS_URL\n};\n\nexport default PlanRequestDetailList;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Immutable from 'seamless-immutable';\nimport { Breadcrumb, Spinner, Icon } from 'patternfly-react';\nimport Toolbar from '../../../config/Toolbar';\nimport PlanRequestDetailList from './components/PlanRequestDetailList/PlanRequestDetailList';\nimport PlanVmsList from './components/PlanVmsList';\nimport PlanEmptyState from './components/PlanEmptyState';\nimport getMostRecentRequest from '../common/getMostRecentRequest';\nimport ListViewToolbar from '../common/ListViewToolbar/ListViewToolbar';\nimport {\n  ACTIVE_PLAN_FILTER_TYPES,\n  FINISHED_PLAN_FILTER_TYPES,\n  ACTIVE_PLAN_SORT_FIELDS,\n  FINISHED_PLAN_SORT_FIELDS\n} from './components/PlanRequestDetailList/PlanRequestDetailListConstants';\nimport { REQUEST_TASKS_URL } from './PlanConstants';\n\nclass Plan extends React.Component {\n  static getDerivedStateFromProps(nextProps, prevState) {\n    if (!prevState.planNotStarted && nextProps.planRequestTasks === prevState.planRequestTasks) {\n      return null;\n    }\n    return {\n      planRequestTasks: nextProps.planRequestTasks,\n      planRequestTasksMutable: Immutable.asMutable(nextProps.planRequestTasks),\n      vms: nextProps.vms,\n      vmsMutable: Immutable.asMutable(nextProps.vms),\n      planNotStarted: nextProps.planRequestTasks.length === 0,\n      planRequestPreviouslyFetched: nextProps.planRequestPreviouslyFetched\n    };\n  }\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      planRequestTasksMutable: Immutable.asMutable(props.planRequestTasks),\n      vmsMutable: [],\n      planNotStarted: false,\n      planFinished: false,\n      planRequestPreviouslyFetched: false\n    };\n\n    this.props.resetPlanStateAction();\n    this.willUnmount = false;\n  }\n\n  componentDidMount() {\n    const {\n      fetchPlanUrl,\n      fetchPlanAction,\n      planId,\n      fetchTasksForAllRequestsForPlanUrl,\n      fetchTasksForAllRequestsForPlanAction,\n      queryPlanVmsAction\n    } = this.props;\n\n    fetchPlanAction(fetchPlanUrl, planId).then(({ value: { data: plan } }) => {\n      const {\n        miq_requests,\n        options: {\n          config_info: { actions }\n        }\n      } = plan;\n\n      let vm_ids = [];\n      if (actions && actions.length) {\n        vm_ids = actions.map(a => a.vm_id);\n      }\n\n      if (miq_requests.length > 0) {\n        const mostRecentRequest = getMostRecentRequest(miq_requests);\n        fetchTasksForAllRequestsForPlanAction(fetchTasksForAllRequestsForPlanUrl, miq_requests);\n        if (mostRecentRequest.request_state === 'active' && !this.pollingInterval && !this.willUnmount) {\n          this.startPolling(miq_requests);\n        } else {\n          this.setState(() => ({\n            planFinished: true\n          }));\n        }\n      } else {\n        queryPlanVmsAction(vm_ids);\n      }\n    });\n  }\n\n  componentWillUnmount() {\n    this.willUnmount = true;\n    const { resetPlanStateAction } = this.props;\n    this.stopPolling();\n    resetPlanStateAction();\n  }\n\n  startPolling = requests => {\n    const { fetchTasksForAllRequestsForPlanAction, fetchTasksForAllRequestsForPlanUrl } = this.props;\n    this.pollingInterval = setInterval(() => {\n      fetchTasksForAllRequestsForPlanAction(fetchTasksForAllRequestsForPlanUrl, requests);\n    }, 15000);\n  };\n\n  stopPolling = () => {\n    if (this.pollingInterval) {\n      clearInterval(this.pollingInterval);\n      this.pollingInterval = null;\n    }\n  };\n\n  render() {\n    const {\n      plan,\n      planName,\n      planArchived,\n      planRequestFailed,\n      planRequestDenied,\n      isRejectedPlanRequest,\n      isFetchingPlanRequest,\n      isRejectedPlan,\n      isFetchingPlan,\n      isQueryingVms,\n      isRejectedVms,\n      downloadLogAction,\n      downloadLogInProgressTaskIds,\n      fetchAnsiblePlaybookTemplateAction,\n      fetchPlanUrl,\n      ansiblePlaybookTemplate,\n      fetchOrchestrationStackUrl,\n      fetchOrchestrationStackAction,\n      orchestrationStack,\n      cancelPlanRequestTasksAction,\n      cancelPlanRequestTasksUrl,\n      selectedTasksForCancel,\n      updateSelectedTasksForCancelAction,\n      deleteAllSelectedTasksForCancelAction,\n      markedForCancellation,\n      failedMigrations,\n      successfulMigrations,\n      notificationsSentList,\n      dispatchVMTasksCompletionNotificationAction,\n      fetchConversionHostAction,\n      conversionHosts\n    } = this.props;\n\n    const {\n      planRequestTasksMutable,\n      vmsMutable,\n      planNotStarted,\n      planFinished,\n      planRequestPreviouslyFetched\n    } = this.state;\n\n    const icons = {\n      inProgress: <Icon type=\"pf\" name=\"spinner2\" />,\n      success: <Icon type=\"pf\" name=\"ok\" />,\n      failed: <Icon type=\"pf\" name=\"error-circle-o\" />,\n      archived: <Icon type=\"fa\" name=\"archive\" />\n    };\n    const breadcrumbIcon =\n      ((planRequestFailed || planRequestDenied) && icons.failed) ||\n      (planArchived && icons.archived) ||\n      (planFinished && icons.success) ||\n      (!planNotStarted && icons.inProgress) ||\n      null;\n\n    return (\n      <React.Fragment>\n        <Toolbar>\n          <Breadcrumb.Item active>{__('Compute')}</Breadcrumb.Item>\n          <Breadcrumb.Item active>{__('Migration')}</Breadcrumb.Item>\n          <Breadcrumb.Item href=\"#/plans\">{__('Migration Plans')}</Breadcrumb.Item>\n          {!isRejectedPlan &&\n            planName && (\n              <Breadcrumb.Item active>\n                <strong>\n                  {breadcrumbIcon}\n                  {breadcrumbIcon ? ` ${planName}` : planName}\n                </strong>\n              </Breadcrumb.Item>\n            )}\n        </Toolbar>\n\n        <Spinner loading={(isFetchingPlan || isFetchingPlanRequest || isQueryingVms) && !planRequestPreviouslyFetched}>\n          {!planNotStarted &&\n            planRequestPreviouslyFetched &&\n            !isRejectedPlanRequest &&\n            planRequestTasksMutable.length > 0 && (\n              <ListViewToolbar\n                filterTypes={planFinished ? FINISHED_PLAN_FILTER_TYPES : ACTIVE_PLAN_FILTER_TYPES}\n                sortFields={planFinished ? FINISHED_PLAN_SORT_FIELDS : ACTIVE_PLAN_SORT_FIELDS}\n                listItems={planRequestTasksMutable}\n                defaultSortTypeIndex={1}\n              >\n                {({\n                  filteredListItems,\n                  filteredSortedPaginatedListItems,\n                  renderFilterControls,\n                  renderSortControls,\n                  renderActiveFilters,\n                  renderPaginationRow\n                }) => (\n                  <PlanRequestDetailList\n                    plan={plan}\n                    planFinished={planFinished}\n                    planRequestTasks={planRequestTasksMutable}\n                    downloadLogAction={downloadLogAction}\n                    downloadLogInProgressTaskIds={downloadLogInProgressTaskIds}\n                    fetchAnsiblePlaybookTemplateAction={fetchAnsiblePlaybookTemplateAction}\n                    fetchAnsiblePlaybookTemplateUrl={fetchPlanUrl}\n                    ansiblePlaybookTemplate={ansiblePlaybookTemplate}\n                    fetchOrchestrationStackUrl={fetchOrchestrationStackUrl}\n                    fetchOrchestrationStackAction={fetchOrchestrationStackAction}\n                    orchestrationStack={orchestrationStack}\n                    cancelPlanRequestTasksUrl={cancelPlanRequestTasksUrl}\n                    cancelPlanRequestTasksAction={cancelPlanRequestTasksAction}\n                    selectedTasksForCancel={selectedTasksForCancel}\n                    updateSelectedTasksForCancelAction={updateSelectedTasksForCancelAction}\n                    deleteAllSelectedTasksForCancelAction={deleteAllSelectedTasksForCancelAction}\n                    markedForCancellation={markedForCancellation}\n                    failedMigrations={failedMigrations}\n                    successfulMigrations={successfulMigrations}\n                    notificationsSentList={notificationsSentList}\n                    dispatchVMTasksCompletionNotificationAction={dispatchVMTasksCompletionNotificationAction}\n                    filteredListItems={filteredListItems}\n                    filteredSortedPaginatedListItems={filteredSortedPaginatedListItems}\n                    renderFilterControls={renderFilterControls}\n                    renderSortControls={renderSortControls}\n                    renderActiveFilters={renderActiveFilters}\n                    renderPaginationRow={renderPaginationRow}\n                    fetchConversionHostAction={fetchConversionHostAction}\n                    conversionHosts={conversionHosts}\n                  />\n                )}\n              </ListViewToolbar>\n            )}\n          {!planNotStarted &&\n            planRequestPreviouslyFetched &&\n            planRequestTasksMutable.length === 0 && (\n              <PlanEmptyState\n                title={__('No Migration Tasks.')}\n                iconType=\"pf\"\n                iconName=\"warning-triangle-o\"\n                description={__('No VM migration tasks have been started for this plan. Please refresh and try again.')}\n              />\n            )}\n          {planNotStarted && !isRejectedVms && vmsMutable.length > 0 && <PlanVmsList planVms={vmsMutable} />}\n          {planNotStarted &&\n            planRequestDenied && (\n              <PlanEmptyState\n                title={__('Migration Failed')}\n                iconType=\"pf\"\n                iconName=\"error-circle-o\"\n                description={\n                  <React.Fragment>\n                    {__('Unable to migrate VMs because no conversion host was configured at the time of the attempted migration.') /* prettier-ignore */}{' '}\n                    {__('See the product documentation for information on configuring conversion hosts.')}\n                  </React.Fragment>\n                }\n                descriptionIsNode\n              />\n            )}\n          {planNotStarted &&\n            !planRequestDenied &&\n            vmsMutable.length === 0 && (\n              <PlanEmptyState\n                title={__('No VMs')}\n                iconType=\"pf\"\n                iconName=\"warning-triangle-o\"\n                description={__('No VMs were returned for this migration plan. Please refresh and try again.')}\n              />\n            )}\n        </Spinner>\n        {(isRejectedPlanRequest || isRejectedPlan || isRejectedVms) && (\n          <PlanEmptyState\n            title={__('Unable to retrieve migration details.')}\n            iconType=\"pf\"\n            iconName=\"error-circle-o\"\n            description={\n              __('Sorry, we were unable to retrieve migration details at this time. Please refresh and try again.') // prettier-ignore\n            }\n          />\n        )}\n      </React.Fragment>\n    );\n  }\n}\nPlan.propTypes = {\n  fetchTasksForAllRequestsForPlanUrl: PropTypes.string,\n  fetchTasksForAllRequestsForPlanAction: PropTypes.func.isRequired,\n  planName: PropTypes.string,\n  planRequestFailed: PropTypes.bool,\n  planRequestDenied: PropTypes.bool,\n  planArchived: PropTypes.bool,\n  planRequestTasks: PropTypes.array,\n  isRejectedPlanRequest: PropTypes.bool,\n  isFetchingPlanRequest: PropTypes.bool,\n  planRequestPreviouslyFetched: PropTypes.bool, // eslint-disable-line react/no-unused-prop-types\n  errorPlanRequest: PropTypes.object, // eslint-disable-line react/no-unused-prop-types\n  fetchPlanUrl: PropTypes.string,\n  fetchPlanAction: PropTypes.func,\n  isFetchingPlan: PropTypes.bool,\n  isRejectedPlan: PropTypes.bool,\n  planId: PropTypes.string,\n  queryPlanVmsAction: PropTypes.func,\n  isQueryingVms: PropTypes.bool,\n  isRejectedVms: PropTypes.bool,\n  resetPlanStateAction: PropTypes.func,\n  downloadLogAction: PropTypes.func,\n  downloadLogInProgressTaskIds: PropTypes.array,\n  plan: PropTypes.object,\n  fetchAnsiblePlaybookTemplateAction: PropTypes.func,\n  ansiblePlaybookTemplate: PropTypes.object,\n  fetchOrchestrationStackUrl: PropTypes.string,\n  fetchOrchestrationStackAction: PropTypes.func,\n  orchestrationStack: PropTypes.object,\n  cancelPlanRequestTasksAction: PropTypes.func,\n  cancelPlanRequestTasksUrl: PropTypes.string,\n  selectedTasksForCancel: PropTypes.array,\n  updateSelectedTasksForCancelAction: PropTypes.func,\n  deleteAllSelectedTasksForCancelAction: PropTypes.func,\n  markedForCancellation: PropTypes.array,\n  failedMigrations: PropTypes.array,\n  successfulMigrations: PropTypes.array,\n  notificationsSentList: PropTypes.array,\n  dispatchVMTasksCompletionNotificationAction: PropTypes.func,\n  fetchConversionHostAction: PropTypes.func,\n  conversionHosts: PropTypes.object\n};\nPlan.defaultProps = {\n  planName: '',\n  planRequestTasks: [],\n  isRejectedPlanRequest: false,\n  isFetchingPlanRequest: false,\n  planRequestPreviouslyFetched: false,\n  errorPlanRequest: null,\n  fetchPlanUrl: '/api/service_templates',\n  fetchTasksForAllRequestsForPlanUrl: '/api/requests?expand=resource&attributes=miq_request_tasks',\n  fetchOrchestrationStackUrl: '/api/orchestration_stacks',\n  cancelPlanRequestTasksUrl: REQUEST_TASKS_URL\n};\nexport default Plan;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Form, Grid, OverlayTrigger, Popover, Button, Icon } from 'patternfly-react';\nimport { Field } from 'redux-form';\n\nexport const FormField = ({\n  input,\n  label,\n  required,\n  controlId,\n  type,\n  options,\n  optionKey,\n  optionValue,\n  labelWidth,\n  controlWidth,\n  meta: { touched, error },\n  help,\n  maxLength,\n  maxLengthWarning,\n  info,\n  children,\n  ...props\n}) => {\n  const warning = maxLength && input.value.length >= maxLength && maxLengthWarning;\n  const validationState = (touched && error && 'error') || (warning && 'warning') || null;\n  const formGroupProps = {\n    key: { label },\n    controlId,\n    validationState,\n    ...props\n  };\n\n  const onChangeWithMaxLength = event => {\n    const newValue = event.target.value;\n    if (maxLength && newValue.length > maxLength) return; // Don't even tell redux-form about values over the max.\n    input.onChange(event);\n  };\n\n  const renderField = () => {\n    if (children) return children({ input });\n\n    let field;\n    switch (type) {\n      case 'textarea':\n        field = <Form.FormControl {...input} onChange={onChangeWithMaxLength} type={type} componentClass=\"textarea\" />;\n        break;\n      case 'text':\n        field = <Form.FormControl {...input} onChange={onChangeWithMaxLength} type={type} />;\n        break;\n      case 'select':\n        field = (\n          <select className=\"form-control\" {...input}>\n            <option disabled value=\"\">{`<${__('Choose')}>`}</option>\n            {options.map(val => (\n              <option value={val[optionKey]} key={val[optionValue]}>\n                {val[optionValue]}\n              </option>\n            ))}\n          </select>\n        );\n        break;\n      case 'radio':\n        field = options.map(val => (\n          <div key={val.id}>\n            <label htmlFor={input.name}>\n              <Field name={input.name} component=\"input\" type=\"radio\" value={val.id} />\n              {` ${val.name}`}\n            </label>\n            <br />\n          </div>\n        ));\n        break;\n      default:\n    }\n    return field;\n  };\n\n  const renderInfoPopover = () => {\n    if (!info) return null;\n    return (\n      <OverlayTrigger\n        rootClose\n        trigger=\"click\"\n        placement=\"top\"\n        overlay={\n          <Popover id={`info-popover-${input.name}`} style={{ width: 400 }}>\n            {info}\n          </Popover>\n        }\n      >\n        <Button bsStyle=\"link\">\n          <Icon type=\"pf\" name=\"info\" />\n        </Button>\n      </OverlayTrigger>\n    );\n  };\n\n  return (\n    <Form.FormGroup {...formGroupProps}>\n      <Grid.Col componentClass={Form.ControlLabel} sm={Number.parseInt(labelWidth, 10) || 2}>\n        {required && <span className=\"required-asterisk\">* </span>}\n        {label}\n        {renderInfoPopover()}\n      </Grid.Col>\n      <Grid.Col sm={Number.parseInt(controlWidth, 10) || 9} id={input.name}>\n        {renderField()}\n        {(help || (touched && error) || warning) && (\n          <Form.HelpBlock>\n            {(touched && error) || warning || help // If we have any of these, render one of them, in priority order.\n            }\n          </Form.HelpBlock>\n        )}\n      </Grid.Col>\n    </Form.FormGroup>\n  );\n};\n\nFormField.propTypes = {\n  label: PropTypes.string,\n  input: PropTypes.object,\n  required: PropTypes.bool,\n  controlId: PropTypes.string,\n  type: PropTypes.string,\n  options: PropTypes.array,\n  optionKey: PropTypes.string,\n  optionValue: PropTypes.string,\n  labelWidth: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  controlWidth: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  meta: PropTypes.object,\n  help: PropTypes.oneOfType([PropTypes.string, PropTypes.node]),\n  maxLength: PropTypes.number,\n  maxLengthWarning: PropTypes.string,\n  info: PropTypes.oneOfType([PropTypes.string, PropTypes.node]),\n  children: PropTypes.func\n};\n","import Immutable from 'seamless-immutable';\n\nimport {\n  V2V_FETCH_SERVERS,\n  V2V_FETCH_SETTINGS,\n  V2V_PATCH_SETTINGS,\n  FETCH_V2V_CONVERSION_HOSTS,\n  FETCH_V2V_CONVERSION_HOST_TASKS,\n  SHOW_V2V_CONVERSION_HOST_WIZARD,\n  HIDE_V2V_CONVERSION_HOST_WIZARD,\n  V2V_CONVERSION_HOST_WIZARD_EXITED,\n  POST_V2V_CONVERSION_HOSTS,\n  SET_V2V_CONVERSION_HOST_TO_DELETE,\n  SHOW_V2V_CONVERSION_HOST_DELETE_MODAL,\n  HIDE_V2V_CONVERSION_HOST_DELETE_MODAL,\n  DELETE_V2V_CONVERSION_HOST,\n  SET_V2V_CONVERSION_HOST_TASK_TO_RETRY,\n  SHOW_V2V_CONVERSION_HOST_RETRY_MODAL,\n  HIDE_V2V_CONVERSION_HOST_RETRY_MODAL,\n  V2V_CONVERSION_HOST_RETRY_MODAL_EXITED\n} from './SettingsConstants';\n\nimport {\n  getFormValuesFromApiSettings,\n  parseConversionHostTasksMetadata,\n  indexConversionHostTasksByResource\n} from './helpers';\n\nexport const initialState = Immutable({\n  conversionHosts: [],\n  conversionHostTasks: [],\n  conversionHostTasksByResource: {},\n  conversionHostToDelete: null,\n  conversionHostDeleteModalVisible: false,\n  conversionHostRetryModalMounted: false,\n  conversionHostRetryModalVisible: false,\n  conversionHostTaskToRetry: null,\n  conversionHostWizardMounted: false,\n  conversionHostWizardVisible: false,\n  errorDeleteConversionHost: false,\n  errorFetchingConversionHosts: null,\n  errorFetchingConversionHostTasks: null,\n  errorFetchingServers: null,\n  errorFetchingSettings: null,\n  errorPostingConversionHosts: null,\n  errorSavingSettings: null,\n  fetchingServersRejected: false,\n  fetchingSettingsRejected: false,\n  isDeletingConversionHost: false,\n  isFetchingConversionHosts: false,\n  isFetchingConversionHostTasks: false,\n  isFetchingServers: false,\n  isFetchingSettings: false,\n  isPostingConversionHosts: false,\n  isRejectedDeletingConversionHost: false,\n  isRejectedFetchingConversionHosts: false,\n  isRejectedFetchingConversionHostTasks: false,\n  isRejectedPostingConversionHosts: false,\n  isSavingSettings: false,\n  postConversionHostsResults: [],\n  savedSettings: {},\n  savingSettingsRejected: false,\n  servers: []\n});\n\nexport default (state = initialState, action) => {\n  switch (action.type) {\n    case `${V2V_FETCH_SERVERS}_PENDING`:\n      return state\n        .set('isFetchingServers', true)\n        .set('fetchingServersRejected', false)\n        .set('errorFetchingServers', null);\n    case `${V2V_FETCH_SERVERS}_REJECTED`:\n      return state\n        .set('isFetchingServers', false)\n        .set('fetchingServersRejected', true)\n        .set('errorFetchingServers', action.payload);\n    case `${V2V_FETCH_SERVERS}_FULFILLED`:\n      return state\n        .set('isFetchingServers', false)\n        .set('fetchingServersRejected', false)\n        .set('errorFetchingServers', null)\n        .set('servers', action.payload.data.resources);\n\n    case `${V2V_FETCH_SETTINGS}_PENDING`:\n      return state\n        .set('isFetchingSettings', true)\n        .set('fetchingSettingsRejected', false)\n        .set('errorFetchingSettings', null);\n    case `${V2V_FETCH_SETTINGS}_REJECTED`:\n      return state\n        .set('isFetchingSettings', false)\n        .set('fetchingSettingsRejected', true)\n        .set('errorFetchingSettings', action.payload);\n    case `${V2V_FETCH_SETTINGS}_FULFILLED`:\n      return state\n        .set('isFetchingSettings', false)\n        .set('fetchingSettingsRejected', false)\n        .set('errorFetchingSettings', null)\n        .set('savedSettings', getFormValuesFromApiSettings(action.payload.data));\n\n    case `${V2V_PATCH_SETTINGS}_PENDING`:\n      return state\n        .set('isSavingSettings', true)\n        .set('savingSettingsRejected', false)\n        .set('errorSavingSettings', null);\n    case `${V2V_PATCH_SETTINGS}_REJECTED`:\n      return state\n        .set('isSavingSettings', false)\n        .set('savingSettingsRejected', true)\n        .set('errorSavingSettings', action.payload);\n    case `${V2V_PATCH_SETTINGS}_FULFILLED`:\n      return state\n        .set('isSavingSettings', false)\n        .set('savingSettingsRejected', false)\n        .set('errorSavingSettings', null)\n        .set('savedSettings', getFormValuesFromApiSettings(action.payload));\n\n    case `${FETCH_V2V_CONVERSION_HOSTS}_PENDING`:\n      return state\n        .set('isFetchingConversionHosts', true)\n        .set('isRejectedFetchingConversionHosts', false)\n        .set('errorFetchingConversionHosts', null);\n    case `${FETCH_V2V_CONVERSION_HOSTS}_FULFILLED`:\n      return state\n        .set('conversionHosts', action.payload.data.resources)\n        .set('isFetchingConversionHosts', false)\n        .set('isRejectedFetchingConversionHosts', false)\n        .set('errorFetchingConversionHosts', null);\n    case `${FETCH_V2V_CONVERSION_HOSTS}_REJECTED`:\n      return state\n        .set('isFetchingConversionHosts', false)\n        .set('isRejectedFetchingConversionHosts', true)\n        .set('errorFetchingConversionHosts', action.payload);\n\n    case `${FETCH_V2V_CONVERSION_HOST_TASKS}_PENDING`:\n      return state\n        .set('isFetchingConversionHostTasks', true)\n        .set('isRejectedFetchingConversionHostTasks', false)\n        .set('errorFetchingConversionHostTasks', null);\n    case `${FETCH_V2V_CONVERSION_HOST_TASKS}_FULFILLED`: {\n      const tasksWithMetadata = parseConversionHostTasksMetadata(action.payload.data.resources);\n      const tasksByResource = indexConversionHostTasksByResource(tasksWithMetadata);\n      return state\n        .set('conversionHostTasks', tasksWithMetadata)\n        .set('conversionHostTasksByResource', tasksByResource)\n        .set('isFetchingConversionHostTasks', false)\n        .set('isRejectedFetchingConversionHostTasks', false)\n        .set('errorFetchingConversionHostTasks', null);\n    }\n    case `${FETCH_V2V_CONVERSION_HOST_TASKS}_REJECTED`:\n      return state\n        .set('isFetchingConversionHostTasks', false)\n        .set('isRejectedFetchingConversionHostTasks', true)\n        .set('errorFetchingConversionHostTasks', action.payload);\n\n    case SHOW_V2V_CONVERSION_HOST_WIZARD:\n      return state.set('conversionHostWizardMounted', true).set('conversionHostWizardVisible', true);\n    case HIDE_V2V_CONVERSION_HOST_WIZARD:\n      return state.set('conversionHostWizardVisible', false);\n    case V2V_CONVERSION_HOST_WIZARD_EXITED:\n      return state.set('conversionHostWizardMounted', false);\n\n    case `${POST_V2V_CONVERSION_HOSTS}_PENDING`:\n      return state\n        .set('isPostingConversionHosts', true)\n        .set('isRejectedPostingConversionHosts', false)\n        .set('errorPostingConversionHosts', false);\n    case `${POST_V2V_CONVERSION_HOSTS}_FULFILLED`:\n      return state\n        .set('isPostingConversionHosts', false)\n        .set('isRejectedPostingConversionHosts', false)\n        .set('errorPostingConversionHosts', null)\n        .set('postConversionHostsResults', action.payload);\n    case `${POST_V2V_CONVERSION_HOSTS}_REJECTED`:\n      return state\n        .set('isPostingConversionHosts', false)\n        .set('isRejectedPostingConversionHosts', true)\n        .set('errorPostingConversionHosts', action.payload);\n    case SET_V2V_CONVERSION_HOST_TO_DELETE:\n      return state.set('conversionHostToDelete', action.payload);\n    case SHOW_V2V_CONVERSION_HOST_DELETE_MODAL:\n      return state.set('conversionHostDeleteModalVisible', true);\n    case HIDE_V2V_CONVERSION_HOST_DELETE_MODAL:\n      return state.set('conversionHostDeleteModalVisible', false);\n\n    case `${DELETE_V2V_CONVERSION_HOST}_PENDING`:\n      return state.set('isDeletingConversionHost', action.payload);\n    case `${DELETE_V2V_CONVERSION_HOST}_FULFILLED`:\n      return state\n        .set('deleteConversionHostResponse', action.payload.data)\n        .set('isDeletingConversionHost', null)\n        .set('isRejectedDeletingConversionHost', false)\n        .set('errorDeleteConversionHost', null)\n        .set('conversionHostDeleteModalVisible', false);\n    case `${DELETE_V2V_CONVERSION_HOST}_REJECTED`:\n      return state\n        .set('errorDeleteConversionHost', action.payload)\n        .set('isRejectedDeletingConversionHost', true)\n        .set('isDeletingConversionHost', null)\n        .set('conversionHostDeleteModalVisible', false);\n\n    case SET_V2V_CONVERSION_HOST_TASK_TO_RETRY:\n      return state.set('conversionHostTaskToRetry', action.payload);\n    case SHOW_V2V_CONVERSION_HOST_RETRY_MODAL:\n      return state.set('conversionHostRetryModalMounted', true).set('conversionHostRetryModalVisible', true);\n    case HIDE_V2V_CONVERSION_HOST_RETRY_MODAL:\n      return state.set('conversionHostRetryModalVisible', false);\n    case V2V_CONVERSION_HOST_RETRY_MODAL_EXITED:\n      return state.set('conversionHostRetryModalMounted', false);\n\n    default:\n      return state;\n  }\n};\n","import { stepIDs } from './ConversionHostWizardConstants';\n\nexport const conversionHostWizardFormFilter = form =>\n  Object.values(stepIDs).reduce(\n    (newObject, stepID) => ({\n      ...newObject,\n      [stepID]: form[stepID]\n    }),\n    {}\n  );\n","import { OPENSTACK } from '../../../../../../../../../common/constants';\nimport { VDDK } from '../ConversionHostWizardConstants';\n\nexport const getConfigureConversionHostPostBodies = (locationStepValues, hostsStepValues, authStepValues) =>\n  hostsStepValues.hosts.map(host => {\n    const vmwareAuthProperties =\n      authStepValues.transformationMethod === VDDK\n        ? { vmware_vddk_package_url: authStepValues.vddkLibraryPath }\n        : { vmware_ssh_private_key: authStepValues.vmwareSshKey.body };\n    return {\n      name: host.name,\n      resource_type: host.type,\n      resource_id: host.id,\n      conversion_host_ssh_private_key: authStepValues.conversionHostSshKey.body,\n      auth_user: locationStepValues.providerType === OPENSTACK ? authStepValues.openstackUser : 'root',\n      ...vmwareAuthProperties\n    };\n  });\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport WizardLoadingState from '../../../../../../common/WizardLoadingState';\nimport WizardErrorState from '../../../../../../common/WizardErrorState';\n\nclass ConversionHostWizardResultsStep extends React.Component {\n  componentDidMount() {\n    const { postBodies, postConversionHostsAction, postConversionHostsUrl } = this.props;\n    postConversionHostsAction(postConversionHostsUrl, postBodies);\n  }\n\n  render() {\n    const { isPostingConversionHosts, isRejectedPostingConversionHosts, postConversionHostsResults } = this.props;\n\n    if (isPostingConversionHosts) {\n      return <WizardLoadingState title={__('Starting Conversion Host Configuration...')} />;\n    }\n\n    if (isRejectedPostingConversionHosts) {\n      return (\n        <WizardErrorState\n          title={__('Error Starting Conversion Host Configuration')}\n          message={__(\"We're sorry, something went wrong. Please try again.\")}\n        />\n      );\n    }\n\n    if (postConversionHostsResults) {\n      return (\n        <div className=\"wizard-pf-complete blank-slate-pf\">\n          <div className=\"modal-wizard-results-grey-icon\">\n            <span className=\"fa fa-clock-o\" />\n          </div>\n          <h3 className=\"blank-slate-pf-main-action\">{__('Conversion host configuration is in progress.')}</h3>\n          <p className=\"blank-slate-pf-secondary-action\">\n            {__('This may take a few minutes. Progress of the configuration will be shown on the Conversion Hosts page.') /* prettier-ignore */}\n          </p>\n        </div>\n      );\n    }\n\n    return null;\n  }\n}\n\nConversionHostWizardResultsStep.propTypes = {\n  postBodies: PropTypes.arrayOf(PropTypes.object),\n  postConversionHostsAction: PropTypes.func,\n  postConversionHostsUrl: PropTypes.string,\n  isPostingConversionHosts: PropTypes.bool,\n  isRejectedPostingConversionHosts: PropTypes.bool,\n  postConversionHostsResults: PropTypes.arrayOf(PropTypes.object)\n};\n\nConversionHostWizardResultsStep.defaultProps = {\n  postConversionHostsUrl: '/api/conversion_hosts'\n};\n\nexport default ConversionHostWizardResultsStep;\n","import { connect } from 'react-redux';\nimport ConversionHostWizardResultsStep from './ConversionHostWizardResultsStep';\n\nimport { stepIDs } from '../ConversionHostWizardConstants';\nimport { getConfigureConversionHostPostBodies } from './helpers';\nimport { postConversionHostsAction } from '../../../../../SettingsActions';\n\nconst mapStateToProps = ({\n  form,\n  settings: { isPostingConversionHosts, isRejectedPostingConversionHosts, postConversionHostsResults }\n}) => {\n  const locationStepValues = form[stepIDs.locationStep] && form[stepIDs.locationStep].values;\n  const hostsStepValues = form[stepIDs.hostsStep] && form[stepIDs.hostsStep].values;\n  const authStepValues = form[stepIDs.authenticationStep] && form[stepIDs.authenticationStep].values;\n  const postBodies = getConfigureConversionHostPostBodies(locationStepValues, hostsStepValues, authStepValues);\n  return {\n    postBodies,\n    isPostingConversionHosts,\n    isRejectedPostingConversionHosts,\n    postConversionHostsResults\n  };\n};\n\nconst mergeProps = (stateProps, dispatchProps, ownProps) => Object.assign(stateProps, ownProps.data, dispatchProps);\n\nexport default connect(\n  mapStateToProps,\n  { postConversionHostsAction },\n  mergeProps\n)(ConversionHostWizardResultsStep);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { reduxForm, Field } from 'redux-form';\nimport { required } from 'redux-form-validators';\nimport { Form } from 'patternfly-react';\nimport { stepIDs, VDDK, SSH } from '../ConversionHostWizardConstants';\nimport { FormField } from '../../../../../../common/forms/FormField';\nimport { OPENSTACK } from '../../../../../../../../../common/constants';\nimport { BootstrapSelect } from '../../../../../../common/forms/BootstrapSelect';\nimport SshKeyField from '../../../../../../common/forms/SshKeyField';\nimport { getConversionHostSshKeyInfoMessage } from '../../../../../helpers';\n\nconst requiredWithMessage = required({ msg: __('This field is required') });\n\nconst ConversionHostWizardAuthenticationStep = ({ selectedProviderType, selectedTransformationMethod }) => {\n  const fieldBaseProps = { labelWidth: 4, controlWidth: 7 };\n\n  return (\n    <Form className=\"form-horizontal\">\n      {selectedProviderType === OPENSTACK && (\n        <Field\n          {...fieldBaseProps}\n          name=\"openstackUser\"\n          label={__('OpenStack User')}\n          component={FormField}\n          type=\"text\"\n          controlId=\"openstack-user-input\"\n          required\n          validate={[requiredWithMessage]}\n        />\n      )}\n      <SshKeyField\n        {...fieldBaseProps}\n        name=\"conversionHostSshKey\"\n        label={__('Conversion Host SSH private key')}\n        controlId=\"host-ssh-key-input\"\n        info={getConversionHostSshKeyInfoMessage(selectedProviderType)}\n      />\n      <Field\n        {...fieldBaseProps}\n        name=\"transformationMethod\"\n        label={__('Transformation method')}\n        component={BootstrapSelect}\n        options={[{ id: SSH, name: __('SSH') }, { id: VDDK, name: __('VDDK') }]}\n        option_key=\"id\"\n        option_value=\"name\"\n        inline_label\n        required\n        validate={[requiredWithMessage]}\n        style={{ marginTop: 25 }}\n      />\n      {selectedTransformationMethod === SSH && (\n        <SshKeyField\n          {...fieldBaseProps}\n          name=\"vmwareSshKey\"\n          label={__('VMware hypervisors SSH private key')}\n          controlId=\"vmware-ssh-key-input\"\n        />\n      )}\n      {selectedTransformationMethod === VDDK && (\n        <Field\n          {...fieldBaseProps}\n          name=\"vddkLibraryPath\"\n          label={__('VDDK library path')}\n          component={FormField}\n          controlId=\"vddk-library-path\"\n          required\n          validate={[requiredWithMessage]}\n        >\n          {({ input }) => (\n            <Form.FormControl {...input} type=\"text\" />\n            /*\n            // TODO replace the above FormControl with this InputGroup\n            // when API support for the Validate button is ready.\n            <Form.InputGroup>\n              <Form.FormControl {...input} type=\"text\" />\n              <Form.InputGroup.Button>\n                <Button onClick={() => {}}>{__('Validate')}</Button>\n              </Form.InputGroup.Button>\n            </Form.InputGroup>\n            */\n          )}\n        </Field>\n      )}\n    </Form>\n  );\n};\n\nConversionHostWizardAuthenticationStep.propTypes = {\n  selectedProviderType: PropTypes.string,\n  selectedTransformationMethod: PropTypes.string,\n  unregisterFieldAction: PropTypes.func\n};\n\nexport default reduxForm({\n  form: stepIDs.authenticationStep,\n  destroyOnUnmount: false,\n  forceUnregisterOnUnmount: true,\n  initialValues: {\n    openstackUser: 'cloud-user',\n    conversionHostSshKey: { filename: '', body: '' },\n    vmwareSshKey: { filename: '', body: '' }\n  }\n})(ConversionHostWizardAuthenticationStep);\n","import { connect } from 'react-redux';\nimport ConversionHostWizardAuthenticationStep from './ConversionHostWizardAuthenticationStep';\n\nimport { stepIDs } from '../ConversionHostWizardConstants';\n\nconst mapStateToProps = ({ form }) => {\n  const locationStepForm = form[stepIDs.locationStep];\n  const locationStepValues = locationStepForm && locationStepForm.values;\n  const authStepForm = form[stepIDs.authenticationStep];\n  const authStepValues = authStepForm && authStepForm.values;\n  return {\n    selectedProviderType: locationStepValues && locationStepValues.providerType,\n    selectedTransformationMethod: authStepValues && authStepValues.transformationMethod\n  };\n};\n\nconst mergeProps = (stateProps, dispatchProps, ownProps) => Object.assign(stateProps, ownProps.data, dispatchProps);\n\nexport default connect(\n  mapStateToProps,\n  {},\n  mergeProps\n)(ConversionHostWizardAuthenticationStep);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { TypeAheadSelect } from 'patternfly-react';\n\n// Wraps TypeAheadSelect for use as the `component` prop of a redux-form Field.\nconst TypeAheadSelectField = ({ input: { value, onChange }, controlId, ...props }) => (\n  <TypeAheadSelect selected={value} onChange={onChange} inputProps={{ id: controlId }} {...props} />\n);\n\nTypeAheadSelectField.propTypes = {\n  controlId: PropTypes.string.isRequired,\n  input: PropTypes.shape({\n    value: PropTypes.array,\n    onChange: PropTypes.func\n  })\n};\n\nexport default TypeAheadSelectField;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { reduxForm, Field } from 'redux-form';\nimport { length } from 'redux-form-validators';\nimport { Form } from 'patternfly-react';\nimport { RHV, OPENSTACK } from '../../../../../../../../../common/constants';\nimport TypeAheadSelectField from '../../../../../../common/forms/TypeAheadSelectField';\nimport { stepIDs } from '../ConversionHostWizardConstants';\nimport { FINISHED } from '../../../ConversionHostsSettingsConstants';\n\nconst ConversionHostWizardHostsStep = ({\n  selectedProviderType,\n  selectedCluster,\n  conversionHosts,\n  conversionHostTasksByResource\n}) => {\n  let hostOptions = [];\n  let emptyLabel = '';\n  if (selectedProviderType === RHV) {\n    hostOptions = selectedCluster.hosts;\n    emptyLabel = __('No hosts available for the selected cluster.');\n  }\n  if (selectedProviderType === OPENSTACK) {\n    hostOptions = selectedCluster.vms;\n    emptyLabel = __('No hosts available for the selected project.');\n  }\n  const filteredHostOptions = hostOptions.filter(host => {\n    // Don't allow selection of hosts already configured as conversion hosts\n    if (conversionHosts.some(ch => ch.resource.type === host.type && ch.resource.id === host.id)) return false;\n    // Don't allow selection of hosts in progress of being configured as conversion hosts\n    const tasks = conversionHostTasksByResource;\n    const matchingEnableTasks =\n      tasks && tasks[host.type] && tasks[host.type][host.id] && tasks[host.type][host.id].enable;\n    const enableInProgress = matchingEnableTasks && matchingEnableTasks.some(task => task.state !== FINISHED);\n    return !enableInProgress;\n  });\n  return (\n    <Form className=\"form-vertical\">\n      <Form.FormGroup controlId=\"host-selection\">\n        <Form.ControlLabel>{__('Hosts to configure as conversion hosts')}</Form.ControlLabel>\n        <Field\n          component={TypeAheadSelectField}\n          name=\"hosts\"\n          controlId=\"host-selection\"\n          multiple\n          clearButton\n          options={filteredHostOptions}\n          labelKey=\"name\"\n          placeholder={__('Select one or more hosts...')}\n          emptyLabel={hostOptions.length === 0 ? emptyLabel : __('No matches found.')}\n          highlightOnlyResult\n          selectHintOnEnter\n          validate={[length({ min: 1 })]}\n        />\n      </Form.FormGroup>\n    </Form>\n  );\n};\n\nConversionHostWizardHostsStep.propTypes = {\n  selectedProviderType: PropTypes.string,\n  selectedCluster: PropTypes.object,\n  conversionHosts: PropTypes.arrayOf(PropTypes.object),\n  conversionHostTasksByResource: PropTypes.objectOf(\n    PropTypes.objectOf(PropTypes.objectOf(PropTypes.arrayOf(PropTypes.object)))\n  )\n};\n\nexport default reduxForm({\n  form: stepIDs.hostsStep,\n  destroyOnUnmount: false,\n  initialValues: { hosts: [] }\n})(ConversionHostWizardHostsStep);\n","import { connect } from 'react-redux';\nimport ConversionHostWizardHostsStep from './ConversionHostWizardHostsStep';\n\nimport { stepIDs } from '../ConversionHostWizardConstants';\n\nconst mapStateToProps = ({\n  form,\n  targetResources: { targetClusters },\n  settings: { conversionHosts, conversionHostTasksByResource }\n}) => {\n  const locationStepForm = form[stepIDs.locationStep];\n  const locationStepValues = locationStepForm && locationStepForm.values;\n  const selectedClusterId = locationStepValues && locationStepValues.cluster;\n  return {\n    selectedProviderType: locationStepValues && locationStepValues.providerType,\n    selectedCluster: targetClusters.find(cluster => cluster.id === selectedClusterId),\n    conversionHosts,\n    conversionHostTasksByResource\n  };\n};\n\nconst mergeProps = (stateProps, dispatchProps, ownProps) => Object.assign(stateProps, ownProps.data, dispatchProps);\n\nexport default connect(\n  mapStateToProps,\n  {},\n  mergeProps\n)(ConversionHostWizardHostsStep);\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { FormControl, Filter, Sort, Toolbar, PaginationRow, PAGINATION_VIEW } from 'patternfly-react';\n\nimport listFilter from './listFilter';\nimport sortFilter from './sortFilter';\nimport paginate from './paginate';\n\nclass ListViewToolbar extends Component {\n  state = {\n    currentFilterType: this.props.filterTypes[this.props.defaultFilterTypeIndex],\n    currentValue: '',\n    activeFilters: [],\n    currentSortType: this.props.sortFields[this.props.defaultSortTypeIndex],\n    isSortNumeric: this.props.sortFields[this.props.defaultSortTypeIndex].isNumeric,\n    isSortAscending: true,\n    pagination: {\n      page: 1,\n      perPage: 10,\n      perPageOptions: [5, 10, 15]\n    },\n    pageChangeValue: 1\n  };\n\n  componentDidUpdate(prevProps) {\n    const { filterTypes, sortFields, defaultFilterTypeIndex, defaultSortTypeIndex } = this.props;\n    if (filterTypes !== prevProps.filterTypes) {\n      const newDefaultFilterType = filterTypes[defaultFilterTypeIndex];\n      this.selectFilterType(newDefaultFilterType);\n    }\n    if (sortFields !== prevProps.sortFields) {\n      const newDefaultSortType = sortFields[defaultSortTypeIndex];\n      this.updateCurrentSortType(newDefaultSortType);\n    }\n  }\n\n  onValueKeyPress = keyEvent => {\n    const { currentValue, currentFilterType } = this.state;\n\n    if (keyEvent.key === 'Enter' && currentValue && currentValue.length > 0) {\n      this.setState({ currentValue: '' });\n      this.filterAdded(currentFilterType, currentValue);\n      keyEvent.stopPropagation();\n      keyEvent.preventDefault();\n    }\n  };\n\n  onFirstPage = () => {\n    this.setPage(1);\n  };\n\n  onLastPage = () => {\n    const { page } = this.state.pagination;\n    const totalPages = this.totalPages();\n    if (page < totalPages) {\n      this.setPage(totalPages);\n    }\n  };\n\n  onNextPage = () => {\n    const { page } = this.state.pagination;\n    if (page < this.totalPages()) {\n      this.setPage(this.state.pagination.page + 1);\n    }\n  };\n\n  onPageInput = e => {\n    this.setState({ pageChangeValue: e.target.value });\n  };\n\n  onPerPageSelect = (eventKey, e) => {\n    const newPaginationState = Object.assign({}, this.state.pagination);\n    newPaginationState.perPage = eventKey;\n    newPaginationState.page = 1;\n    this.setState({ pagination: newPaginationState });\n  };\n\n  onPreviousPage = () => {\n    if (this.state.pagination.page > 1) {\n      this.setPage(this.state.pagination.page - 1);\n    }\n  };\n\n  onSubmit = () => {\n    this.setPage(this.state.pageChangeValue);\n  };\n\n  setPage = value => {\n    const page = Number(value);\n    if (!Number.isNaN(value) && value !== '' && page > 0 && page <= this.totalPages()) {\n      const newPaginationState = Object.assign({}, this.state.pagination);\n      newPaginationState.page = page;\n      this.setState({ pagination: newPaginationState, pageChangeValue: page });\n    }\n  };\n\n  filterValueSelected = filterValue => {\n    const { currentFilterType, currentValue } = this.state;\n\n    if (filterValue !== currentValue) {\n      this.setState({ currentValue: filterValue });\n      if (filterValue) {\n        this.filterAdded(currentFilterType, filterValue);\n      }\n    }\n  };\n\n  clearFilters = () => {\n    this.setState({ activeFilters: [], currentValue: '' });\n  };\n\n  removeFilter = filter => {\n    const { activeFilters } = this.state;\n    const index = activeFilters.indexOf(filter);\n    if (index > -1) {\n      const updated = [...activeFilters.slice(0, index), ...activeFilters.slice(index + 1)];\n      this.setState({ activeFilters: updated });\n    }\n  };\n\n  selectFilterType = filterType => {\n    const { currentFilterType } = this.state;\n    if (currentFilterType !== filterType) {\n      this.setState({ currentValue: '', currentFilterType: filterType });\n    }\n  };\n\n  updateCurrentValue = event => {\n    this.setState({ currentValue: event.target.value });\n  };\n\n  filterListItems = () => {\n    const { activeFilters } = this.state;\n    const { listItems } = this.props;\n    return listFilter(activeFilters, listItems);\n  };\n\n  filterSortPaginateListItems = filteredItems => {\n    const { currentSortType, isSortNumeric, isSortAscending, pagination } = this.state;\n    return paginate(\n      sortFilter(currentSortType, isSortNumeric, isSortAscending, filteredItems),\n      pagination.page,\n      pagination.perPage\n    );\n  };\n\n  toggleCurrentSortDirection = () => {\n    this.setState(prevState => ({\n      isSortAscending: !prevState.isSortAscending\n    }));\n  };\n\n  updateCurrentSortType = sortType => {\n    const { currentSortType } = this.state;\n    if (currentSortType !== sortType) {\n      this.setState({\n        currentSortType: sortType,\n        isSortNumeric: sortType.isNumeric,\n        isSortAscending: true\n      });\n    }\n  };\n\n  filterAdded = (field, value) => {\n    let filterText = field.title || field;\n\n    filterText += ': ';\n    filterText += value.title || value;\n\n    this.setState(prevState => ({\n      activeFilters: [...prevState.activeFilters, { label: filterText, field, value: value.title || value }],\n      pagination: {\n        ...prevState.pagination,\n        page: 1\n      },\n      pageChangeValue: 1\n    }));\n  };\n\n  totalPages = () => {\n    const { activeFilters, pagination } = this.state;\n    const { listItems } = this.props;\n    const allFilteredTasks = listFilter(activeFilters, listItems);\n\n    return Math.ceil(allFilteredTasks.length / pagination.perPage);\n  };\n\n  renderInput = () => {\n    const { currentFilterType, currentValue } = this.state;\n    if (!currentFilterType) {\n      return null;\n    }\n    if (currentFilterType.filterType === 'select') {\n      return (\n        <Filter.ValueSelector\n          filterValues={currentFilterType.filterValues}\n          placeholder={currentFilterType.placeholder}\n          currentValue={currentValue}\n          onFilterValueSelected={this.filterValueSelected}\n        />\n      );\n    }\n    return (\n      <FormControl\n        type={currentFilterType.filterType}\n        value={currentValue}\n        placeholder={currentFilterType.placeholder}\n        onChange={e => this.updateCurrentValue(e)}\n        onKeyPress={e => this.onValueKeyPress(e)}\n      />\n    );\n  };\n\n  renderFilterControls = filterProps => {\n    const { filterTypes } = this.props;\n    const { currentFilterType } = this.state;\n    return (\n      <Filter style={{ paddingLeft: 0 }} {...filterProps}>\n        <Filter.TypeSelector\n          filterTypes={filterTypes}\n          currentFilterType={currentFilterType}\n          onFilterTypeSelected={this.selectFilterType}\n        />\n        {this.renderInput()}\n      </Filter>\n    );\n  };\n\n  renderSortControls = () => {\n    const { sortFields } = this.props;\n    const { currentSortType, isSortNumeric, isSortAscending } = this.state;\n    return (\n      <Sort>\n        <Sort.TypeSelector\n          sortTypes={sortFields}\n          currentSortType={currentSortType}\n          onSortTypeSelected={this.updateCurrentSortType}\n        />\n        <Sort.DirectionSelector\n          isNumeric={isSortNumeric}\n          isAscending={isSortAscending}\n          onClick={this.toggleCurrentSortDirection}\n        />\n      </Sort>\n    );\n  };\n\n  renderActiveFilters = filteredSortedPaginatedListItems => {\n    const { activeFilters } = this.state;\n    return (\n      activeFilters &&\n      activeFilters.length > 0 && (\n        <Toolbar.Results>\n          <h5>\n            {filteredSortedPaginatedListItems.itemCount}{' '}\n            {filteredSortedPaginatedListItems.itemCount === 1 ? __('Result') : __('Results')}\n          </h5>\n          <Filter.ActiveLabel>{__('Active Filters')}:</Filter.ActiveLabel>\n          <Filter.List>\n            {activeFilters.map((item, index) => (\n              <Filter.Item key={index} onRemove={this.removeFilter} filterData={item}>\n                {item.label}\n              </Filter.Item>\n            ))}\n          </Filter.List>\n          <a\n            href=\"#\"\n            onClick={e => {\n              e.preventDefault();\n              this.clearFilters();\n            }}\n          >\n            {__('Clear All Filters')}\n          </a>\n        </Toolbar.Results>\n      )\n    );\n  };\n\n  renderPaginationRow = filteredSortedPaginatedListItems => {\n    const { pagination, pageChangeValue } = this.state;\n    return (\n      <PaginationRow\n        viewType={PAGINATION_VIEW.LIST}\n        pagination={pagination}\n        pageInputValue={pageChangeValue}\n        amountOfPages={filteredSortedPaginatedListItems.amountOfPages}\n        itemCount={filteredSortedPaginatedListItems.itemCount}\n        itemsStart={filteredSortedPaginatedListItems.itemsStart}\n        itemsEnd={filteredSortedPaginatedListItems.itemsEnd}\n        onPerPageSelect={this.onPerPageSelect}\n        onFirstPage={this.onFirstPage}\n        onPreviousPage={this.onPreviousPage}\n        onPageInput={this.onPageInput}\n        onNextPage={this.onNextPage}\n        onLastPage={this.onLastPage}\n        onSubmit={this.onSubmit}\n      />\n    );\n  };\n\n  render() {\n    const filteredListItems = this.filterListItems();\n    return this.props.children(\n      {\n        onFirstPage: this.onFirstPage,\n        onLastPage: this.onLastPage,\n        onNextPage: this.onNextPage,\n        onPageInput: this.onPageInput,\n        onPerPageSelect: this.onPerPageSelect,\n        onPreviousPage: this.onPreviousPage,\n        onSubmit: this.onSubmit,\n        clearFilters: this.clearFilters,\n        removeFilter: this.removeFilter,\n        selectFilterType: this.selectFilterType,\n        filteredListItems,\n        filteredSortedPaginatedListItems: this.filterSortPaginateListItems(filteredListItems),\n        toggleCurrentSortDirection: this.toggleCurrentSortDirection,\n        updateCurrentSortType: this.updateCurrentSortType,\n        renderInput: this.renderInput,\n        renderFilterControls: this.renderFilterControls,\n        renderSortControls: this.renderSortControls,\n        renderActiveFilters: this.renderActiveFilters,\n        renderPaginationRow: this.renderPaginationRow\n      },\n      this.state\n    );\n  }\n}\n\nListViewToolbar.propTypes = {\n  filterTypes: PropTypes.array,\n  listItems: PropTypes.array,\n  children: PropTypes.func,\n  sortFields: PropTypes.array,\n  defaultSortTypeIndex: PropTypes.number,\n  defaultFilterTypeIndex: PropTypes.number\n};\n\nListViewToolbar.defaultProps = {\n  defaultSortTypeIndex: 0,\n  defaultFilterTypeIndex: 0\n};\n\nexport default ListViewToolbar;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { reduxForm, Field } from 'redux-form';\nimport { required } from 'redux-form-validators';\nimport { Form, Spinner } from 'patternfly-react';\n\nimport { BootstrapSelect } from '../../../../../../common/forms/BootstrapSelect';\nimport { V2V_TARGET_PROVIDERS, RHV, OPENSTACK } from '../../../../../../../../../common/constants';\nimport { FETCH_TARGET_COMPUTE_URLS } from '../../../../../../../../../redux/common/targetResources/targetResourcesConstants';\n\nimport { stepIDs } from '../ConversionHostWizardConstants';\n\nclass ConversionHostWizardLocationStep extends React.Component {\n  componentDidUpdate(prevProps) {\n    const { fetchTargetClustersAction, fetchTargetComputeUrls, selectedProviderType } = this.props;\n    if (prevProps.selectedProviderType !== selectedProviderType) {\n      fetchTargetClustersAction(fetchTargetComputeUrls[selectedProviderType]);\n    }\n  }\n\n  render() {\n    const {\n      providers,\n      isFetchingTargetClusters,\n      targetClusters,\n      selectedProviderType,\n      selectedProviderId,\n      resetFormAction\n    } = this.props;\n\n    const availableProviderOptions = V2V_TARGET_PROVIDERS.filter(option =>\n      providers.some(provider => provider.type === option.type)\n    );\n    const selectedProviderOption = availableProviderOptions.find(option => option.id === selectedProviderType);\n    const providersFilteredBySelectedType =\n      selectedProviderOption && providers.filter(provider => provider.type === selectedProviderOption.type);\n\n    const targetClustersFilteredBySelectedProvider = targetClusters.filter(\n      cluster => cluster.ems_id === selectedProviderId\n    );\n\n    const selectFieldBaseProps = {\n      component: BootstrapSelect,\n      labelWidth: 2,\n      controlWidth: 9,\n      inline_label: true,\n      option_key: 'id',\n      option_value: 'name',\n      required: true,\n      validate: [required()]\n    };\n\n    let clusterLabel = '';\n    if (selectedProviderType === RHV) clusterLabel = __('Cluster');\n    if (selectedProviderType === OPENSTACK) clusterLabel = __('Project');\n\n    return (\n      <Form className=\"form-horizontal\">\n        <Field\n          {...selectFieldBaseProps}\n          name=\"providerType\"\n          label={__('Provider Type')}\n          options={availableProviderOptions}\n        />\n        {selectedProviderType && (\n          <Spinner loading={isFetchingTargetClusters}>\n            <Field\n              {...selectFieldBaseProps}\n              name=\"provider\"\n              label={__('Provider')}\n              options={providersFilteredBySelectedType}\n            />\n            <Field\n              {...selectFieldBaseProps}\n              name=\"cluster\"\n              label={clusterLabel}\n              options={targetClustersFilteredBySelectedProvider}\n              disabled={!selectedProviderId}\n              onChange={() => resetFormAction(stepIDs.hostsStep)}\n            />\n          </Spinner>\n        )}\n      </Form>\n    );\n  }\n}\n\nConversionHostWizardLocationStep.propTypes = {\n  selectedProviderType: PropTypes.string,\n  selectedProviderId: PropTypes.string,\n  providers: PropTypes.arrayOf(PropTypes.object),\n  fetchTargetClustersAction: PropTypes.func,\n  fetchTargetComputeUrls: PropTypes.object,\n  isFetchingTargetClusters: PropTypes.bool,\n  targetClusters: PropTypes.arrayOf(PropTypes.object),\n  resetFormAction: PropTypes.func\n};\n\nConversionHostWizardLocationStep.defaultProps = {\n  fetchTargetComputeUrls: FETCH_TARGET_COMPUTE_URLS\n};\n\nexport default reduxForm({\n  form: stepIDs.locationStep,\n  destroyOnUnmount: false\n})(ConversionHostWizardLocationStep);\n","import { connect } from 'react-redux';\nimport { reset } from 'redux-form';\nimport ConversionHostWizardLocationStep from './ConversionHostWizardLocationStep';\n\nimport { fetchTargetClustersAction } from '../../../../../../../../../redux/common/targetResources/targetResourcesActions';\n\nimport { stepIDs } from '../ConversionHostWizardConstants';\n\nconst mapStateToProps = ({\n  form,\n  providers: { providers },\n  targetResources: { isFetchingTargetClusters, targetClusters }\n}) => {\n  const locationStepForm = form[stepIDs.locationStep];\n  const locationStepValues = locationStepForm && locationStepForm.values;\n  return {\n    selectedProviderType: locationStepValues && locationStepValues.providerType,\n    selectedProviderId: locationStepValues && locationStepValues.provider,\n    providers,\n    isFetchingTargetClusters,\n    targetClusters\n  };\n};\n\nconst mergeProps = (stateProps, dispatchProps, ownProps) => Object.assign(stateProps, ownProps.data, dispatchProps);\n\nexport default connect(\n  mapStateToProps,\n  { fetchTargetClustersAction, resetFormAction: reset },\n  mergeProps\n)(ConversionHostWizardLocationStep);\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nclass ModalWizardStateProvider extends React.Component {\n  state = { activeStepIndex: 0 };\n\n  prevStep = () => {\n    const { activeStepIndex } = this.state;\n    this.setState({ activeStepIndex: Math.max(activeStepIndex - 1, 0) });\n  };\n\n  nextStep = () => {\n    const { numSteps } = this.props;\n    const { activeStepIndex } = this.state;\n\n    this.setState({\n      activeStepIndex: Math.min(activeStepIndex + 1, numSteps - 1)\n    });\n  };\n\n  goToStep = activeStepIndex => {\n    this.setState({ activeStepIndex });\n  };\n\n  render() {\n    const { numSteps, children } = this.props;\n    const { activeStepIndex } = this.state;\n    const activeStep = (activeStepIndex + 1).toString();\n    return (\n      <React.Fragment>\n        {React.Children.map(children, child =>\n          React.cloneElement(child, {\n            numSteps,\n            activeStepIndex,\n            activeStep,\n            onBack: this.prevStep,\n            onNext: this.nextStep,\n            goToStep: this.goToStep\n          })\n        )}\n      </React.Fragment>\n    );\n  }\n}\n\nModalWizardStateProvider.propTypes = {\n  numSteps: PropTypes.number,\n  children: PropTypes.node\n};\n\nModalWizardStateProvider.defaultProps = {\n  numSteps: 1,\n  children: null\n};\n\nexport default ModalWizardStateProvider;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport cx from 'classnames';\nimport { noop, EmptyState, Spinner, Wizard, Alert } from 'patternfly-react';\n\n// NOTE: This may be a good component to move up to patternfly-react.\n// Let's try to avoid putting any application-specific code in here.\n\nclass ModalWizardBody extends React.Component {\n  onStepClick = (stepIndex, disableGoto) => {\n    const { steps, goToStep, disableNextStep, activeStepIndex } = this.props;\n    const nextStepClicked = stepIndex === activeStepIndex + 1;\n    if (disableGoto || (nextStepClicked && disableNextStep)) return;\n    const step = steps[stepIndex];\n    goToStep(stepIndex);\n    if (step && step.onClick) {\n      step.onClick();\n    }\n  };\n\n  stepProps = (stepIndex, title) => {\n    const { activeStep } = this.props;\n    const label = (stepIndex + 1).toString();\n    return {\n      key: `wizard-step-${title}`,\n      stepIndex,\n      label,\n      step: label,\n      title,\n      activeStep\n    };\n  };\n\n  renderLoading = () => {\n    const { loadingTitle, loadingMessage } = this.props;\n    return (\n      <Wizard.Row>\n        <Wizard.Main>\n          <EmptyState>\n            <Spinner size=\"lg\" className=\"blank-slate-pf-icon\" loading />\n            <EmptyState.Action>\n              <h3>{loadingTitle}</h3>\n            </EmptyState.Action>\n            <EmptyState.Action secondary>\n              <p>{loadingMessage}</p>\n            </EmptyState.Action>\n          </EmptyState>\n        </Wizard.Main>\n      </Wizard.Row>\n    );\n  };\n\n  render() {\n    const { loaded, steps, activeStepIndex, alertText, alertType, hideAlertAction, stepButtonsDisabled } = this.props;\n    const step = steps[activeStepIndex];\n\n    if (!loaded) {\n      return this.renderLoading();\n    }\n\n    const renderedStep = step && step.render && step.render(activeStepIndex, step.title);\n\n    const alertClasses = cx('modal-wizard-alert--alert', {\n      'is-visible': alertText\n    });\n\n    return (\n      <React.Fragment>\n        <div className=\"modal-wizard-alert\">\n          <Alert className={alertClasses} type={alertType} onDismiss={hideAlertAction}>\n            {alertText}\n          </Alert>\n        </div>\n        <Wizard.Steps\n          className={cx({ 'step-buttons-disabled': stepButtonsDisabled })}\n          steps={steps.map((stepObj, index) => {\n            const disabled = stepButtonsDisabled || stepObj.disabled;\n            return (\n              <Wizard.Step\n                {...this.stepProps(index, stepObj.title)}\n                onClick={() => this.onStepClick(index, disabled)}\n                className={disabled && cx('is-disabled')}\n              />\n            );\n          })}\n        />\n        <Wizard.Row>\n          <Wizard.Main>\n            <Wizard.Contents stepIndex={activeStepIndex} activeStepIndex={activeStepIndex}>\n              {renderedStep}\n            </Wizard.Contents>\n          </Wizard.Main>\n        </Wizard.Row>\n      </React.Fragment>\n    );\n  }\n}\n\nModalWizardBody.propTypes = {\n  loadingTitle: PropTypes.string,\n  loadingMessage: PropTypes.string,\n  loaded: PropTypes.bool,\n  steps: PropTypes.arrayOf(\n    PropTypes.shape({\n      title: PropTypes.string,\n      render: PropTypes.func,\n      onClick: PropTypes.func\n    })\n  ),\n  activeStepIndex: PropTypes.number,\n  activeStep: PropTypes.string,\n  onClick: PropTypes.func,\n  goToStep: PropTypes.func,\n  stepButtonsDisabled: PropTypes.bool,\n  disableNextStep: PropTypes.bool,\n  alertText: PropTypes.string,\n  alertType: PropTypes.string,\n  hideAlertAction: PropTypes.func\n};\n\nModalWizardBody.defaultProps = {\n  loadingTitle: __('Loading Wizard...'),\n  loadingMessage: __('Loading...'),\n  loaded: false,\n  steps: [{ title: __('General'), render: () => <p>{__('General')}</p> }],\n  activeStepIndex: 0,\n  activeStep: '1',\n  onClick: noop,\n  goToStep: noop,\n  stepButtonsDisabled: false,\n  disableNextStep: true,\n  hideAlertAction: noop\n};\n\nexport default ModalWizardBody;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { noop, Wizard, Icon, Button } from 'patternfly-react';\nimport { connect } from 'react-redux';\n\n// TODO we should lift this application-specific stuff out of this generalized component file.\nconst reduxFormMap = {\n  [__('Infrastructure Mapping Wizard')]: ['mappingWizardGeneralStep', 'mappingWizardClustersStep'],\n  [__('Migration Plan Wizard')]: ['planWizardGeneralStep', 'planWizardVMStep']\n};\n\n// NOTE: This may be a good component to move up to patternfly-react.\n// Let's try to avoid putting any application-specific code in here.\n\nconst ModalWizard = props => {\n  const {\n    title,\n    showWizard,\n    onHide,\n    onExited,\n    onBack,\n    onNext,\n    activeStepIndex,\n    activeStep,\n    numSteps,\n    goToStep,\n    stepButtonsDisabled,\n    children,\n    formContainer\n  } = props;\n  const onFirstStep = activeStepIndex === 0;\n  const onFinalStep = activeStepIndex === numSteps - 1;\n\n  const currentReduxForm = reduxFormMap[title][activeStepIndex];\n  const disableNextStep =\n    formContainer &&\n    Object.prototype.hasOwnProperty.call(formContainer, currentReduxForm) &&\n    !!formContainer[currentReduxForm].syncErrors;\n\n  return (\n    <Wizard show={showWizard} onHide={onHide} onExited={onExited} dialogClassName=\"modal-lg wizard-pf\">\n      <Wizard.Header onClose={onHide} title={title} />\n      <Wizard.Body>\n        {React.Children.map(children, child =>\n          React.cloneElement(child, {\n            activeStepIndex,\n            activeStep,\n            goToStep,\n            stepButtonsDisabled,\n            disableNextStep\n          })\n        )}\n      </Wizard.Body>\n      <Wizard.Footer>\n        <Button bsStyle=\"default\" className=\"btn-cancel\" onClick={onHide}>\n          {__('Cancel')}\n        </Button>\n        <Button bsStyle=\"default\" onClick={onBack} disabled={onFirstStep}>\n          <Icon type=\"fa\" name=\"angle-left\" />\n          {__('Back')}\n        </Button>\n        <Button bsStyle=\"primary\" onClick={onFinalStep ? onHide : onNext} disabled={disableNextStep}>\n          {onFinalStep ? __('Close') : __('Next')}\n          <Icon type=\"fa\" name=\"angle-right\" />\n        </Button>\n      </Wizard.Footer>\n    </Wizard>\n  );\n};\n\nModalWizard.propTypes = {\n  showWizard: PropTypes.bool,\n  title: PropTypes.oneOfType([PropTypes.string, PropTypes.node]),\n  onHide: PropTypes.func,\n  onExited: PropTypes.func,\n  onBack: PropTypes.func,\n  onNext: PropTypes.func,\n  activeStepIndex: PropTypes.number,\n  activeStep: PropTypes.string,\n  numSteps: PropTypes.number,\n  goToStep: PropTypes.func,\n  stepButtonsDisabled: PropTypes.bool,\n  children: PropTypes.node,\n  formContainer: PropTypes.object\n};\n\nModalWizard.defaultProps = {\n  showWizard: false,\n  title: '',\n  onHide: noop,\n  onExited: noop,\n  onBack: noop,\n  onNext: noop,\n  activeStepIndex: 0,\n  activeStep: '1',\n  numSteps: 1,\n  stepButtonsDisabled: false,\n  children: null\n};\n\nconst mapStateToProps = state => ({\n  formContainer: state.form\n});\n\nexport default connect(mapStateToProps)(ModalWizard);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { noop } from 'patternfly-react';\nimport ModalWizard from '../../../../../common/ModalWizard';\n\nclass ConversionHostWizardBody extends React.Component {\n  shouldComponentUpdate(nextProps, nextState) {\n    return JSON.stringify(this.props) !== JSON.stringify(nextProps);\n  }\n  render() {\n    const { wizardSteps } = this.props;\n    return <ModalWizard.Body {...this.props} stepButtonsDisabled steps={wizardSteps} />;\n  }\n}\n\nConversionHostWizardBody.propTypes = {\n  wizardSteps: PropTypes.arrayOf(PropTypes.object).isRequired,\n  loaded: PropTypes.bool,\n  activeStepIndex: PropTypes.number,\n  activeStep: PropTypes.string,\n  goToStep: PropTypes.func,\n  disableNextStep: PropTypes.bool,\n  plansBody: PropTypes.object\n};\n\nConversionHostWizardBody.defaultProps = {\n  loaded: false,\n  activeStepIndex: 0,\n  activeStep: '1',\n  goToStep: noop,\n  disableNextStep: true\n};\n\nexport default ConversionHostWizardBody;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Wizard, Button, Icon } from 'patternfly-react';\n\nimport { stepIDs } from './ConversionHostWizardConstants';\nimport ConversionHostWizardBody from './ConversionHostWizardBody';\nimport ConversionHostWizardLocationStep from './ConversionHostWizardLocationStep';\nimport ConversionHostWizardHostsStep from './ConversionHostWizardHostsStep';\nimport ConversionHostWizardAuthenticationStep from './ConversionHostWizardAuthenticationStep';\nimport ConversionHostWizardResultsStep from './ConversionHostWizardResultsStep';\n\nclass ConversionHostWizard extends React.Component {\n  state = { activeStepIndex: 0 };\n\n  getWizardSteps = () => [\n    {\n      id: stepIDs.locationStep,\n      title: __('Location'),\n      render: () => <ConversionHostWizardLocationStep />\n    },\n    {\n      id: stepIDs.hostsStep,\n      title: __('Host(s)'),\n      render: () => <ConversionHostWizardHostsStep />\n    },\n    {\n      id: stepIDs.authenticationStep,\n      title: __('Authentication'),\n      render: () => <ConversionHostWizardAuthenticationStep />\n    },\n    {\n      id: stepIDs.resultsStep,\n      title: __('Results'),\n      render: () => <ConversionHostWizardResultsStep />\n    }\n  ];\n\n  getActiveWizardStep = () => {\n    const { activeStepIndex } = this.state;\n    return this.getWizardSteps()[activeStepIndex];\n  };\n\n  prevStep = () => {\n    const { activeStepIndex } = this.state;\n    this.goToStep(Math.max(activeStepIndex - 1, 0));\n  };\n\n  nextStep = () => {\n    const { activeStepIndex } = this.state;\n    const wizardSteps = this.getWizardSteps();\n    this.goToStep(Math.min(activeStepIndex + 1, wizardSteps.length - 1));\n  };\n\n  goToStep = activeStepIndex => {\n    this.setState({ activeStepIndex });\n  };\n\n  goToStepId = id => {\n    const targetStepIndex = this.getWizardSteps().findIndex(step => step.id === id);\n    if (targetStepIndex) {\n      this.goToStep(targetStepIndex);\n    }\n  };\n\n  render() {\n    const {\n      conversionHostWizardVisible,\n      hideConversionHostWizardAction,\n      conversionHostWizardExitedAction,\n      isPostingConversionHosts,\n      forms\n    } = this.props;\n    const { activeStepIndex } = this.state;\n    const activeStepNumber = (activeStepIndex + 1).toString();\n\n    const wizardSteps = this.getWizardSteps();\n    const onFirstStep = activeStepIndex === 0;\n    const onFinalStep = activeStepIndex === wizardSteps.length - 1;\n\n    const activeStep = this.getActiveWizardStep();\n    const activeStepForm = !onFinalStep && forms[activeStep.id];\n\n    const disableNextStep =\n      (activeStepForm && (!!activeStepForm.syncErrors || !!activeStepForm.asyncErrors)) ||\n      (onFinalStep && isPostingConversionHosts);\n\n    return (\n      <Wizard\n        show={conversionHostWizardVisible}\n        onClose={hideConversionHostWizardAction}\n        onExited={conversionHostWizardExitedAction}\n        backdrop=\"static\"\n      >\n        <Wizard.Header onClose={hideConversionHostWizardAction} title={__('Configure Conversion Host')} />\n        <Wizard.Body>\n          <ConversionHostWizardBody\n            wizardSteps={wizardSteps}\n            loaded\n            activeStepIndex={activeStepIndex}\n            activeStep={activeStepNumber}\n            goToStep={this.goToStep}\n            disableNextStep={disableNextStep}\n          />\n        </Wizard.Body>\n        <Wizard.Footer className=\"wizard-pf-footer\">\n          <Button\n            bsStyle=\"default\"\n            className=\"btn-cancel\"\n            onClick={hideConversionHostWizardAction}\n            disabled={onFinalStep}\n          >\n            {__('Cancel')}\n          </Button>\n          <Button bsStyle=\"default\" onClick={this.prevStep} disabled={onFirstStep || onFinalStep}>\n            <Icon type=\"fa\" name=\"angle-left\" />\n            {__('Back')}\n          </Button>\n          <Button\n            bsStyle=\"primary\"\n            onClick={onFinalStep ? hideConversionHostWizardAction : this.nextStep}\n            disabled={disableNextStep}\n          >\n            {onFinalStep ? __('Close') : activeStep.id === stepIDs.authenticationStep ? __('Configure') : __('Next')}\n            {!onFinalStep && <Icon type=\"fa\" name=\"angle-right\" />}\n          </Button>\n        </Wizard.Footer>\n      </Wizard>\n    );\n  }\n}\n\nConversionHostWizard.propTypes = {\n  hideConversionHostWizardAction: PropTypes.func,\n  conversionHostWizardExitedAction: PropTypes.func,\n  conversionHostWizardVisible: PropTypes.bool,\n  isPostingConversionHosts: PropTypes.bool,\n  forms: PropTypes.object\n};\n\nConversionHostWizard.defaultProps = {\n  forms: {}\n};\n\nexport default ConversionHostWizard;\n","import { connect } from 'react-redux';\nimport ConversionHostWizard from './ConversionHostWizard';\nimport { conversionHostWizardFormFilter } from './ConversionHostWizardSelectors';\n\nimport * as SettingsActions from '../../../../SettingsActions';\n\nconst mapStateToProps = ({ form, settings: { conversionHostWizardVisible, isPostingConversionHosts } }, ownProps) => ({\n  ...ownProps.data,\n  forms: conversionHostWizardFormFilter(form),\n  conversionHostWizardVisible,\n  isPostingConversionHosts\n});\n\nconst mergeProps = (stateProps, dispatchProps, ownProps) => Object.assign(stateProps, ownProps.data, dispatchProps);\n\nexport default connect(\n  mapStateToProps,\n  SettingsActions,\n  mergeProps\n)(ConversionHostWizard);\n","import moment from 'moment';\n\nexport const formatDateTime = date => moment(date).format('MMMM Do YYYY, h:mm a');\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Form, Button } from 'patternfly-react';\nimport Dropzone from 'react-dropzone';\nimport classNames from 'classnames';\n\nconst TextFileInput = ({ value: { filename, body }, onChange, onBlur, help }) => {\n  const readFile = fileHandle => {\n    const reader = new FileReader();\n    reader.onload = () => onChange({ filename: fileHandle.name, body: reader.result });\n    reader.readAsBinaryString(fileHandle);\n  };\n\n  const onFileDrop = files => {\n    if (files && files.length > 0) {\n      readFile(files[0]);\n    }\n  };\n\n  const clear = () => onChange({ filename: '', body: '' });\n\n  return (\n    <Dropzone onDrop={onFileDrop} onClick={event => event.preventDefault()}>\n      {({ getRootProps, getInputProps, isDragActive, open }) => (\n        <div {...getRootProps()} className={classNames('text-file-input__dropzone', { active: isDragActive })}>\n          <input {...getInputProps()} />\n          <Form.InputGroup>\n            <Form.FormControl type=\"text\" disabled value={filename} />\n            <Form.InputGroup.Button>\n              <Button onClick={open}>\n                {__('Browse')}\n                &hellip;\n              </Button>\n              <Button onClick={clear} disabled={body === ''}>\n                {__('Clear')}\n              </Button>\n            </Form.InputGroup.Button>\n          </Form.InputGroup>\n          {help && <Form.HelpBlock>{help}</Form.HelpBlock>}\n          <Form.FormControl\n            className=\"text-file-input__textarea\"\n            componentClass=\"textarea\"\n            value={body}\n            onChange={event => onChange({ filename: '', body: event.target.value })}\n            onBlur={() => onBlur()}\n            disabled={filename !== ''}\n          />\n        </div>\n      )}\n    </Dropzone>\n  );\n};\n\nTextFileInput.propTypes = {\n  help: PropTypes.oneOfType([PropTypes.string, PropTypes.node]),\n  value: PropTypes.shape({\n    filename: PropTypes.string,\n    body: PropTypes.string\n  }),\n  onChange: PropTypes.func,\n  onBlur: PropTypes.func\n};\n\nexport default TextFileInput;\n","import TextFileInput from './TextFileInput';\n\nexport default TextFileInput;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { reduxForm } from 'redux-form';\nimport { Button, Modal, Form, Grid } from 'patternfly-react';\nimport { CONVERSION_HOST_TYPES } from '../../../../../../../../common/constants';\nimport SshKeyField from '../../../../../common/forms/SshKeyField';\nimport { getConversionHostSshKeyInfoMessage } from '../../../../helpers';\n\nconst fieldBaseProps = { labelWidth: 4, controlWidth: 7 };\n\nconst RetryConversionHostConfirmationModal = ({\n  show,\n  conversionHostTaskToRetry,\n  isPostingConversionHosts,\n  hideConversionHostRetryModalAction,\n  conversionHostRetryModalExitedAction,\n  postConversionHostsAction,\n  postConversionHostsUrl,\n  retryForm\n}) => {\n  const requestParams =\n    conversionHostTaskToRetry &&\n    conversionHostTaskToRetry.context_data &&\n    conversionHostTaskToRetry.context_data.request_params;\n  const isUsingSshTransformation = !requestParams.vmware_vddk_package_url;\n\n  const selectedProviderType = Object.keys(CONVERSION_HOST_TYPES).find(\n    key => CONVERSION_HOST_TYPES[key] === requestParams.resource_type\n  );\n  const formHasErrors = retryForm && !!retryForm.syncErrors;\n\n  return (\n    <Modal\n      show={show}\n      onHide={hideConversionHostRetryModalAction}\n      onExited={conversionHostRetryModalExitedAction}\n      dialogClassName=\"modal-lg wizard-pf\"\n      backdrop=\"static\"\n    >\n      <Modal.Header>\n        <Modal.CloseButton onClick={hideConversionHostRetryModalAction} />\n        <Modal.Title>{__('Retry Conversion Host Configuration')}</Modal.Title>\n      </Modal.Header>\n      <Modal.Body>\n        <Form className=\"form-horizontal\">\n          <ul>\n            <p>\n              {__('For your security, SSH private keys from the configuration wizard were not saved. Re-enter the necessary authentication details to retry configuration of the following conversion host:') /* prettier-ignore */}\n            </p>\n          </ul>\n          <Form.FormGroup>\n            <Grid.Col componentClass={Form.ControlLabel} sm={fieldBaseProps.labelWidth}>\n              {__('Host')}\n            </Grid.Col>\n            <Grid.Col sm={fieldBaseProps.controlWidth} style={{ paddingTop: 3 }}>\n              {conversionHostTaskToRetry.name}\n            </Grid.Col>\n          </Form.FormGroup>\n          <SshKeyField\n            {...fieldBaseProps}\n            name=\"conversionHostSshKey\"\n            label={__('Conversion Host SSH private key')}\n            controlId=\"host-ssh-key-input\"\n            info={getConversionHostSshKeyInfoMessage(selectedProviderType)}\n          />\n          {isUsingSshTransformation && (\n            <SshKeyField\n              {...fieldBaseProps}\n              name=\"vmwareSshKey\"\n              label={__('VMware hypervisors SSH private key')}\n              controlId=\"vmware-ssh-key-input\"\n              style={{ marginTop: 25 }}\n            />\n          )}\n        </Form>\n      </Modal.Body>\n      <Modal.Footer>\n        <Button bsStyle=\"default\" className=\"btn-cancel\" onClick={hideConversionHostRetryModalAction}>\n          {__('Cancel')}\n        </Button>\n        <Button\n          bsStyle=\"primary\"\n          disabled={formHasErrors || isPostingConversionHosts}\n          onClick={() => {\n            const postBody = {\n              ...conversionHostTaskToRetry.context_data.request_params,\n              conversion_host_ssh_private_key: retryForm.values.conversionHostSshKey.body,\n              ...(isUsingSshTransformation ? { vmware_ssh_private_key: retryForm.values.vmwareSshKey.body } : {})\n            };\n            postConversionHostsAction(postConversionHostsUrl, [postBody]).then(hideConversionHostRetryModalAction);\n          }}\n        >\n          {__('Retry')}\n        </Button>\n      </Modal.Footer>\n    </Modal>\n  );\n};\n\nRetryConversionHostConfirmationModal.propTypes = {\n  show: PropTypes.bool,\n  conversionHostTaskToRetry: PropTypes.object,\n  isPostingConversionHosts: PropTypes.bool,\n  hideConversionHostRetryModalAction: PropTypes.func,\n  conversionHostRetryModalExitedAction: PropTypes.func,\n  postConversionHostsAction: PropTypes.func,\n  postConversionHostsUrl: PropTypes.string,\n  retryForm: PropTypes.object\n};\n\nexport default reduxForm({\n  form: 'retryConversionHost',\n  initialValues: {\n    conversionHostSshKey: { filename: '', body: '' },\n    vmwareSshKey: { filename: '', body: '' }\n  }\n})(RetryConversionHostConfirmationModal);\n","import { connect } from 'react-redux';\nimport RetryConversionHostConfirmationModal from './RetryConversionHostConfirmationModal';\n\nimport {\n  hideConversionHostRetryModalAction,\n  conversionHostRetryModalExitedAction,\n  postConversionHostsAction\n} from '../../../../SettingsActions';\n\nconst mapStateToProps = (\n  {\n    form: { retryConversionHost },\n    settings: { conversionHostRetryModalVisible, conversionHostTaskToRetry, isPostingConversionHosts }\n  },\n  ownProps\n) => ({\n  retryForm: retryConversionHost,\n  show: conversionHostRetryModalVisible,\n  conversionHostTaskToRetry,\n  isPostingConversionHosts,\n  ...ownProps\n});\n\nconst mergeProps = (stateProps, dispatchProps, ownProps) => Object.assign(stateProps, ownProps.data, dispatchProps);\n\nexport default connect(\n  mapStateToProps,\n  {\n    hideConversionHostRetryModalAction,\n    conversionHostRetryModalExitedAction,\n    postConversionHostsAction\n  },\n  mergeProps\n)(RetryConversionHostConfirmationModal);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Button, Modal, Icon } from 'patternfly-react';\n\nconst DeleteConversionHostConfirmationModal = ({\n  conversionHostToDelete,\n  deleteConversionHostAction,\n  deleteConversionHostActionUrl,\n  hideConversionHostDeleteModalAction,\n  conversionHostDeleteModalVisible,\n  isDeletingConversionHost\n}) => (\n  <Modal show={conversionHostDeleteModalVisible} onHide={hideConversionHostDeleteModalAction} backdrop=\"static\">\n    <Modal.Header>\n      <Modal.CloseButton onClick={hideConversionHostDeleteModalAction} />\n      <Modal.Title>{__('Remove Conversion Host')}</Modal.Title>\n    </Modal.Header>\n    <Modal.Body className=\"warning-modal-body\">\n      <div className=\"warning-modal-body--icon\">\n        <Icon type=\"pf\" name=\"delete\" />\n      </div>\n      <div className=\"warning-modal-body--list\">\n        <h4>{__('Are you sure you want to remove the following conversion host?')}</h4>\n        <div>\n          <ul>\n            <h4>\n              <strong>{conversionHostToDelete && conversionHostToDelete.name}</strong>\n            </h4>\n          </ul>\n        </div>\n      </div>\n    </Modal.Body>\n    <Modal.Footer>\n      <Button bsStyle=\"default\" className=\"btn-cancel\" onClick={hideConversionHostDeleteModalAction}>\n        {__('Cancel')}\n      </Button>\n      <Button\n        bsStyle=\"primary\"\n        disabled={isDeletingConversionHost}\n        onClick={() => {\n          deleteConversionHostAction(deleteConversionHostActionUrl, conversionHostToDelete);\n        }}\n      >\n        {__('Remove')}\n      </Button>\n    </Modal.Footer>\n  </Modal>\n);\n\nDeleteConversionHostConfirmationModal.propTypes = {\n  conversionHostToDelete: PropTypes.object,\n  deleteConversionHostAction: PropTypes.func,\n  deleteConversionHostActionUrl: PropTypes.string,\n  hideConversionHostDeleteModalAction: PropTypes.func,\n  conversionHostDeleteModalVisible: PropTypes.bool,\n  isDeletingConversionHost: PropTypes.bool\n};\n\nexport default DeleteConversionHostConfirmationModal;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Button } from 'patternfly-react';\n\nconst ConversionHostRetryButton = ({\n  task,\n  setConversionHostTaskToRetryAction,\n  showConversionHostRetryModalAction,\n  ...props\n}) => (\n  <React.Fragment>\n    <Button\n      id={`retry_${task.id}`}\n      onClick={e => {\n        e.stopPropagation();\n        setConversionHostTaskToRetryAction(task);\n        showConversionHostRetryModalAction();\n      }}\n      {...props}\n    >\n      {__('Retry')}\n    </Button>\n  </React.Fragment>\n);\n\nConversionHostRetryButton.propTypes = {\n  task: PropTypes.object,\n  setConversionHostTaskToRetryAction: PropTypes.func,\n  showConversionHostRetryModalAction: PropTypes.func\n};\n\nexport default ConversionHostRetryButton;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Button } from 'patternfly-react';\n\nconst ConversionHostRemoveButton = ({ host, setHostToDeleteAction, showConversionHostDeleteModalAction, ...props }) => (\n  <React.Fragment>\n    <Button\n      id={`remove_${host.id}`}\n      onClick={e => {\n        e.stopPropagation();\n        setHostToDeleteAction(host);\n        showConversionHostDeleteModalAction();\n      }}\n      {...props}\n    >\n      {__('Remove')}\n    </Button>\n  </React.Fragment>\n);\n\nConversionHostRemoveButton.propTypes = {\n  host: PropTypes.object,\n  setHostToDeleteAction: PropTypes.func,\n  showConversionHostDeleteModalAction: PropTypes.func\n};\n\nexport default ConversionHostRemoveButton;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Immutable from 'seamless-immutable';\nimport { DropdownKebab, ListView, MenuItem, Button, Spinner, OverlayTrigger, Popover, Icon } from 'patternfly-react';\nimport ConversionHostRemoveButton from './ConversionHostRemoveButton';\nimport ConversionHostRetryButton from './ConversionHostRetryButton';\nimport StopPropagationOnClick from '../../../../common/StopPropagationOnClick';\nimport { FINISHED, ERROR, ENABLE, DISABLE } from '../ConversionHostsSettingsConstants';\n\nconst downloadLogSupported = false; // TODO remove me when the Download Log action works\nconst removeFailedTaskSupported = false; // TODO remove me when the Remove button works\n\nconst ConversionHostsListItem = ({\n  listItem,\n  isTask,\n  setHostToDeleteAction,\n  showConversionHostDeleteModalAction,\n  setConversionHostTaskToRetryAction,\n  showConversionHostRetryModalAction,\n  isPostingConversionHosts\n}) => {\n  let mostRecentTask = listItem;\n  if (!isTask) {\n    const { enable, disable } = listItem.meta.tasksByOperation;\n    const mostRecentFirst = (a, b) => (a.updated_on > b.updated_on ? -1 : a.updated_on < b.updated_on ? 1 : 0);\n    const lastEnableTask = enable && Immutable.asMutable(enable).sort(mostRecentFirst)[0];\n    const lastDisableTask = disable && Immutable.asMutable(disable).sort(mostRecentFirst)[0];\n    mostRecentTask =\n      lastEnableTask && (!lastDisableTask || lastDisableTask.updated_on < lastEnableTask.updated_on)\n        ? lastEnableTask\n        : lastDisableTask;\n  }\n\n  let statusIcon;\n  let statusMessage;\n  if (mostRecentTask && mostRecentTask.status === ERROR) {\n    statusIcon = <ListView.Icon type=\"pf\" name=\"error-circle-o\" />;\n    statusMessage = mostRecentTask.meta.operation === ENABLE ? __('Configuration Failed') : __('Removal Failed');\n  } else if (mostRecentTask && mostRecentTask.state !== FINISHED) {\n    statusIcon = <Spinner loading size=\"sm\" inline />;\n    statusMessage = mostRecentTask.meta.operation === ENABLE ? __('Configuring...') : __('Removing...');\n  } else {\n    statusIcon = <ListView.Icon type=\"pf\" name=\"ok\" />;\n    statusMessage = __('Configured');\n  }\n\n  const taskInfoPopover = (\n    <OverlayTrigger\n      rootClose\n      trigger=\"click\"\n      placement=\"top\"\n      overlay={\n        <Popover id=\"task-info-popover\" style={{ width: 400 }}>\n          {mostRecentTask ? (\n            <React.Fragment>\n              <strong>{__('State:')}</strong> {mostRecentTask.state}\n              <br />\n              <strong>{__('Message:')}</strong> {mostRecentTask.message}\n            </React.Fragment>\n          ) : (\n            __('No configuration task information available')\n          )}\n        </Popover>\n      }\n    >\n      <Button bsStyle=\"link\">\n        <Icon type=\"pf\" name=\"info\" />\n      </Button>\n    </OverlayTrigger>\n  );\n\n  let actionButtons;\n  if (isTask) {\n    const removeButton = <Button disabled={mostRecentTask.state !== FINISHED}>{__('Remove') /* TODO */}</Button>;\n    const taskHasRequestParams = mostRecentTask.context_data && mostRecentTask.context_data.request_params;\n    actionButtons = (\n      <React.Fragment>\n        {mostRecentTask.status === ERROR &&\n          taskHasRequestParams && (\n            <ConversionHostRetryButton\n              task={mostRecentTask}\n              setConversionHostTaskToRetryAction={setConversionHostTaskToRetryAction}\n              showConversionHostRetryModalAction={showConversionHostRetryModalAction}\n              disabled={isPostingConversionHosts}\n            />\n          )}\n        {(mostRecentTask.state !== FINISHED || removeFailedTaskSupported) &&\n          removeButton /* currently only renders when it will be disabled. once removeFailedTaskSupported is true / removed, this button should always render. */}\n      </React.Fragment>\n    );\n  } else {\n    actionButtons = (\n      <ConversionHostRemoveButton\n        host={listItem}\n        setHostToDeleteAction={setHostToDeleteAction}\n        showConversionHostDeleteModalAction={showConversionHostDeleteModalAction}\n        disabled={mostRecentTask && mostRecentTask.meta.operation === DISABLE && mostRecentTask.state !== FINISHED}\n      />\n    );\n  }\n\n  const kebabMenu = mostRecentTask ? (\n    <StopPropagationOnClick>\n      <DropdownKebab id={`task-kebab-${mostRecentTask.id}`} pullRight>\n        <MenuItem disabled={mostRecentTask.state !== FINISHED}>{__('Download Log') /* TODO */}</MenuItem>\n      </DropdownKebab>\n    </StopPropagationOnClick>\n  ) : null;\n\n  return (\n    <ListView.Item\n      heading={listItem.name}\n      additionalInfo={[\n        <ListView.InfoItem key=\"task-status\">\n          {statusIcon}\n          {statusMessage}\n          {taskInfoPopover}\n        </ListView.InfoItem>\n      ]}\n      stacked\n      actions={\n        <div className=\"conversion-hosts-list-actions\">\n          {actionButtons}\n          {downloadLogSupported && kebabMenu}\n        </div>\n      }\n    />\n  );\n};\n\nConversionHostsListItem.propTypes = {\n  listItem: PropTypes.object,\n  isTask: PropTypes.bool,\n  setHostToDeleteAction: PropTypes.func,\n  showConversionHostDeleteModalAction: PropTypes.func,\n  setConversionHostTaskToRetryAction: PropTypes.func,\n  showConversionHostRetryModalAction: PropTypes.func,\n  isPostingConversionHosts: PropTypes.bool\n};\n\nexport default ConversionHostsListItem;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Grid, ListView, Toolbar } from 'patternfly-react';\nimport ListViewToolbar from '../../../../common/ListViewToolbar/ListViewToolbar';\nimport ConversionHostsListItem from './ConversionHostsListItem';\nimport DeleteConversionHostConfirmationModal from './DeleteConversionHostConfirmationModal';\nimport RetryConversionHostConfirmationModal from './RetryConversionHostConfirmationModal';\n\nconst ConversionHostsList = ({\n  combinedListItems,\n  conversionHostToDelete,\n  deleteConversionHostAction,\n  deleteConversionHostActionUrl,\n  hideConversionHostDeleteModalAction,\n  setHostToDeleteAction,\n  conversionHostDeleteModalVisible,\n  showConversionHostDeleteModalAction,\n  isDeletingConversionHost,\n  conversionHostRetryModalMounted,\n  isPostingConversionHosts,\n  setConversionHostTaskToRetryAction,\n  showConversionHostRetryModalAction,\n  postConversionHostsUrl\n}) => (\n  <React.Fragment>\n    <ListViewToolbar\n      filterTypes={ConversionHostsList.filterTypes}\n      sortFields={ConversionHostsList.sortFields}\n      listItems={combinedListItems}\n    >\n      {({\n        filteredSortedPaginatedListItems,\n        renderFilterControls,\n        renderSortControls,\n        renderActiveFilters,\n        renderPaginationRow\n      }) => (\n        <React.Fragment>\n          <Grid.Row>\n            <Toolbar>\n              {renderFilterControls()}\n              {renderSortControls()}\n              {renderActiveFilters(filteredSortedPaginatedListItems)}\n            </Toolbar>\n          </Grid.Row>\n          <div style={{ overflow: 'auto', paddingBottom: 300, height: '100%' }}>\n            <ListView className=\"conversion-hosts-list\" id=\"conversion_hosts\">\n              {filteredSortedPaginatedListItems.items.map(listItem => {\n                const { isTask } = listItem.meta;\n                const itemKey = `conversion-host-${isTask ? 'task-' : ''}${listItem.id}`;\n                return (\n                  <ConversionHostsListItem\n                    key={itemKey}\n                    listItem={listItem}\n                    isTask={isTask}\n                    setHostToDeleteAction={setHostToDeleteAction}\n                    showConversionHostDeleteModalAction={showConversionHostDeleteModalAction}\n                    setConversionHostTaskToRetryAction={setConversionHostTaskToRetryAction}\n                    showConversionHostRetryModalAction={showConversionHostRetryModalAction}\n                    isPostingConversionHosts={isPostingConversionHosts}\n                  />\n                );\n              })}\n            </ListView>\n            {renderPaginationRow(filteredSortedPaginatedListItems)}\n          </div>\n        </React.Fragment>\n      )}\n    </ListViewToolbar>\n\n    <DeleteConversionHostConfirmationModal\n      conversionHostToDelete={conversionHostToDelete}\n      deleteConversionHostAction={deleteConversionHostAction}\n      deleteConversionHostActionUrl={deleteConversionHostActionUrl}\n      hideConversionHostDeleteModalAction={hideConversionHostDeleteModalAction}\n      conversionHostDeleteModalVisible={conversionHostDeleteModalVisible}\n      isDeletingConversionHost={isDeletingConversionHost}\n    />\n    {conversionHostRetryModalMounted && (\n      <RetryConversionHostConfirmationModal postConversionHostsUrl={postConversionHostsUrl} />\n    )}\n  </React.Fragment>\n);\n\nConversionHostsList.propTypes = {\n  combinedListItems: PropTypes.arrayOf(PropTypes.object),\n  conversionHostToDelete: PropTypes.object,\n  deleteConversionHostAction: PropTypes.func,\n  deleteConversionHostActionUrl: PropTypes.string,\n  hideConversionHostDeleteModalAction: PropTypes.func,\n  setHostToDeleteAction: PropTypes.func,\n  conversionHostDeleteModalVisible: PropTypes.bool,\n  showConversionHostDeleteModalAction: PropTypes.func,\n  isDeletingConversionHost: PropTypes.bool,\n  conversionHostRetryModalMounted: PropTypes.bool,\n  isPostingConversionHosts: PropTypes.bool,\n  setConversionHostTaskToRetryAction: PropTypes.func,\n  showConversionHostRetryModalAction: PropTypes.func,\n  postConversionHostsUrl: PropTypes.string\n};\n\nConversionHostsList.sortFields = [\n  {\n    id: 'name',\n    title: __('Name'),\n    isNumeric: false\n  }\n];\n\nConversionHostsList.filterTypes = [\n  {\n    id: 'name',\n    title: __('Name'),\n    placeholder: __('Filter by Name'),\n    filterType: 'text'\n  }\n];\n\nexport default ConversionHostsList;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport ShowWizardEmptyState from '../../../../common/ShowWizardEmptyState/ShowWizardEmptyState';\n\nconst ConversionHostsEmptyState = ({ showConversionHostWizardAction }) => (\n  <React.Fragment>\n    <ShowWizardEmptyState\n      description={\n        __('Select one or more hosts to be configured as IMS conversion hosts.') // prettier-ignore\n      }\n      showWizardAction={showConversionHostWizardAction}\n      buttonText={__('Configure Conversion Host')}\n      buttonHref=\"\"\n      className=\"mappings\"\n    />\n  </React.Fragment>\n);\n\nConversionHostsEmptyState.propTypes = {\n  showConversionHostWizardAction: PropTypes.func\n};\n\nexport default ConversionHostsEmptyState;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Spinner, Icon } from 'patternfly-react';\nimport ShowWizardEmptyState from '../../../common/ShowWizardEmptyState/ShowWizardEmptyState';\nimport ConversionHostsEmptyState from './components/ConversionHostsEmptyState';\nimport ConversionHostsList from './components/ConversionHostsList';\nimport ConversionHostWizard from './components/ConversionHostWizard';\nimport { FETCH_V2V_PROVIDERS_URL } from '../../../../../../redux/common/providers/providersConstants';\n\nclass ConversionHostsSettings extends React.Component {\n  pollingInterval = null;\n  state = { hasMadeInitialFetch: false };\n\n  componentDidMount() {\n    const { fetchProvidersAction, fetchProvidersUrl } = this.props;\n    fetchProvidersAction(fetchProvidersUrl);\n    this.startPolling();\n  }\n\n  componentWillUnmount() {\n    this.stopPolling();\n  }\n\n  componentDidUpdate(prevProps) {\n    // When a modal closes, reset the polling interval to see results immediately\n    if (this.pollingInterval && this.hasSomeModalOpen(prevProps) && !this.hasSomeModalOpen()) {\n      this.startPolling();\n    }\n  }\n\n  hasSomeModalOpen = (props = this.props) =>\n    props.conversionHostWizardMounted || props.conversionHostDeleteModalVisible;\n\n  startPolling = () => {\n    this.stopPolling(); // Allow startPolling to be called more than once to reset the interval\n    this.fetchConversionHostsAndTasks().then(() => {\n      this.setState({ hasMadeInitialFetch: true });\n      this.pollingInterval = setInterval(this.fetchConversionHostsAndTasks, 15000);\n    });\n  };\n\n  stopPolling = () => {\n    if (this.pollingInterval) {\n      clearInterval(this.pollingInterval);\n      this.pollingInterval = null;\n    }\n  };\n\n  fetchConversionHostsAndTasks = () => {\n    const {\n      fetchConversionHostsAction,\n      fetchConversionHostsUrl,\n      fetchConversionHostTasksAction,\n      fetchConversionHostTasksUrl\n    } = this.props;\n    if (this.hasSomeModalOpen()) return Promise.resolve();\n    return Promise.all([\n      fetchConversionHostsAction(fetchConversionHostsUrl),\n      fetchConversionHostTasksAction(fetchConversionHostTasksUrl)\n    ]);\n  };\n\n  render() {\n    const {\n      isFetchingProviders,\n      hasSufficientProviders,\n      combinedListItems,\n      setHostToDeleteAction,\n      showConversionHostDeleteModalAction,\n      conversionHostDeleteModalVisible,\n      conversionHostToDelete,\n      isDeletingConversionHost,\n      showConversionHostWizardAction,\n      conversionHostWizardMounted,\n      hideConversionHostDeleteModalAction,\n      deleteConversionHostAction,\n      deleteConversionHostActionUrl,\n      fetchConversionHostsAction,\n      fetchConversionHostsUrl,\n      conversionHostRetryModalMounted,\n      isPostingConversionHosts,\n      setConversionHostTaskToRetryAction,\n      showConversionHostRetryModalAction,\n      postConversionHostsUrl\n    } = this.props;\n\n    const { hasMadeInitialFetch } = this.state;\n\n    return (\n      <Spinner loading={isFetchingProviders || !hasMadeInitialFetch} style={{ marginTop: 15 }}>\n        {!hasSufficientProviders ? (\n          <ShowWizardEmptyState\n            description={\n              __('There are no providers available from which to configure a conversion host. You must configure a target provider before configuring conversion hosts.') // prettier-ignore\n            }\n            buttonText={__('Configure Providers')}\n            buttonHref=\"/ems_infra/show_list\"\n            className=\"full-page-empty\"\n          />\n        ) : (\n          <React.Fragment>\n            <div className=\"heading-with-link-container\">\n              <div className=\"pull-left\">\n                <h3>{__('Configured Conversion Hosts')}</h3>\n              </div>\n              <div className=\"pull-right\">\n                <a\n                  href=\"#\"\n                  onClick={e => {\n                    e.preventDefault();\n                    showConversionHostWizardAction();\n                  }}\n                >\n                  <Icon type=\"pf\" name=\"add-circle-o\" />\n                  &nbsp;\n                  {__('Configure Conversion Host')}\n                </a>\n              </div>\n            </div>\n            {combinedListItems.length === 0 ? (\n              <ConversionHostsEmptyState showConversionHostWizardAction={showConversionHostWizardAction} />\n            ) : (\n              <ConversionHostsList\n                combinedListItems={combinedListItems}\n                deleteConversionHostAction={deleteConversionHostAction}\n                deleteConversionHostActionUrl={deleteConversionHostActionUrl}\n                fetchConversionHostsAction={fetchConversionHostsAction}\n                fetchConversionHostsUrl={fetchConversionHostsUrl}\n                setHostToDeleteAction={setHostToDeleteAction}\n                showConversionHostDeleteModalAction={showConversionHostDeleteModalAction}\n                conversionHostDeleteModalVisible={conversionHostDeleteModalVisible}\n                conversionHostToDelete={conversionHostToDelete}\n                isDeletingConversionHost={isDeletingConversionHost}\n                hideConversionHostDeleteModalAction={hideConversionHostDeleteModalAction}\n                conversionHostRetryModalMounted={conversionHostRetryModalMounted}\n                isPostingConversionHosts={isPostingConversionHosts}\n                setConversionHostTaskToRetryAction={setConversionHostTaskToRetryAction}\n                showConversionHostRetryModalAction={showConversionHostRetryModalAction}\n                postConversionHostsUrl={postConversionHostsUrl}\n              />\n            )}\n            {conversionHostWizardMounted && <ConversionHostWizard />}\n          </React.Fragment>\n        )}\n      </Spinner>\n    );\n  }\n}\n\nConversionHostsSettings.propTypes = {\n  deleteConversionHostAction: PropTypes.func,\n  deleteConversionHostActionUrl: PropTypes.string,\n  fetchProvidersUrl: PropTypes.string,\n  fetchProvidersAction: PropTypes.func,\n  isFetchingProviders: PropTypes.bool,\n  hasSufficientProviders: PropTypes.bool,\n  fetchConversionHostsUrl: PropTypes.string,\n  fetchConversionHostsAction: PropTypes.func,\n  fetchConversionHostTasksAction: PropTypes.func,\n  fetchConversionHostTasksUrl: PropTypes.string,\n  combinedListItems: PropTypes.arrayOf(PropTypes.object),\n  showConversionHostWizardAction: PropTypes.func,\n  conversionHostWizardMounted: PropTypes.bool,\n  setHostToDeleteAction: PropTypes.func,\n  showConversionHostDeleteModalAction: PropTypes.func,\n  conversionHostDeleteModalVisible: PropTypes.bool,\n  conversionHostToDelete: PropTypes.object,\n  isDeletingConversionHost: PropTypes.bool,\n  hideConversionHostDeleteModalAction: PropTypes.func,\n  conversionHostRetryModalMounted: PropTypes.bool,\n  isPostingConversionHosts: PropTypes.bool,\n  setConversionHostTaskToRetryAction: PropTypes.func,\n  showConversionHostRetryModalAction: PropTypes.func,\n  postConversionHostsUrl: PropTypes.string\n};\n\nConversionHostsSettings.defaultProps = {\n  deleteConversionHostActionUrl: '/api/conversion_hosts',\n  fetchProvidersUrl: FETCH_V2V_PROVIDERS_URL,\n  fetchConversionHostsUrl: '/api/conversion_hosts?attributes=resource&expand=resources',\n  fetchConversionHostTasksUrl:\n    '/api/tasks?expand=resources&attributes=id,name,state,status,message,started_on,updated_on,pct_complete&filter[]=name=\"%25Configuring a conversion_host%25\"&sort_by=updated_on&sort_order=descending',\n  postConversionHostsUrl: '/api/conversion_hosts'\n};\n\nexport default ConversionHostsSettings;\n","import { connect } from 'react-redux';\nimport ConversionHostsSettings from './ConversionHostsSettings';\n\nimport { fetchProvidersAction } from '../../../../../../redux/common/providers/providersActions';\nimport {\n  fetchConversionHostsAction,\n  fetchConversionHostTasksAction,\n  showConversionHostWizardAction,\n  setHostToDeleteAction,\n  deleteConversionHostAction,\n  showConversionHostDeleteModalAction,\n  hideConversionHostDeleteModalAction,\n  setConversionHostTaskToRetryAction,\n  showConversionHostRetryModalAction\n} from '../../SettingsActions';\n\nimport { getCombinedConversionHostListItems } from '../../helpers';\n\nconst mapStateToProps = (\n  {\n    providers: { isFetchingProviders, hasSufficientProviders },\n    settings: {\n      conversionHosts,\n      conversionHostTasks,\n      conversionHostTasksByResource,\n      conversionHostWizardMounted,\n      conversionHostDeleteModalVisible,\n      conversionHostToDelete,\n      isDeletingConversionHost,\n      conversionHostRetryModalMounted,\n      isPostingConversionHosts\n    }\n  },\n  ownProps\n) => ({\n  isFetchingProviders,\n  hasSufficientProviders,\n  combinedListItems: getCombinedConversionHostListItems(\n    conversionHosts,\n    conversionHostTasks,\n    conversionHostTasksByResource\n  ),\n  conversionHostWizardMounted,\n  conversionHostDeleteModalVisible,\n  conversionHostToDelete,\n  isDeletingConversionHost,\n  conversionHostRetryModalMounted,\n  isPostingConversionHosts,\n  ...ownProps.data\n});\n\nconst mergeProps = (stateProps, dispatchProps, ownProps) => Object.assign(stateProps, ownProps.data, dispatchProps);\n\nexport default connect(\n  mapStateToProps,\n  {\n    fetchProvidersAction,\n    fetchConversionHostsAction,\n    fetchConversionHostTasksAction,\n    showConversionHostWizardAction,\n    setHostToDeleteAction,\n    deleteConversionHostAction,\n    showConversionHostDeleteModalAction,\n    hideConversionHostDeleteModalAction,\n    setConversionHostTaskToRetryAction,\n    showConversionHostRetryModalAction\n  },\n  mergeProps\n)(ConversionHostsSettings);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport 'bootstrap-touchspin';\n\nclass NumberInput extends React.Component {\n  componentDidMount() {\n    const {\n      id,\n      input: { onChange },\n      min\n    } = this.props;\n    const input = $(`#${id}`);\n    input.TouchSpin({\n      buttondown_class: 'btn btn-default',\n      buttonup_class: 'btn btn-default',\n      min\n    });\n    // bootstrap-touchspin's change event doesn't trigger the rendered input's onChange.\n    input.on('change', event => {\n      onChange(event.target.value);\n    });\n  }\n\n  componentWillUnmount() {\n    $(`#${this.props.id}`).off('change');\n  }\n\n  render() {\n    const {\n      id,\n      input: { value, onChange }\n    } = this.props;\n    return (\n      <input id={id} className=\"bootstrap-touchspin\" value={value} onChange={event => onChange(event.target.value)} />\n    );\n  }\n}\n\nNumberInput.propTypes = {\n  id: PropTypes.string.isRequired,\n  input: PropTypes.shape({\n    value: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n    onChange: PropTypes.func\n  }),\n  min: PropTypes.number\n};\n\nNumberInput.defaultProps = {\n  min: 0\n};\n\nNumberInput.normalizeStringToInt = str => (str && parseInt(str.replace(/\\D/g, ''), 10)) || 0;\n\nexport default NumberInput;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { reduxForm, Field } from 'redux-form';\nimport { Form, Button, Icon, OverlayTrigger, Popover, Spinner } from 'patternfly-react';\nimport NumberInput from '../../../common/forms/NumberInput';\n// import TextInputWithCheckbox from '../../../common/forms/TextInputWithCheckbox'; // FIXME: uncomment once backend is ready\n\nconst FORM_NAME = 'settings';\n\nexport class GeneralSettings extends React.Component {\n  componentDidMount() {\n    const { fetchServersAction, fetchServersUrl, fetchSettingsAction, fetchSettingsUrl } = this.props;\n    fetchServersAction(fetchServersUrl);\n    fetchSettingsAction(fetchSettingsUrl);\n  }\n\n  onApplyClick = () => {\n    const { patchSettingsAction, servers, settingsForm } = this.props;\n    patchSettingsAction(servers, settingsForm.values);\n  };\n\n  enforceConstraintsOnChange = (event, newValue, prevValue, fieldChanging) => {\n    const {\n      settingsForm: {\n        values: { max_concurrent_tasks_per_host, max_concurrent_tasks_per_ems }\n      },\n      formChangeAction\n    } = this.props;\n    if (fieldChanging === 'max_concurrent_tasks_per_host' && newValue > max_concurrent_tasks_per_ems) {\n      formChangeAction(FORM_NAME, 'max_concurrent_tasks_per_ems', newValue);\n    } else if (fieldChanging === 'max_concurrent_tasks_per_ems' && newValue < max_concurrent_tasks_per_host) {\n      formChangeAction(FORM_NAME, 'max_concurrent_tasks_per_host', newValue);\n    }\n  };\n\n  render() {\n    const { isFetchingServers, isFetchingSettings, isSavingSettings, savedSettings, settingsForm } = this.props;\n\n    const hasUnsavedChanges =\n      settingsForm &&\n      settingsForm.values &&\n      Object.keys(savedSettings).some(key => savedSettings[key] !== settingsForm.values[key]);\n\n    // const inputEnabledFunction = value => value !== 'unlimited'; // FIXME: uncomment once backend is ready\n\n    return (\n      <Spinner loading={isFetchingServers || isFetchingSettings} style={{ marginTop: 15 }}>\n        <div className=\"migration-settings\">\n          <Form className=\"form-horizontal\" style={{ padding: '0 20px' }}>\n            <div>\n              <h3>{__('Concurrent Migrations')}</h3>\n            </div>\n            <Form.FormGroup>\n              <Form.ControlLabel className=\"col-md-5\">\n                <span className=\"pull-left\">\n                  {__('Maximum concurrent migrations per conversion host')}\n                  <OverlayTrigger\n                    overlay={\n                      <Popover id=\"maximum_concurrect_migrations_per_provider_popover\">\n                        {__(\n                          'For VDDK transformations the maximum concurrent migrations per conversion host is limited to 20. See the product documentation for more information.'\n                        )}\n                      </Popover>\n                    }\n                    placement=\"top\"\n                    trigger={['hover']}\n                    delay={500}\n                    rootClose={false}\n                  >\n                    <Icon\n                      type=\"pf\"\n                      name=\"info\"\n                      size=\"md\"\n                      style={{\n                        width: 'inherit',\n                        backgroundColor: 'transparent',\n                        padding: 10\n                      }}\n                    />\n                  </OverlayTrigger>\n                </span>\n              </Form.ControlLabel>\n              <div className=\"col-md-2\">\n                <Field\n                  id=\"max_concurrent_tasks_per_host\"\n                  name=\"max_concurrent_tasks_per_host\"\n                  component={NumberInput}\n                  normalize={NumberInput.normalizeStringToInt}\n                  min={1}\n                  onChange={this.enforceConstraintsOnChange}\n                />\n              </div>\n            </Form.FormGroup>\n            <Form.FormGroup>\n              <Form.ControlLabel className=\"col-md-5\">\n                <div className=\"pull-left\">{__('Maximum concurrent migrations per provider')}</div>\n              </Form.ControlLabel>\n              <div className=\"col-md-2\">\n                <Field\n                  id=\"max_concurrent_tasks_per_ems\"\n                  name=\"max_concurrent_tasks_per_ems\"\n                  component={NumberInput}\n                  normalize={NumberInput.normalizeStringToInt}\n                  min={1}\n                  onChange={this.enforceConstraintsOnChange}\n                />\n              </div>\n            </Form.FormGroup>\n            {/* FIXME: uncomment once backend is ready\n            <Form.FormGroup />\n            <div>\n              <h3>{__('Resource Utilization Limits for Migrations')}</h3>\n            </div>\n            <Field\n              id=\"cpu_limit_per_host\"\n              name=\"cpu_limit_per_host\"\n              component={TextInputWithCheckbox}\n              normalize={TextInputWithCheckbox.normalizeStringToInt}\n              label={__('Max CPU utilization per conversion host')}\n              postfix=\"％\"\n              inputEnabledFunction={inputEnabledFunction}\n            />\n            <Field\n              id=\"network_limit_per_host\"\n              name=\"network_limit_per_host\"\n              component={TextInputWithCheckbox}\n              normalize={TextInputWithCheckbox.normalizeStringToInt}\n              label={__('Total network throughput')}\n              postfix={__('MB/s')}\n              inputEnabledFunction={inputEnabledFunction}\n            />\n*/}\n            <Form.FormGroup className=\"col-md-1 pull-left\" style={{ marginTop: '40px' }}>\n              <Button bsStyle=\"primary\" onClick={this.onApplyClick} disabled={!hasUnsavedChanges || isSavingSettings}>\n                {__('Apply')}\n              </Button>\n              {isSavingSettings && (\n                <div style={{ paddingTop: 10 }}>\n                  <Spinner loading size=\"xs\" inline />\n                  {__(' Applying...')}\n                </div>\n              )}\n            </Form.FormGroup>\n          </Form>\n        </div>\n      </Spinner>\n    );\n  }\n}\n\nGeneralSettings.propTypes = {\n  fetchServersAction: PropTypes.func,\n  fetchSettingsAction: PropTypes.func,\n  patchSettingsAction: PropTypes.func,\n  isFetchingServers: PropTypes.bool,\n  isFetchingSettings: PropTypes.bool,\n  isSavingSettings: PropTypes.bool,\n  servers: PropTypes.array,\n  savedSettings: PropTypes.object,\n  settingsForm: PropTypes.object,\n  fetchServersUrl: PropTypes.string,\n  fetchSettingsUrl: PropTypes.string,\n  formChangeAction: PropTypes.func\n};\n\nGeneralSettings.defaultProps = {\n  fetchServersUrl: '/api/servers',\n  fetchSettingsUrl: '/api/settings'\n};\n\nexport default reduxForm({\n  form: FORM_NAME\n})(GeneralSettings);\n","import { connect } from 'react-redux';\nimport { change } from 'redux-form';\nimport GeneralSettings from './GeneralSettings';\n\nimport { fetchServersAction, fetchSettingsAction, patchSettingsAction } from '../../SettingsActions';\n\nconst mapStateToProps = ({ settings, form }, ownProps) => ({\n  ...settings,\n  ...ownProps.data,\n  settingsForm: form.settings,\n  initialValues: settings.savedSettings,\n  enableReinitialize: true,\n  destroyOnUnmount: false\n});\n\nconst mergeProps = (stateProps, dispatchProps, ownProps) => Object.assign(stateProps, ownProps.data, dispatchProps);\n\nexport default connect(\n  mapStateToProps,\n  { fetchServersAction, fetchSettingsAction, patchSettingsAction, formChangeAction: change },\n  mergeProps\n)(GeneralSettings);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Breadcrumb, Tabs, Tab } from 'patternfly-react';\nimport Toolbar from '../../../config/Toolbar';\nimport GeneralSettings from './screens/GeneralSettings';\nimport ConversionHostsSettings from './screens/ConversionHostsSettings';\n\nconst Settings = props => {\n  const { match, redirectTo } = props;\n\n  return (\n    <React.Fragment>\n      <Toolbar>\n        <Breadcrumb.Item active>{__('Compute')}</Breadcrumb.Item>\n        <Breadcrumb.Item active>{__('Migration')}</Breadcrumb.Item>\n        <Breadcrumb.Item active>\n          <strong>{__('Migration Settings')}</strong>\n        </Breadcrumb.Item>\n      </Toolbar>\n      <div style={{ marginTop: 10 }}>\n        <Tabs id=\"settings-tabs\" activeKey={match.path} onSelect={key => redirectTo(key)} unmountOnExit>\n          <Tab eventKey=\"/settings\" title={__('Migration Throttling')}>\n            <GeneralSettings />\n          </Tab>\n          <Tab eventKey=\"/settings/conversion_hosts\" title={__('Conversion Hosts')}>\n            <ConversionHostsSettings />\n          </Tab>\n        </Tabs>\n      </div>\n    </React.Fragment>\n  );\n};\n\nSettings.propTypes = {\n  match: PropTypes.object,\n  redirectTo: PropTypes.func\n};\n\nexport default Settings;\n","import { array, string, object } from 'yup';\n\nexport const serviceTemplatePlaybookSchema = array()\n  .of(\n    object().shape({\n      href: string().required(),\n      id: string().required(),\n      name: string().required()\n    })\n  )\n  .nullable();\n","import { array, string, object } from 'yup';\n\nexport const requestsSchema = array()\n  .of(\n    object().shape({\n      href: string().required(),\n      id: string().required(),\n      description: string().nullable(),\n      approval_state: string().nullable(),\n      created_on: string().required(),\n      updated_on: string().nullable(),\n      fulfilled_on: string().nullable(),\n      request_state: string().nullable(),\n      status: string(),\n      options: object()\n        .shape({\n          delivered_on: string()\n        })\n        .required(),\n      miq_request_tasks: array()\n        .of(\n          object().shape({\n            href: string().required(),\n            id: string().required(),\n            description: string().required(),\n            state: string().required(),\n            options: object()\n              .shape({\n                src_id: string(),\n                delivered_on: string().nullable()\n              })\n              .required(),\n            created_on: string().required(),\n            updated_on: string().nullable(),\n            message: string().required(),\n            status: string().required()\n          })\n        )\n        .nullable()\n    })\n  )\n  .nullable();\n","import { validateSchema } from '../../../../data/schemaHelpers';\nimport { plansSchema } from '../../../../data/models/plans';\nimport { requestsSchema } from '../../../../data/models/requests';\nimport { mappingsSchema } from '../../../../data/models/transformationMappings';\nimport { serviceTemplatePlaybookSchema } from '../../../../data/models/playbooks';\n\nexport const validateOverviewPlans = plans => {\n  validateSchema(plansSchema, plans);\n};\n\nexport const validateOverviewRequests = requests => {\n  validateSchema(requestsSchema, requests);\n};\n\nexport const validateOverviewMappings = mappings => {\n  validateSchema(mappingsSchema, mappings);\n};\n\nexport const validateServiceTemplatePlaybooks = playbooks => {\n  validateSchema(serviceTemplatePlaybookSchema, playbooks);\n};\n","import Immutable from 'seamless-immutable';\n\nimport {\n  validateOverviewPlans,\n  validateOverviewRequests,\n  validateOverviewMappings,\n  validateServiceTemplatePlaybooks\n} from './OverviewValidators';\nimport {\n  SHOW_PLAN_WIZARD,\n  HIDE_PLAN_WIZARD,\n  PLAN_WIZARD_EXITED,\n  SHOW_EDIT_PLAN_TITLE_MODAL,\n  HIDE_EDIT_PLAN_TITLE_MODAL,\n  FETCH_V2V_TRANSFORMATION_MAPPINGS,\n  FETCH_V2V_TRANSFORMATION_PLANS,\n  FETCH_V2V_SERVICE_TEMPLATE_ANSIBLE_PLAYBOOKS,\n  FETCH_V2V_ARCHIVED_TRANSFORMATION_PLANS,\n  FETCH_V2V_ALL_REQUESTS_WITH_TASKS,\n  FETCH_V2V_ALL_ARCHIVED_PLAN_REQUESTS_WITH_TASKS,\n  CREATE_V2V_TRANSFORMATION_PLAN_REQUEST,\n  CONTINUE_TO_PLAN,\n  V2V_SET_MIGRATIONS_FILTER,\n  V2V_AUTO_SET_MIGRATIONS_FILTER,\n  V2V_RETRY_MIGRATION,\n  SHOW_CONFIRM_MODAL,\n  HIDE_CONFIRM_MODAL,\n  MIGRATIONS_FILTERS,\n  ARCHIVE_TRANSFORMATION_PLAN,\n  V2V_TOGGLE_SCHEDULE_MIGRATION_MODAL,\n  V2V_SCHEDULE_MIGRATION,\n  SHOW_PLAN_WIZARD_EDIT_MODE,\n  V2V_EDIT_PLAN_REQUEST,\n  V2V_CANCEL_PLAN_REQUEST\n} from './OverviewConstants';\nimport { FETCH_V2V_CLOUD_TENANTS } from '../Mappings/MappingsConstants';\nimport { planTransmutation } from './helpers';\n\nexport const initialState = Immutable({\n  planWizardVisible: false,\n  hidePlanWizard: true,\n  planWizardId: null, // id of infrastructure mapping to use for new plan\n  editingPlanId: null, // id of migration plan to edit\n  editPlanNameModalVisible: false,\n  transformationMappings: [],\n  isRejectedTransformationMappings: false,\n  isFetchingTransformationMappings: false,\n  transformationPlans: [],\n  isRejectedTransformationPlans: false,\n  isFetchingTransformationPlans: false,\n  errorTransformationPlans: null,\n  allRequestsWithTasks: [],\n  isRejectedAllRequestsWithTasks: false,\n  isFetchingAllRequestsWithTasks: false,\n  errorAllRequestsWithTasks: null,\n  requestsWithTasksPreviouslyFetched: false,\n  archivedTransformationPlans: [],\n  isRejectedArchivedTransformationPlans: false,\n  isFetchingArchivedTransformationPlans: '',\n  errorArchivedTransformationPlans: null,\n  allArchivedPlanRequestsWithTasks: [],\n  isRejectedAllArchivedPlanRequestsWithTasks: false,\n  isFetchingAllArchivedPlanRequestsWithTasks: false,\n  errorAllArchivedPlanRequestsWithTasks: null,\n  createTransformationPlanRequestResponse: {},\n  isRejectedCreateTranformationPlanRequest: false,\n  isCreatingTransformationPlanRequest: null,\n  errorCreateTransformationPlanRequest: null,\n  isContinuingToPlan: false,\n  migrationsFilter: MIGRATIONS_FILTERS.notStarted,\n  showDeleteConfirmationModal: false,\n  confirmModalVisible: false,\n  confirmModalOptions: {},\n  isArchivingTransformationPlan: false,\n  isRejectedArchivingTransformationPlan: false,\n  errorArchivingTransformationPlan: null,\n  scheduleMigrationModal: false,\n  scheduleMigrationPlan: {},\n  isSchedulingMigration: false,\n  isRejectedSchedulingMigration: false,\n  errorSchedulingMigration: false,\n  serviceTemplatePlaybooks: [],\n  isFetchingServiceTemplatePlaybooks: false,\n  isRejectedServiceTemplatePlaybooks: false,\n  errorServiceTemplatePlaybooks: null,\n  initialMigrationsFilterSet: false,\n  isEditingPlanRequest: false,\n  isRejectedEditingPlanRequest: false,\n  errorEditingPlanRequest: null,\n  requestsProcessingCancellation: [],\n  isCancellingPlanRequest: false,\n  isRejectedCancelPlanRequest: false,\n  errorCancelPlanRequest: null,\n  cloudTenants: [],\n  isFetchingCloudTenants: false,\n  isRejectedCloudTenants: false,\n  errorCloudTenants: null\n});\n\nexport default (state = initialState, action) => {\n  switch (action.type) {\n    case SHOW_CONFIRM_MODAL:\n      return state.set('confirmModalOptions', action.payload).set('confirmModalVisible', true);\n    case HIDE_CONFIRM_MODAL:\n      return state.set('confirmModalVisible', false);\n    case SHOW_PLAN_WIZARD: {\n      const { payload } = action;\n      return Immutable.merge(state, {\n        planWizardVisible: true,\n        hidePlanWizard: false,\n        planWizardId: (payload && payload.id) || null\n      });\n    }\n    case SHOW_PLAN_WIZARD_EDIT_MODE: {\n      const { editingPlanId } = action;\n      return Immutable.merge(state, {\n        planWizardVisible: true,\n        hidePlanWizard: false,\n        planWizardId: null,\n        editingPlanId\n      });\n    }\n    case HIDE_PLAN_WIZARD: {\n      return state\n        .set('hidePlanWizard', true)\n        .set('planWizardId', null)\n        .set('editingPlanId', null);\n    }\n    case SHOW_EDIT_PLAN_TITLE_MODAL:\n      return state.set('editingPlanId', action.editingPlanId).set('editPlanNameModalVisible', true);\n    case HIDE_EDIT_PLAN_TITLE_MODAL:\n      return state.set('editingPlanId', null).set('editPlanNameModalVisible', false);\n    case PLAN_WIZARD_EXITED:\n      return state.set('planWizardVisible', false);\n\n    case `${FETCH_V2V_TRANSFORMATION_MAPPINGS}_PENDING`:\n      return state.set('isFetchingTransformationMappings', true);\n    case `${FETCH_V2V_TRANSFORMATION_MAPPINGS}_FULFILLED`:\n      if (action.payload.data && action.payload.data.resources) {\n        validateOverviewMappings(action.payload.data.resources);\n        return state\n          .set('transformationMappings', action.payload.data.resources)\n          .set('isRejectedTransformationMappings', false)\n          .set('isFetchingTransformationMappings', false)\n          .set('isContinuingToPlan', false);\n      }\n      return state\n        .set('transformationMappings', [])\n        .set('isFetchingTransformationMappings', false)\n        .set('isRejectedTransformationMappings', false);\n    case `${FETCH_V2V_TRANSFORMATION_MAPPINGS}_REJECTED`:\n      return state\n        .set('errorTransformationMappings', action.payload)\n        .set('isRejectedTransformationMappings', true)\n        .set('isFetchingTransformationMappings', false);\n    case `${FETCH_V2V_TRANSFORMATION_PLANS}_PENDING`:\n      return state.set('isFetchingTransformationPlans', true);\n    case `${FETCH_V2V_TRANSFORMATION_PLANS}_FULFILLED`: {\n      validateOverviewPlans(action.payload.data.resources);\n      return state\n        .set('transformationPlans', planTransmutation(action.payload.data.resources, state.transformationMappings))\n        .set('isFetchingTransformationPlans', false)\n        .set('isRejectedTransformationPlans', false)\n        .set('errorTransformationPlans', null);\n    }\n    case `${FETCH_V2V_TRANSFORMATION_PLANS}_REJECTED`:\n      return state\n        .set('errorTransformationPlans', action.payload)\n        .set('isRejectedTransformationPlans', true)\n        .set('isFetchingTransformationPlans', false);\n    case `${FETCH_V2V_ARCHIVED_TRANSFORMATION_PLANS}_PENDING`:\n      return state\n        .set('isFetchingArchivedTransformationPlans', 'true')\n        .set('isRejectedArchivedTransformationPlans', false);\n    case `${FETCH_V2V_ARCHIVED_TRANSFORMATION_PLANS}_FULFILLED`:\n      validateOverviewPlans(action.payload.data.resources);\n      return state\n        .set(\n          'archivedTransformationPlans',\n          planTransmutation(action.payload.data.resources, state.transformationMappings)\n        )\n        .set('isFetchingArchivedTransformationPlans', '')\n        .set('isRejectedArchivedTransformationPlans', false)\n        .set('errorArchivedTransformationPlans', null);\n    case `${FETCH_V2V_ARCHIVED_TRANSFORMATION_PLANS}_REJECTED`:\n      return state\n        .set('errorArchivedTransformationPlans', action.payload)\n        .set('isRejectedArchivedTransformationPlans', true)\n        .set('isFetchingArchivedTransformationPlans', '');\n    case `${FETCH_V2V_SERVICE_TEMPLATE_ANSIBLE_PLAYBOOKS}_PENDING`:\n      return state.set('isFetchingServiceTemplatePlaybooks', true);\n    case `${FETCH_V2V_SERVICE_TEMPLATE_ANSIBLE_PLAYBOOKS}_FULFILLED`:\n      validateServiceTemplatePlaybooks(action.payload.data.resources);\n      return state\n        .set('serviceTemplatePlaybooks', action.payload.data.resources)\n        .set('isFetchingServiceTemplatePlaybooks', false)\n        .set('isRejectedServiceTemplatePlaybooks', false)\n        .set('errorServiceTemplatePlaybooks', null);\n    case `${FETCH_V2V_SERVICE_TEMPLATE_ANSIBLE_PLAYBOOKS}_REJECTED`:\n      return state\n        .set('errorServiceTemplatePlaybooks', action.payload)\n        .set('isRejectedServiceTemplatePlaybooks', true)\n        .set('isFetchingServiceTemplatePlaybooks', false);\n    case `${FETCH_V2V_ALL_REQUESTS_WITH_TASKS}_PENDING`:\n      return state.set('isFetchingAllRequestsWithTasks', true);\n    case `${FETCH_V2V_ALL_REQUESTS_WITH_TASKS}_FULFILLED`:\n      validateOverviewRequests(action.payload.data.results);\n      return state\n        .set('allRequestsWithTasks', action.payload.data.results)\n        .set('isFetchingAllRequestsWithTasks', false)\n        .set('isRejectedAllRequestsWithTasks', false)\n        .set('errorAllRequestsWithTasks', null)\n        .set('requestsWithTasksPreviouslyFetched', true)\n        .set('planId', '')\n        .set('reloadCard', false);\n    case `${FETCH_V2V_ALL_REQUESTS_WITH_TASKS}_REJECTED`:\n      return state\n        .set('errorAllRequestsWithTasks', action.payload)\n        .set('isRejectedAllRequestsWithTasks', true)\n        .set('isFetchingAllRequestsWithTasks', false)\n        .set('requestsWithTasksPreviouslyFetched', false);\n    case `${FETCH_V2V_ALL_ARCHIVED_PLAN_REQUESTS_WITH_TASKS}_PENDING`:\n      return state\n        .set('isFetchingAllArchivedPlanRequestsWithTasks', true)\n        .set('isRejectedAllArchivedPlanRequestsWithTasks', false);\n    case `${FETCH_V2V_ALL_ARCHIVED_PLAN_REQUESTS_WITH_TASKS}_FULFILLED`:\n      validateOverviewRequests(action.payload.data.results);\n      return state\n        .set('allArchivedPlanRequestsWithTasks', action.payload.data.results)\n        .set('isFetchingAllArchivedPlanRequestsWithTasks', false)\n        .set('isRejectedAllArchivedPlanRequestsWithTasks', false)\n        .set('requestsWithTasksPreviouslyFetched', true)\n        .set('errorAllArchivedPlanRequestsWithTasks', null);\n    case `${FETCH_V2V_ALL_ARCHIVED_PLAN_REQUESTS_WITH_TASKS}_REJECTED`:\n      return state\n        .set('errorAllArchivedPlanRequestsWithTasks', action.payload)\n        .set('isRejectedAllArchivedPlanRequestsWithTasks', true)\n        .set('isFetchingAllArchivedPlanRequestsWithTasks', false);\n    case `${CREATE_V2V_TRANSFORMATION_PLAN_REQUEST}_PENDING`:\n      return state.set('isCreatingTransformationPlanRequest', action.payload);\n    case `${CREATE_V2V_TRANSFORMATION_PLAN_REQUEST}_FULFILLED`:\n      return state\n        .set('createTransformationPlanRequestResponse', action.payload.data)\n        .set('isCreatingTransformationPlanRequest', null)\n        .set('isRejectedCreateTranformationPlanRequest', false)\n        .set('errorCreateTransformationPlanRequest', null);\n    case `${CREATE_V2V_TRANSFORMATION_PLAN_REQUEST}_REJECTED`:\n      return state\n        .set('errorCreateTransformationPlanRequest', action.payload)\n        .set('isRejectedCreateTranformationPlanRequest', true)\n        .set('isCreatingTransformationPlanRequest', null);\n    case CONTINUE_TO_PLAN:\n      return state.set('isContinuingToPlan', true).set('planWizardId', action.payload.id);\n    case V2V_SET_MIGRATIONS_FILTER:\n      return state.set('migrationsFilter', action.payload);\n    case V2V_RETRY_MIGRATION:\n      return state.set('planId', action.payload).set('reloadCard', true);\n    case `${ARCHIVE_TRANSFORMATION_PLAN}_PENDING`:\n      return state.set('isArchivingTransformationPlan', true).set('isRejectedArchivingTransformationPlan', false);\n    case `${ARCHIVE_TRANSFORMATION_PLAN}_FULFILLED`:\n      return state\n        .set('isArchivingTransformationPlan', false)\n        .set('isRejectedArchivingTransformationPlan', false)\n        .set('errorArchivingTransformationPlan', null);\n    case `${ARCHIVE_TRANSFORMATION_PLAN}_REJECTED`:\n      return state\n        .set('isArchivingTransformationPlan', false)\n        .set('errorArchivingTransformationPlan', action.payload)\n        .set('isRejectedArchivingTransformationPlan', true);\n    case V2V_TOGGLE_SCHEDULE_MIGRATION_MODAL:\n      if (action.payload !== undefined) {\n        return state\n          .set('scheduleMigrationPlan', action.payload.plan)\n          .set('scheduleMigrationModal', !state.scheduleMigrationModal);\n      }\n      return state.set('scheduleMigrationPlan', null).set('scheduleMigrationModal', !state.scheduleMigrationModal);\n    case `${V2V_SCHEDULE_MIGRATION}_PENDING`:\n      return state.set('isSchedulingMigration', true).set('isRejectedSchedulingMigration', false);\n    case `${V2V_SCHEDULE_MIGRATION}_FULFILLED`:\n      return state\n        .set('isSchedulingMigration', false)\n        .set('isRejectedSchedulingMigration', false)\n        .set('errorSchedulingMigration', null)\n        .set('scheduleMigrationModal', false);\n    case `${V2V_SCHEDULE_MIGRATION}_REJECTED`:\n      return state\n        .set('isSchedulingMigration', false)\n        .set('isRejectedSchedulingMigration', true)\n        .set('errorSchedulingMigration', action.payload)\n        .set('scheduleMigrationModal', false);\n\n    case V2V_AUTO_SET_MIGRATIONS_FILTER:\n      return state.set('initialMigrationsFilterSet', true);\n\n    case `${V2V_EDIT_PLAN_REQUEST}_PENDING`:\n      return state\n        .set('isEditingPlanRequest', true)\n        .set('isRejectedEditingPlanRequest', false)\n        .set('errorEditingPlanRequest', null);\n    case `${V2V_EDIT_PLAN_REQUEST}_FULFILLED`:\n      return state\n        .set('isEditingPlanRequest', false)\n        .set('isRejectedEditingPlanRequest', false)\n        .set('errorEditingPlanRequest', null);\n    case `${V2V_EDIT_PLAN_REQUEST}_REJECTED`:\n      return state\n        .set('isEditingPlanRequest', false)\n        .set('isRejectedEditingPlanRequest', true)\n        .set('errorEditingPlanRequest', action.payload);\n\n    case `${V2V_CANCEL_PLAN_REQUEST}_PENDING`:\n      return state\n        .set('isCancellingPlanRequest', true)\n        .set('isRejectedCancelPlanRequest', false)\n        .set('requestsProcessingCancellation', [...state.requestsProcessingCancellation, action.payload]);\n    case `${V2V_CANCEL_PLAN_REQUEST}_FULFILLED`: {\n      return state\n        .set('isCancellingPlanRequest', false)\n        .set('isRejectedCancelPlanRequest', false)\n        .set('errorCancelPlanRequest', null);\n    }\n    case `${V2V_CANCEL_PLAN_REQUEST}_REJECTED`:\n      return state\n        .set(\n          'requestsProcessingCancellation',\n          state.requestsProcessingCancellation.filter(url => action.meta.url !== url)\n        )\n        .set('isCancellingPlanRequest', false)\n        .set('isRejectedCancelPlanRequest', true)\n        .set('errorCancelPlanRequest', action.payload);\n\n    case `${FETCH_V2V_CLOUD_TENANTS}_PENDING`:\n      return state.set('isFetchingCloudTenants', true).set('isRejectedCloudTenants', false);\n    case `${FETCH_V2V_CLOUD_TENANTS}_FULFILLED`:\n      return state\n        .set('cloudTenants', action.payload.data.resources)\n        .set('isFetchingCloudTenants', false)\n        .set('isRejectedCloudTenants', false)\n        .set('errorCloudTenanta', null);\n    case `${FETCH_V2V_CLOUD_TENANTS}_REJECTED`:\n      return state\n        .set('errorCloudTenants', action.payload)\n        .set('isRejectedCloudTenants', true)\n        .set('isFetchingCloudTenants', false);\n\n    default:\n      return state;\n  }\n};\n","import Immutable from 'seamless-immutable';\nimport {\n  V2V_EDIT_PLAN_TITLE_SHOW_ALERT,\n  V2V_EDIT_PLAN_TITLE_HIDE_ALERT,\n  V2V_POST_EDIT_PLAN_NAME\n} from './EditPlanNameConstants';\n\nconst initialState = Immutable({\n  alertText: '',\n  savingPlan: false,\n  savingPlanRejected: false,\n  savingPlanError: null\n});\n\nexport default (state = initialState, action) => {\n  switch (action.type) {\n    case V2V_EDIT_PLAN_TITLE_SHOW_ALERT:\n      return Immutable.merge(state, action.payload);\n    case V2V_EDIT_PLAN_TITLE_HIDE_ALERT:\n      return state.set('alertText', '');\n    case `${V2V_POST_EDIT_PLAN_NAME}_PENDING`:\n      return state\n        .set('savingPlan', true)\n        .set('savingPlanRejected', false)\n        .set('savingPlanError', null);\n    case `${V2V_POST_EDIT_PLAN_NAME}_FULFILLED`:\n      return state\n        .set('savingPlan', false)\n        .set('savingPlanRejected', false)\n        .set('savingPlanError', null);\n    case `${V2V_POST_EDIT_PLAN_NAME}_REJECTED`:\n      return state\n        .set('savingPlan', false)\n        .set('savingPlanRejected', true)\n        .set('savingPlanError', action.payload);\n    default:\n      return state;\n  }\n};\n","import { V2V_POST_EDIT_PLAN_NAME } from './EditPlanNameConstants';\nimport API from '../../../../../../common/API';\n\nexport { fetchTransformationPlansAction } from '../../OverviewActions';\n\nconst _editMigrationPlansActionCreator = (url, planId, migrationPlans) => dispatch => {\n  const body = {\n    action: 'edit',\n    resource: { ...migrationPlans }\n  };\n  return dispatch({\n    type: V2V_POST_EDIT_PLAN_NAME,\n    payload: API.post(`${url}/${planId}`, body)\n  });\n};\n\nexport const editMigrationPlansAction = (url, planId, migrationPlans) =>\n  _editMigrationPlansActionCreator(url, planId, migrationPlans);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Field, reduxForm } from 'redux-form';\nimport { required } from 'redux-form-validators';\nimport { Modal, Button, Form, Spinner, noop } from 'patternfly-react';\nimport { FormField } from '../../../common/forms/FormField';\nimport { validation } from '../../../../../../common/constants';\nimport { asyncValidate, onChange } from '../../screens/PlanWizard/components/PlanWizardGeneralStep/helpers';\n\nclass EditPlanNameModal extends React.Component {\n  onSubmit = () => {\n    const {\n      editPlanNameModal,\n      editingPlan,\n      editMigrationPlansAction,\n      editMigrationPlansUrl,\n      hideEditPlanNameModalAction,\n      fetchTransformationPlansAction,\n      fetchTransformationPlansUrl,\n      fetchArchivedTransformationPlansUrl\n    } = this.props;\n    const {\n      values: { name, description }\n    } = editPlanNameModal;\n    const resource = { name, description };\n    editMigrationPlansAction(editMigrationPlansUrl, editingPlan.id, resource).then(() => {\n      hideEditPlanNameModalAction();\n      fetchTransformationPlansAction({\n        url: fetchTransformationPlansUrl,\n        archived: false\n      });\n      fetchTransformationPlansAction({\n        url: fetchArchivedTransformationPlansUrl,\n        archived: true\n      });\n    });\n  };\n\n  render() {\n    const { editPlanNameModalVisible, hideEditPlanNameModalAction, editPlanNameModal, savingPlan } = this.props;\n\n    const disableConfirmButton = savingPlan || !!editPlanNameModal.syncErrors || !!editPlanNameModal.asyncErrors;\n\n    const formBody = (\n      <Form horizontal>\n        <Field\n          name=\"name\"\n          label={__('Name')}\n          required\n          component={FormField}\n          type=\"text\"\n          help={validation.name.help}\n          maxLength={validation.name.maxLength}\n          maxLengthWarning={validation.name.maxLengthWarning}\n          validate={[\n            required({\n              msg: validation.name.requiredMessage\n            })\n          ]}\n        />\n        <Field\n          name=\"description\"\n          label={__('Description')}\n          component={FormField}\n          type=\"textarea\"\n          help={validation.description.help}\n          maxLength={validation.description.maxLength}\n          maxLengthWarning={validation.description.maxLengthWarning}\n        />\n      </Form>\n    );\n\n    const spinner = (\n      <div style={{ marginTop: 15 }}>\n        <Spinner loading size=\"lg\" />\n        <h2 style={{ textAlign: 'center' }}>{__('Saving...')}</h2>\n      </div>\n    );\n\n    return (\n      <Modal show={editPlanNameModalVisible} onHide={hideEditPlanNameModalAction} backdrop=\"static\">\n        <Modal.Header>\n          <Modal.CloseButton onClick={hideEditPlanNameModalAction} />\n          <Modal.Title>{__('Edit Migration Plan')}</Modal.Title>\n        </Modal.Header>\n        <Modal.Body>{!savingPlan ? formBody : spinner}</Modal.Body>\n        <Modal.Footer>\n          <Button bsStyle=\"default\" className=\"btn-cancel\" onClick={hideEditPlanNameModalAction}>\n            {__('Cancel')}\n          </Button>\n          <Button bsStyle=\"primary\" onClick={this.onSubmit} disabled={disableConfirmButton}>\n            {__('Save')}\n          </Button>\n        </Modal.Footer>\n      </Modal>\n    );\n  }\n}\n\nEditPlanNameModal.propTypes = {\n  editPlanNameModalVisible: PropTypes.bool,\n  hideEditPlanNameModalAction: PropTypes.func,\n  editPlanNameModal: PropTypes.object,\n  editingPlan: PropTypes.object,\n  editMigrationPlansAction: PropTypes.func,\n  editMigrationPlansUrl: PropTypes.string,\n  savingPlan: PropTypes.bool.isRequired,\n  fetchTransformationPlansAction: PropTypes.func,\n  fetchTransformationPlansUrl: PropTypes.string,\n  fetchArchivedTransformationPlansUrl: PropTypes.string\n};\n\nEditPlanNameModal.defaultProps = {\n  editPlanNameModalVisible: false,\n  hideEditPlanNameModalAction: noop,\n  editPlanNameModal: {},\n  editMigrationPlansUrl: '/api/service_templates'\n};\n\nexport default reduxForm({\n  form: 'editPlanNameModal',\n  asyncValidate,\n  asyncBlurFields: ['name'],\n  onChange\n})(EditPlanNameModal);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { noop, Button, ListView, Grid, Spinner, Icon, Toolbar, DropdownKebab, MenuItem } from 'patternfly-react';\nimport { IsoElapsedTime } from '../../../../../../components/dates/IsoElapsedTime';\nimport ShowWizardEmptyState from '../../../common/ShowWizardEmptyState/ShowWizardEmptyState';\nimport getMostRecentRequest from '../../../common/getMostRecentRequest';\nimport getMostRecentVMTasksFromRequests from './helpers/getMostRecentVMTasksFromRequests';\nimport ListViewToolbar from '../../../common/ListViewToolbar/ListViewToolbar';\nimport {\n  MIGRATIONS_COMPLETED_SORT_FIELDS,\n  MIGRATIONS_FILTER_TYPES,\n  MIGRATIONS_ARCHIVED_SORT_FIELDS\n} from './MigrationsConstants';\nimport ScheduleMigrationButtons from './ScheduleMigrationButtons';\nimport ScheduleMigrationModal from '../ScheduleMigrationModal/ScheduleMigrationModal';\nimport { formatDateTime } from '../../../../../../components/dates/MomentDate';\nimport DeleteMigrationMenuItem from './DeleteMigrationMenuItem';\nimport StopPropagationOnClick from '../../../common/StopPropagationOnClick';\nimport getPlanScheduleInfo from './helpers/getPlanScheduleInfo';\n\nconst MigrationsCompletedList = ({\n  finishedTransformationPlans,\n  allRequestsWithTasks,\n  retryClick,\n  loading,\n  redirectTo,\n  showConfirmModalAction,\n  hideConfirmModalAction,\n  archiveTransformationPlanAction,\n  archiveTransformationPlanUrl,\n  deleteTransformationPlanAction,\n  deleteTransformationPlanUrl,\n  fetchTransformationPlansAction,\n  fetchTransformationPlansUrl,\n  fetchArchivedTransformationPlansUrl,\n  addNotificationAction,\n  archived,\n  toggleScheduleMigrationModal,\n  scheduleMigrationModal,\n  scheduleMigrationPlan,\n  scheduleMigration,\n  fetchTransformationMappingsAction,\n  fetchTransformationMappingsUrl,\n  showEditPlanNameModalAction\n}) => (\n  <React.Fragment>\n    <Grid.Col xs={12}>\n      <Spinner loading={!!loading}>\n        {finishedTransformationPlans.length > 0 ? (\n          <ListViewToolbar\n            filterTypes={MIGRATIONS_FILTER_TYPES}\n            sortFields={!archived ? MIGRATIONS_COMPLETED_SORT_FIELDS : MIGRATIONS_ARCHIVED_SORT_FIELDS}\n            defaultSortTypeIndex={!archived ? 1 : 0}\n            listItems={finishedTransformationPlans}\n          >\n            {({\n              filteredSortedPaginatedListItems,\n              renderFilterControls,\n              renderSortControls,\n              renderActiveFilters,\n              renderPaginationRow\n            }) => (\n              <React.Fragment>\n                <Grid.Row>\n                  <Toolbar>\n                    {renderFilterControls()}\n                    {renderSortControls()}\n                    {renderActiveFilters(filteredSortedPaginatedListItems)}\n                  </Toolbar>\n                </Grid.Row>\n                <ListView className=\"plans-complete-list\" style={{ marginTop: 10 }}>\n                  {filteredSortedPaginatedListItems.items.map(plan => {\n                    const {\n                      migrationScheduled,\n                      staleMigrationSchedule,\n                      migrationStarting,\n                      showInitialScheduleButton\n                    } = getPlanScheduleInfo(plan);\n\n                    const requestsOfAssociatedPlan = allRequestsWithTasks.filter(\n                      request => request.source_id === plan.id\n                    );\n\n                    const mostRecentRequest =\n                      requestsOfAssociatedPlan.length > 0 && getMostRecentRequest(requestsOfAssociatedPlan);\n\n                    const failed = mostRecentRequest && mostRecentRequest.status === 'Error';\n                    const denied = mostRecentRequest && mostRecentRequest.status === 'Denied';\n\n                    const tasks = {};\n                    let tasksOfPlan = {};\n                    if (requestsOfAssociatedPlan.length > 0) {\n                      tasksOfPlan = getMostRecentVMTasksFromRequests(\n                        requestsOfAssociatedPlan,\n                        plan.options.config_info.actions\n                      );\n                      tasksOfPlan.forEach(task => {\n                        tasks[task.source_id] = task.status === 'Ok';\n                      });\n                    } else if (mostRecentRequest) {\n                      mostRecentRequest.miq_request_tasks.forEach(task => {\n                        tasks[task.source_id] = task.status === 'Ok';\n                      });\n                    }\n                    let succeedCount = 0;\n                    Object.keys(tasks).forEach(key => {\n                      if (tasks[key]) succeedCount += 1;\n                    });\n\n                    const elapsedTime = IsoElapsedTime(\n                      new Date(mostRecentRequest && mostRecentRequest.options.delivered_on),\n                      new Date(mostRecentRequest && mostRecentRequest.fulfilled_on)\n                    );\n\n                    const archiveMigrationWarningText = (\n                      <React.Fragment>\n                        <p>\n                          {__('Are you sure you want to archive migration plan ')}\n                          <strong>{plan.name}</strong>?\n                        </p>\n                        {failed && (\n                          <p>\n                            {__('This plan includes VMs that failed to migrate. If you archive the plan, you will not be able to retry the failed migrations.') // prettier-ignore\n                            }\n                          </p>\n                        )}\n                      </React.Fragment>\n                    );\n\n                    const confirmModalBaseProps = {\n                      title: __('Archive Migration Plan'),\n                      body: archiveMigrationWarningText,\n                      icon: failed && <Icon className=\"confirm-warning-icon\" type=\"pf\" name=\"warning-triangle-o\" />,\n                      confirmButtonLabel: __('Archive')\n                    };\n\n                    const onConfirm = () => {\n                      showConfirmModalAction({\n                        ...confirmModalBaseProps,\n                        disableCancelButton: true,\n                        disableConfirmButton: true\n                      });\n                      archiveTransformationPlanAction(archiveTransformationPlanUrl, plan.id)\n                        .then(() => {\n                          addNotificationAction({\n                            message: sprintf(__('%s successfully archived'), plan.name),\n                            notificationType: 'success'\n                          });\n                          const fetchArchived = fetchTransformationPlansAction({\n                            url: fetchArchivedTransformationPlansUrl,\n                            archived: true\n                          });\n                          const fetchNonArchived = fetchTransformationPlansAction({\n                            url: fetchTransformationPlansUrl,\n                            archived: false\n                          });\n                          return Promise.all([fetchArchived, fetchNonArchived]);\n                        })\n                        .then(() => {\n                          hideConfirmModalAction();\n                        });\n                    };\n\n                    const confirmModalOptions = {\n                      ...confirmModalBaseProps,\n                      onConfirm\n                    };\n\n                    const isMissingMapping = !plan.infraMappingName;\n\n                    const scheduleButtons = (\n                      <ScheduleMigrationButtons\n                        showConfirmModalAction={showConfirmModalAction}\n                        hideConfirmModalAction={hideConfirmModalAction}\n                        loading={loading}\n                        toggleScheduleMigrationModal={toggleScheduleMigrationModal}\n                        scheduleMigration={scheduleMigration}\n                        fetchTransformationPlansAction={fetchTransformationPlansAction}\n                        fetchTransformationPlansUrl={fetchTransformationPlansUrl}\n                        plan={plan}\n                        isMissingMapping={isMissingMapping}\n                        migrationScheduled={migrationScheduled}\n                        migrationStarting={migrationStarting}\n                        showInitialScheduleButton={showInitialScheduleButton}\n                      />\n                    );\n\n                    return (\n                      <ListView.Item\n                        stacked\n                        className=\"plans-complete-list__list-item\"\n                        onClick={e => {\n                          e.stopPropagation();\n\n                          redirectTo(`/plan/${plan.id}`);\n                        }}\n                        key={plan.id}\n                        leftContent={\n                          archived ? (\n                            <ListView.Icon\n                              type=\"fa\"\n                              name=\"archive\"\n                              size=\"md\"\n                              style={{\n                                width: 'inherit',\n                                backgroundColor: 'transparent',\n                                border: 'none'\n                              }}\n                            />\n                          ) : (\n                            <ListView.Icon\n                              type=\"pf\"\n                              name={failed || denied ? 'error-circle-o' : 'ok'}\n                              size=\"md\"\n                              style={{\n                                width: 'inherit',\n                                backgroundColor: 'transparent'\n                              }}\n                            />\n                          )\n                        }\n                        heading={plan.name}\n                        description={plan.description}\n                        additionalInfo={[\n                          <ListView.InfoItem key={`${plan.id}-migrated`} style={{ paddingRight: 40 }}>\n                            <ListView.Icon type=\"pf\" size=\"lg\" name=\"screen\" />\n                            &nbsp;\n                            <strong>{succeedCount}</strong> {__('of')} &nbsp;\n                            <strong>{Object.keys(tasks).length} </strong>\n                            {__('VMs successfully migrated.')}\n                          </ListView.InfoItem>,\n                          isMissingMapping && (\n                            <ListView.InfoItem key={`${plan.id}-infraMappingWarning`}>\n                              <Icon type=\"pf\" name=\"warning-triangle-o\" /> {__('Infrastucture mapping does not exist.')}\n                            </ListView.InfoItem>\n                          ),\n                          !isMissingMapping && (\n                            <ListView.InfoItem key={`${plan.id}-infraMappingName`}>\n                              <a href=\"/migration#/mappings\">{plan.infraMappingName}</a>\n                            </ListView.InfoItem>\n                          ),\n                          !denied ? (\n                            <ListView.InfoItem key={`${plan.id}-elapsed`}>\n                              <ListView.Icon type=\"fa\" size=\"lg\" name=\"clock-o\" />\n                              {elapsedTime}\n                            </ListView.InfoItem>\n                          ) : null,\n                          migrationScheduled && !staleMigrationSchedule && !migrationStarting ? (\n                            <ListView.InfoItem key={`${plan.id}-scheduledTime`} style={{ textAlign: 'left' }}>\n                              <Icon type=\"fa\" name=\"clock-o\" />\n                              {__('Migration scheduled')}\n                              <br />\n                              {formatDateTime(migrationScheduled)}\n                            </ListView.InfoItem>\n                          ) : null,\n                          migrationStarting && (\n                            <ListView.InfoItem key={`${plan.id}-starting`} style={{ textAlign: 'left' }}>\n                              {__('Migration in progress')}\n                            </ListView.InfoItem>\n                          )\n                        ]}\n                        actions={\n                          <div>\n                            {!archived &&\n                              (failed || denied) && (\n                                <React.Fragment>\n                                  {showInitialScheduleButton && scheduleButtons}\n                                  <Button\n                                    onClick={e => {\n                                      e.stopPropagation();\n                                      retryClick(plan.href, plan.id);\n                                    }}\n                                    disabled={isMissingMapping || loading === plan.href || migrationStarting}\n                                  >\n                                    {__('Retry')}\n                                  </Button>\n                                </React.Fragment>\n                              )}\n                            <StopPropagationOnClick>\n                              <DropdownKebab id={`${plan.id}-kebab`} pullRight>\n                                {!archived && (\n                                  <MenuItem\n                                    onClick={e => {\n                                      e.stopPropagation();\n                                      showConfirmModalAction(confirmModalOptions);\n                                    }}\n                                  >\n                                    {__('Archive plan')}\n                                  </MenuItem>\n                                )}\n                                <MenuItem\n                                  onClick={e => {\n                                    e.stopPropagation();\n                                    showEditPlanNameModalAction(plan.id);\n                                  }}\n                                >\n                                  {__('Edit plan')}\n                                </MenuItem>\n                                <DeleteMigrationMenuItem\n                                  showConfirmModalAction={showConfirmModalAction}\n                                  hideConfirmModalAction={hideConfirmModalAction}\n                                  deleteTransformationPlanAction={deleteTransformationPlanAction}\n                                  deleteTransformationPlanUrl={deleteTransformationPlanUrl}\n                                  addNotificationAction={addNotificationAction}\n                                  fetchTransformationPlansAction={fetchTransformationPlansAction}\n                                  fetchTransformationPlansUrl={fetchTransformationPlansUrl}\n                                  fetchArchivedTransformationPlansUrl={fetchArchivedTransformationPlansUrl}\n                                  planId={plan.id}\n                                  planName={plan.name}\n                                  archived={archived}\n                                  fetchTransformationMappingsAction={fetchTransformationMappingsAction}\n                                  fetchTransformationMappingsUrl={fetchTransformationMappingsUrl}\n                                />\n                                {!showInitialScheduleButton && scheduleButtons}\n                              </DropdownKebab>\n                            </StopPropagationOnClick>\n                          </div>\n                        }\n                      />\n                    );\n                  })}\n                </ListView>\n                {renderPaginationRow(filteredSortedPaginatedListItems)}\n              </React.Fragment>\n            )}\n          </ListViewToolbar>\n        ) : (\n          <ShowWizardEmptyState\n            title={archived ? __('No Archived Migration Plans') : __('No Completed Migration Plans')}\n            iconType=\"pf\"\n            iconName=\"info\"\n            description={\n              <span>\n                {archived\n                  ? __('There are no exisitng migration plans in an Archived state.')\n                  : __('There are no existing migration plans in a Completed state.')}\n              </span>\n            }\n          />\n        )}\n      </Spinner>\n    </Grid.Col>\n    <ScheduleMigrationModal\n      toggleScheduleMigrationModal={toggleScheduleMigrationModal}\n      scheduleMigrationModal={scheduleMigrationModal}\n      scheduleMigrationPlan={scheduleMigrationPlan}\n      scheduleMigration={scheduleMigration}\n      fetchTransformationPlansAction={fetchTransformationPlansAction}\n      fetchTransformationPlansUrl={fetchTransformationPlansUrl}\n    />\n  </React.Fragment>\n);\n\nMigrationsCompletedList.propTypes = {\n  finishedTransformationPlans: PropTypes.array,\n  allRequestsWithTasks: PropTypes.array,\n  retryClick: PropTypes.func,\n  loading: PropTypes.string,\n  redirectTo: PropTypes.func,\n  showConfirmModalAction: PropTypes.func,\n  hideConfirmModalAction: PropTypes.func,\n  archived: PropTypes.bool,\n  archiveTransformationPlanAction: PropTypes.func,\n  archiveTransformationPlanUrl: PropTypes.string,\n  deleteTransformationPlanAction: PropTypes.func,\n  deleteTransformationPlanUrl: PropTypes.string,\n  fetchTransformationPlansAction: PropTypes.func,\n  fetchTransformationPlansUrl: PropTypes.string,\n  fetchArchivedTransformationPlansUrl: PropTypes.string,\n  addNotificationAction: PropTypes.func,\n  toggleScheduleMigrationModal: PropTypes.func,\n  scheduleMigrationModal: PropTypes.bool,\n  scheduleMigrationPlan: PropTypes.object,\n  scheduleMigration: PropTypes.func,\n  fetchTransformationMappingsAction: PropTypes.func,\n  fetchTransformationMappingsUrl: PropTypes.string,\n  showEditPlanNameModalAction: PropTypes.func\n};\nMigrationsCompletedList.defaultProps = {\n  finishedTransformationPlans: [],\n  retryClick: noop,\n  loading: ''\n};\n\nexport default MigrationsCompletedList;\n","/**\n * Client Side Pagination helper which returns amountOfPages, itemCount,\n * itemsStart, itemsEnd, and paginated tasks\n */\nexport default function paginate(items, page, perPage) {\n  // adapt to zero indexed logic\n  const p = page - 1 || 0;\n  const amountOfPages = Math.ceil(items.length / perPage);\n  const startPage = p < amountOfPages ? p : 0;\n  const endOfPage = startPage * perPage + perPage;\n  return {\n    amountOfPages,\n    itemCount: items.length,\n    itemsStart: startPage * perPage + 1,\n    itemsEnd: endOfPage > items.length ? items.length : endOfPage,\n    items: items.slice(startPage * perPage, endOfPage)\n  };\n}\n","/**\n * Simple client side list filter for Plan Request Detail List\n *\n * currentSortType: { id: 'delivered_on', title: 'Started', isNumeric: true }\n *\n * tasks: [{\n *  message: 'Migrating',\n *  delivered_on: '2018-01-30T21:12:34.808Z'\n *  ...\n * }]\n */\nexport default function sortFilter(currentSortType, isSortNumeric, isSortAscending, items = []) {\n  const itemsCopy = [...items];\n  if (currentSortType && itemsCopy && itemsCopy.length) {\n    if (isSortNumeric) {\n      // handle numbers and dates\n      return itemsCopy.sort((a, b) => {\n        const x = a[currentSortType.id];\n        const y = b[currentSortType.id];\n        return isSortAscending ? x - y : y - x;\n      });\n    }\n\n    // for strings, use a simple natural sort algorithm\n    // http://snipplr.com/view/36012/javascript-natural-sort/\n\n    let a;\n    let b;\n    let a1;\n    let b1;\n    const rx = /(\\d+)|(\\D+)/g;\n    const rd = /\\d+/;\n\n    return itemsCopy.sort((as, bs) => {\n      a = String(as[currentSortType.id])\n        .toLowerCase()\n        .match(rx);\n      b = String(bs[currentSortType.id])\n        .toLowerCase()\n        .match(rx);\n      if (isSortAscending) {\n        while (a.length && b.length) {\n          a1 = a.shift();\n          b1 = b.shift();\n          if (rd.test(a1) || rd.test(b1)) {\n            if (!rd.test(a1)) return 1;\n            if (!rd.test(b1)) return -1;\n            if (a1 !== b1) return a1 - b1;\n          } else if (a1 !== b1) return a1 > b1 ? 1 : -1;\n        }\n\n        return a.length - b.length;\n      }\n      while (a.length && b.length) {\n        a1 = a.shift();\n        b1 = b.shift();\n        if (rd.test(a1) || rd.test(b1)) {\n          if (!rd.test(a1)) return -1;\n          if (!rd.test(b1)) return 1;\n          if (a1 !== b1) return b1 - a1;\n        } else if (a1 !== b1) return a1 > b1 ? -1 : 1;\n      }\n\n      return b.length - a.length;\n    });\n  }\n  return itemsCopy;\n}\n","/**\n * Simple client side list filter for Plan Request Detail List\n *\n * activeFilters: {\n *  label: 'Host Name: {value}',\n *  field: {id: \"transformation_host_name\", title: \"Host Name\", placeholder: \"Filter by Host Name\", filterType: \"text\"},\n *  value: '{value}'\n * }\n *\n * tasks: [{\n *  transformation_host_name: 'rhvh01.example.com',\n *  message: 'Migrating',\n *  ...\n * }]\n */\nexport default function listFilter(activeFilters, tasks) {\n  if (activeFilters && activeFilters.length && tasks && tasks.length) {\n    const filteredTasks = [];\n    tasks.forEach(task => {\n      const match = activeFilters.every(filter => `${task[filter.field.id] || ''}`.indexOf(filter.value) > -1);\n      if (match) {\n        filteredTasks.push(task);\n      }\n    });\n    return filteredTasks;\n  }\n  return tasks;\n}\n","import React from 'react';\nimport { Icon } from 'patternfly-react';\nimport PropTypes from 'prop-types';\n\nclass ScheduleMigrationModalBody extends React.Component {\n  componentDidMount() {\n    const { handleChange, defaultDate } = this.props;\n    const datetimeSelector = $('#dateTimePicker');\n\n    const minDate = new Date(Date.now() + 120000);\n    const validDefaultDate = defaultDate && new Date(defaultDate) > minDate ? new Date(defaultDate) : false;\n\n    datetimeSelector.datetimepicker({\n      defaultDate: validDefaultDate,\n      useCurrent: !validDefaultDate,\n      allowInputToggle: true,\n      showTodayButton: true,\n      minDate,\n      toolbarPlacement: 'bottom',\n      sideBySide: true,\n      icons: {\n        today: 'today-button-pf'\n      }\n    });\n\n    datetimeSelector.on('dp.change', e => {\n      handleChange(e.date._d);\n    });\n\n    const picker = datetimeSelector.data('DateTimePicker');\n    handleChange(picker.date().toDate());\n  }\n  render() {\n    return (\n      <div className=\"row\">\n        <div className=\"col-xs-12\">\n          <div className=\"form-group\">\n            <div id=\"dateTimePicker\" className=\"input-group date-time-picker-pf\">\n              <input id=\"dateTimeInput\" type=\"text\" className=\"form-control\" />\n              <span className=\"input-group-addon\">\n                <Icon type=\"fa\" name=\"calendar\" />\n              </span>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nScheduleMigrationModalBody.propTypes = {\n  handleChange: PropTypes.func,\n  defaultDate: PropTypes.string\n};\n\nexport default ScheduleMigrationModalBody;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { noop, Button, ListView, Grid, Icon, Spinner, Toolbar, DropdownKebab, MenuItem } from 'patternfly-react';\nimport EllipsisWithTooltip from 'react-ellipsis-with-tooltip';\nimport ShowWizardEmptyState from '../../../common/ShowWizardEmptyState/ShowWizardEmptyState';\nimport ScheduleMigrationModal from '../ScheduleMigrationModal/ScheduleMigrationModal';\nimport { formatDateTime } from '../../../../../../components/dates/MomentDate';\nimport { MIGRATIONS_NOT_STARTED_SORT_FIELDS, MIGRATIONS_FILTER_TYPES } from './MigrationsConstants';\nimport ScheduleMigrationButtons from './ScheduleMigrationButtons';\nimport StopPropagationOnClick from '../../../common/StopPropagationOnClick';\nimport ListViewToolbar from '../../../common/ListViewToolbar/ListViewToolbar';\nimport DeleteMigrationMenuItem from './DeleteMigrationMenuItem';\nimport getPlanScheduleInfo from './helpers/getPlanScheduleInfo';\n\nconst MigrationsNotStartedList = ({\n  migrateClick,\n  notStartedPlans,\n  loading,\n  redirectTo,\n  showConfirmModalAction,\n  hideConfirmModalAction,\n  addNotificationAction,\n  toggleScheduleMigrationModal,\n  scheduleMigrationModal,\n  scheduleMigrationPlan,\n  scheduleMigration,\n  fetchTransformationPlansAction,\n  fetchTransformationPlansUrl,\n  deleteTransformationPlanAction,\n  deleteTransformationPlanUrl,\n  showPlanWizardEditModeAction,\n  fetchTransformationMappingsAction,\n  fetchTransformationMappingsUrl\n}) => (\n  <React.Fragment>\n    <Grid.Col xs={12}>\n      <Spinner loading={!!loading}>\n        {notStartedPlans.length > 0 ? (\n          <ListViewToolbar\n            filterTypes={MIGRATIONS_FILTER_TYPES}\n            sortFields={MIGRATIONS_NOT_STARTED_SORT_FIELDS}\n            listItems={notStartedPlans}\n          >\n            {({\n              filteredSortedPaginatedListItems,\n              renderFilterControls,\n              renderSortControls,\n              renderActiveFilters,\n              renderPaginationRow\n            }) => (\n              <React.Fragment>\n                <Grid.Row>\n                  <Toolbar>\n                    {renderFilterControls()}\n                    {renderSortControls()}\n                    {renderActiveFilters(filteredSortedPaginatedListItems)}\n                  </Toolbar>\n                </Grid.Row>\n                <ListView className=\"plans-not-started-list\" style={{ marginTop: 10 }}>\n                  {filteredSortedPaginatedListItems.items.map(plan => {\n                    const { migrationScheduled, migrationStarting, showInitialScheduleButton } = getPlanScheduleInfo(\n                      plan\n                    );\n                    const isMissingMapping = !plan.infraMappingName;\n\n                    const scheduleButtons = (\n                      <ScheduleMigrationButtons\n                        showConfirmModalAction={showConfirmModalAction}\n                        hideConfirmModalAction={hideConfirmModalAction}\n                        loading={loading}\n                        toggleScheduleMigrationModal={toggleScheduleMigrationModal}\n                        scheduleMigration={scheduleMigration}\n                        fetchTransformationPlansAction={fetchTransformationPlansAction}\n                        fetchTransformationPlansUrl={fetchTransformationPlansUrl}\n                        plan={plan}\n                        isMissingMapping={isMissingMapping}\n                        migrationScheduled={migrationScheduled}\n                        migrationStarting={migrationStarting}\n                        showInitialScheduleButton={showInitialScheduleButton}\n                      />\n                    );\n\n                    const editPlanDisabled = loading === plan.href;\n\n                    return (\n                      <ListView.Item\n                        stacked\n                        className=\"plans-not-started-list__list-item\"\n                        onClick={() => {\n                          redirectTo(`/plan/${plan.id}`);\n                        }}\n                        actions={\n                          <div>\n                            {showInitialScheduleButton && scheduleButtons}\n                            <Button\n                              id={`migrate_${plan.id}`}\n                              onClick={e => {\n                                e.stopPropagation();\n                                migrateClick(plan.href);\n                              }}\n                              disabled={\n                                isMissingMapping || loading === plan.href || plan.schedule_type || migrationStarting\n                              }\n                            >\n                              {__('Migrate')}\n                            </Button>\n                            <StopPropagationOnClick>\n                              <DropdownKebab id={`${plan.id}-kebab`} pullRight>\n                                <MenuItem\n                                  onClick={e => {\n                                    e.stopPropagation();\n                                    if (!editPlanDisabled) showPlanWizardEditModeAction(plan.id);\n                                  }}\n                                  disabled={editPlanDisabled}\n                                >\n                                  {__('Edit plan')}\n                                </MenuItem>\n                                <DeleteMigrationMenuItem\n                                  showConfirmModalAction={showConfirmModalAction}\n                                  hideConfirmModalAction={hideConfirmModalAction}\n                                  deleteTransformationPlanAction={deleteTransformationPlanAction}\n                                  deleteTransformationPlanUrl={deleteTransformationPlanUrl}\n                                  addNotificationAction={addNotificationAction}\n                                  fetchTransformationPlansAction={fetchTransformationPlansAction}\n                                  fetchTransformationPlansUrl={fetchTransformationPlansUrl}\n                                  planId={plan.id}\n                                  planName={plan.name}\n                                  fetchTransformationMappingsAction={fetchTransformationMappingsAction}\n                                  fetchTransformationMappingsUrl={fetchTransformationMappingsUrl}\n                                />\n                                {!showInitialScheduleButton && scheduleButtons}\n                              </DropdownKebab>\n                            </StopPropagationOnClick>\n                          </div>\n                        }\n                        leftContent={<div />}\n                        heading={plan.name}\n                        description={\n                          <EllipsisWithTooltip id={plan.description}>\n                            <React.Fragment>{plan.description}</React.Fragment>\n                          </EllipsisWithTooltip>\n                        }\n                        additionalInfo={[\n                          <ListView.InfoItem key={plan.id}>\n                            <Icon type=\"pf\" name=\"virtual-machine\" />\n                            <strong>{plan.options.config_info.actions.length}</strong> {__('VMs')}\n                          </ListView.InfoItem>,\n                          isMissingMapping && (\n                            <ListView.InfoItem key={`${plan.id}-infraMappingWarning`}>\n                              <Icon type=\"pf\" name=\"warning-triangle-o\" /> {__('Infrastucture mapping does not exist.')}\n                            </ListView.InfoItem>\n                          ),\n                          !isMissingMapping && (\n                            <ListView.InfoItem key={`${plan.id}-infraMappingName`}>\n                              <a href=\"/migration#/mappings\">{plan.infraMappingName}</a>\n                            </ListView.InfoItem>\n                          ),\n                          migrationScheduled && !migrationStarting ? (\n                            <ListView.InfoItem key={`${plan.id}-scheduledTime`} style={{ textAlign: 'left' }}>\n                              <Icon type=\"fa\" name=\"clock-o\" />\n                              {__('Migration scheduled')}\n                              <br />\n                              {formatDateTime(migrationScheduled)}\n                            </ListView.InfoItem>\n                          ) : null,\n                          migrationStarting && (\n                            <ListView.InfoItem key={`${plan.id}-starting`} style={{ textAlign: 'left' }}>\n                              {__('Migration in progress')}\n                            </ListView.InfoItem>\n                          )\n                        ]}\n                        key={plan.id}\n                      />\n                    );\n                  })}\n                </ListView>\n                {renderPaginationRow(filteredSortedPaginatedListItems)}\n              </React.Fragment>\n            )}\n          </ListViewToolbar>\n        ) : (\n          <ShowWizardEmptyState\n            title={__('No Migration Plans Not Started')}\n            iconType=\"pf\"\n            iconName=\"info\"\n            description={<span>{__('There are no existing migration plans in a Not Started state.')}</span>}\n          />\n        )}\n      </Spinner>\n    </Grid.Col>\n    <ScheduleMigrationModal\n      toggleScheduleMigrationModal={toggleScheduleMigrationModal}\n      scheduleMigrationModal={scheduleMigrationModal}\n      scheduleMigrationPlan={scheduleMigrationPlan}\n      scheduleMigration={scheduleMigration}\n      fetchTransformationPlansAction={fetchTransformationPlansAction}\n      fetchTransformationPlansUrl={fetchTransformationPlansUrl}\n    />\n  </React.Fragment>\n);\n\nMigrationsNotStartedList.propTypes = {\n  migrateClick: PropTypes.func,\n  showConfirmModalAction: PropTypes.func,\n  hideConfirmModalAction: PropTypes.func,\n  addNotificationAction: PropTypes.func,\n  notStartedPlans: PropTypes.array,\n  loading: PropTypes.string,\n  redirectTo: PropTypes.func,\n  toggleScheduleMigrationModal: PropTypes.func,\n  scheduleMigrationModal: PropTypes.bool,\n  scheduleMigrationPlan: PropTypes.object,\n  scheduleMigration: PropTypes.func,\n  fetchTransformationPlansAction: PropTypes.func,\n  fetchTransformationPlansUrl: PropTypes.string,\n  deleteTransformationPlanAction: PropTypes.func,\n  deleteTransformationPlanUrl: PropTypes.string,\n  showPlanWizardEditModeAction: PropTypes.func,\n  fetchTransformationMappingsAction: PropTypes.func,\n  fetchTransformationMappingsUrl: PropTypes.string\n};\nMigrationsNotStartedList.defaultProps = {\n  migrateClick: noop,\n  notStartedPlans: [],\n  loading: ''\n};\n\nexport default MigrationsNotStartedList;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Card, Button } from 'patternfly-react';\n\nconst CardFooter = ({ onButtonClick, disabled, buttonText }) => (\n  <Card.Footer style={{ position: 'relative', top: '-2px' }}>\n    <Button style={{ position: 'relative', top: '-5px' }} onClick={onButtonClick} disabled={disabled}>\n      {buttonText}\n    </Button>\n  </Card.Footer>\n);\n\nCardFooter.propTypes = {\n  onButtonClick: PropTypes.func,\n  disabled: PropTypes.bool,\n  buttonText: PropTypes.string\n};\n\nexport default CardFooter;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { EmptyState, Spinner } from 'patternfly-react';\n\nconst CardEmptyState = ({ iconType, iconName, emptyStateInfo, emptyStateInfoStyles, showSpinner, spinnerStyles }) => (\n  <EmptyState>\n    {showSpinner && <Spinner loading size=\"lg\" style={spinnerStyles} />}\n    {iconType && iconName && <EmptyState.Icon type={iconType} name={iconName} />}\n    {emptyStateInfo && <EmptyState.Info style={emptyStateInfoStyles}>{emptyStateInfo}</EmptyState.Info>}\n  </EmptyState>\n);\n\nCardEmptyState.propTypes = {\n  emptyStateInfo: PropTypes.node,\n  emptyStateInfoStyles: PropTypes.object,\n  iconName: PropTypes.string,\n  iconType: PropTypes.string,\n  showSpinner: PropTypes.bool,\n  spinnerStyles: PropTypes.object\n};\n\nexport default CardEmptyState;\n","const getPlaybookName = (serviceTemplatePlaybooks, job_id) => {\n  const defaultPlaybookName = __('Unknown');\n  if (job_id) {\n    const playbookTemplate = serviceTemplatePlaybooks.find(p => p.id === job_id);\n    if (playbookTemplate) {\n      return playbookTemplate.name;\n    }\n  }\n  return defaultPlaybookName;\n};\nexport default getPlaybookName;\n","var map = {\n\t\"./af\": 1022,\n\t\"./af.js\": 1022,\n\t\"./ar\": 1021,\n\t\"./ar-dz\": 1020,\n\t\"./ar-dz.js\": 1020,\n\t\"./ar-kw\": 1019,\n\t\"./ar-kw.js\": 1019,\n\t\"./ar-ly\": 1018,\n\t\"./ar-ly.js\": 1018,\n\t\"./ar-ma\": 1017,\n\t\"./ar-ma.js\": 1017,\n\t\"./ar-sa\": 1016,\n\t\"./ar-sa.js\": 1016,\n\t\"./ar-tn\": 1015,\n\t\"./ar-tn.js\": 1015,\n\t\"./ar.js\": 1021,\n\t\"./az\": 1014,\n\t\"./az.js\": 1014,\n\t\"./be\": 1013,\n\t\"./be.js\": 1013,\n\t\"./bg\": 1012,\n\t\"./bg.js\": 1012,\n\t\"./bm\": 1011,\n\t\"./bm.js\": 1011,\n\t\"./bn\": 1010,\n\t\"./bn.js\": 1010,\n\t\"./bo\": 1009,\n\t\"./bo.js\": 1009,\n\t\"./br\": 1008,\n\t\"./br.js\": 1008,\n\t\"./bs\": 1007,\n\t\"./bs.js\": 1007,\n\t\"./ca\": 1006,\n\t\"./ca.js\": 1006,\n\t\"./cs\": 1005,\n\t\"./cs.js\": 1005,\n\t\"./cv\": 1004,\n\t\"./cv.js\": 1004,\n\t\"./cy\": 1003,\n\t\"./cy.js\": 1003,\n\t\"./da\": 1002,\n\t\"./da.js\": 1002,\n\t\"./de\": 1001,\n\t\"./de-at\": 1000,\n\t\"./de-at.js\": 1000,\n\t\"./de-ch\": 999,\n\t\"./de-ch.js\": 999,\n\t\"./de.js\": 1001,\n\t\"./dv\": 998,\n\t\"./dv.js\": 998,\n\t\"./el\": 997,\n\t\"./el.js\": 997,\n\t\"./en-au\": 996,\n\t\"./en-au.js\": 996,\n\t\"./en-ca\": 995,\n\t\"./en-ca.js\": 995,\n\t\"./en-gb\": 994,\n\t\"./en-gb.js\": 994,\n\t\"./en-ie\": 993,\n\t\"./en-ie.js\": 993,\n\t\"./en-il\": 992,\n\t\"./en-il.js\": 992,\n\t\"./en-nz\": 991,\n\t\"./en-nz.js\": 991,\n\t\"./eo\": 990,\n\t\"./eo.js\": 990,\n\t\"./es\": 989,\n\t\"./es-do\": 988,\n\t\"./es-do.js\": 988,\n\t\"./es-us\": 987,\n\t\"./es-us.js\": 987,\n\t\"./es.js\": 989,\n\t\"./et\": 986,\n\t\"./et.js\": 986,\n\t\"./eu\": 985,\n\t\"./eu.js\": 985,\n\t\"./fa\": 984,\n\t\"./fa.js\": 984,\n\t\"./fi\": 983,\n\t\"./fi.js\": 983,\n\t\"./fo\": 982,\n\t\"./fo.js\": 982,\n\t\"./fr\": 981,\n\t\"./fr-ca\": 980,\n\t\"./fr-ca.js\": 980,\n\t\"./fr-ch\": 979,\n\t\"./fr-ch.js\": 979,\n\t\"./fr.js\": 981,\n\t\"./fy\": 978,\n\t\"./fy.js\": 978,\n\t\"./gd\": 977,\n\t\"./gd.js\": 977,\n\t\"./gl\": 976,\n\t\"./gl.js\": 976,\n\t\"./gom-latn\": 975,\n\t\"./gom-latn.js\": 975,\n\t\"./gu\": 974,\n\t\"./gu.js\": 974,\n\t\"./he\": 973,\n\t\"./he.js\": 973,\n\t\"./hi\": 972,\n\t\"./hi.js\": 972,\n\t\"./hr\": 971,\n\t\"./hr.js\": 971,\n\t\"./hu\": 970,\n\t\"./hu.js\": 970,\n\t\"./hy-am\": 969,\n\t\"./hy-am.js\": 969,\n\t\"./id\": 968,\n\t\"./id.js\": 968,\n\t\"./is\": 967,\n\t\"./is.js\": 967,\n\t\"./it\": 966,\n\t\"./it.js\": 966,\n\t\"./ja\": 965,\n\t\"./ja.js\": 965,\n\t\"./jv\": 964,\n\t\"./jv.js\": 964,\n\t\"./ka\": 963,\n\t\"./ka.js\": 963,\n\t\"./kk\": 962,\n\t\"./kk.js\": 962,\n\t\"./km\": 961,\n\t\"./km.js\": 961,\n\t\"./kn\": 960,\n\t\"./kn.js\": 960,\n\t\"./ko\": 959,\n\t\"./ko.js\": 959,\n\t\"./ky\": 958,\n\t\"./ky.js\": 958,\n\t\"./lb\": 957,\n\t\"./lb.js\": 957,\n\t\"./lo\": 956,\n\t\"./lo.js\": 956,\n\t\"./lt\": 955,\n\t\"./lt.js\": 955,\n\t\"./lv\": 954,\n\t\"./lv.js\": 954,\n\t\"./me\": 953,\n\t\"./me.js\": 953,\n\t\"./mi\": 952,\n\t\"./mi.js\": 952,\n\t\"./mk\": 951,\n\t\"./mk.js\": 951,\n\t\"./ml\": 950,\n\t\"./ml.js\": 950,\n\t\"./mn\": 949,\n\t\"./mn.js\": 949,\n\t\"./mr\": 948,\n\t\"./mr.js\": 948,\n\t\"./ms\": 947,\n\t\"./ms-my\": 946,\n\t\"./ms-my.js\": 946,\n\t\"./ms.js\": 947,\n\t\"./mt\": 945,\n\t\"./mt.js\": 945,\n\t\"./my\": 944,\n\t\"./my.js\": 944,\n\t\"./nb\": 943,\n\t\"./nb.js\": 943,\n\t\"./ne\": 942,\n\t\"./ne.js\": 942,\n\t\"./nl\": 941,\n\t\"./nl-be\": 940,\n\t\"./nl-be.js\": 940,\n\t\"./nl.js\": 941,\n\t\"./nn\": 939,\n\t\"./nn.js\": 939,\n\t\"./pa-in\": 938,\n\t\"./pa-in.js\": 938,\n\t\"./pl\": 937,\n\t\"./pl.js\": 937,\n\t\"./pt\": 936,\n\t\"./pt-br\": 935,\n\t\"./pt-br.js\": 935,\n\t\"./pt.js\": 936,\n\t\"./ro\": 934,\n\t\"./ro.js\": 934,\n\t\"./ru\": 933,\n\t\"./ru.js\": 933,\n\t\"./sd\": 932,\n\t\"./sd.js\": 932,\n\t\"./se\": 931,\n\t\"./se.js\": 931,\n\t\"./si\": 930,\n\t\"./si.js\": 930,\n\t\"./sk\": 929,\n\t\"./sk.js\": 929,\n\t\"./sl\": 928,\n\t\"./sl.js\": 928,\n\t\"./sq\": 927,\n\t\"./sq.js\": 927,\n\t\"./sr\": 926,\n\t\"./sr-cyrl\": 925,\n\t\"./sr-cyrl.js\": 925,\n\t\"./sr.js\": 926,\n\t\"./ss\": 924,\n\t\"./ss.js\": 924,\n\t\"./sv\": 923,\n\t\"./sv.js\": 923,\n\t\"./sw\": 922,\n\t\"./sw.js\": 922,\n\t\"./ta\": 921,\n\t\"./ta.js\": 921,\n\t\"./te\": 920,\n\t\"./te.js\": 920,\n\t\"./tet\": 919,\n\t\"./tet.js\": 919,\n\t\"./tg\": 918,\n\t\"./tg.js\": 918,\n\t\"./th\": 917,\n\t\"./th.js\": 917,\n\t\"./tl-ph\": 916,\n\t\"./tl-ph.js\": 916,\n\t\"./tlh\": 915,\n\t\"./tlh.js\": 915,\n\t\"./tr\": 914,\n\t\"./tr.js\": 914,\n\t\"./tzl\": 913,\n\t\"./tzl.js\": 913,\n\t\"./tzm\": 912,\n\t\"./tzm-latn\": 911,\n\t\"./tzm-latn.js\": 911,\n\t\"./tzm.js\": 912,\n\t\"./ug-cn\": 910,\n\t\"./ug-cn.js\": 910,\n\t\"./uk\": 909,\n\t\"./uk.js\": 909,\n\t\"./ur\": 908,\n\t\"./ur.js\": 908,\n\t\"./uz\": 907,\n\t\"./uz-latn\": 906,\n\t\"./uz-latn.js\": 906,\n\t\"./uz.js\": 907,\n\t\"./vi\": 905,\n\t\"./vi.js\": 905,\n\t\"./x-pseudo\": 904,\n\t\"./x-pseudo.js\": 904,\n\t\"./yo\": 903,\n\t\"./yo.js\": 903,\n\t\"./zh-cn\": 902,\n\t\"./zh-cn.js\": 902,\n\t\"./zh-hk\": 901,\n\t\"./zh-hk.js\": 901,\n\t\"./zh-tw\": 900,\n\t\"./zh-tw.js\": 900\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tvar id = map[req];\n\tif(!(id + 1)) { // check for number or string\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn id;\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 2415;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { noop } from 'patternfly-react';\nimport InProgressCard from './InProgressCard';\n\nconst InProgressWithDetailCard = ({ plan, failedOverlay, handleClick, children }) => (\n  <InProgressCard\n    onClick={e => {\n      if (!e.target.classList.contains('pficon-error-circle-o')) {\n        handleClick(`/plan/${plan.id}`);\n      }\n    }}\n    className=\"in-progress\"\n    title={\n      <h3 className=\"card-pf-title\">\n        {failedOverlay}\n        {plan.name}\n      </h3>\n    }\n  >\n    {children}\n  </InProgressCard>\n);\n\nInProgressWithDetailCard.propTypes = {\n  plan: PropTypes.object,\n  failedOverlay: PropTypes.node,\n  handleClick: PropTypes.func,\n  children: PropTypes.node\n};\n\nInProgressWithDetailCard.defaultProps = {\n  plan: {},\n  failedOverlay: null,\n  handleClick: noop,\n  children: null\n};\n\nexport default InProgressWithDetailCard;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport numeral from 'numeral';\nimport { Icon, OverlayTrigger, Popover, Tooltip, UtilizationBar } from 'patternfly-react';\n\nimport InProgressCard from './InProgressCard';\nimport InProgressWithDetailCard from './InProgressWithDetailCard';\nimport TickingIsoElapsedTime from '../../../../../../components/dates/TickingIsoElapsedTime';\nimport getMostRecentRequest from '../../../common/getMostRecentRequest';\nimport getMostRecentVMTasksFromRequests from './helpers/getMostRecentVMTasksFromRequests';\nimport getPlaybookName from './helpers/getPlaybookName';\nimport { PLAN_JOB_STATES } from '../../../../../../data/models/plans';\nimport {\n  MIGRATIONS_FILTERS,\n  TRANSFORMATION_PLAN_REQUESTS_URL,\n  WAITING_FOR_CONVERSION_HOST_MESSAGES\n} from '../../OverviewConstants';\nimport CardEmptyState from './CardEmptyState';\nimport CardFooter from './CardFooter';\nimport { urlBuilder } from './helpers';\nimport { getMappingType } from '../../../Mappings/components/InfrastructureMappingsList/helpers';\nimport { OPENSTACK } from '../../../Mappings/screens/MappingWizard/MappingWizardConstants';\n\nconst MigrationsInProgressCard = ({\n  plan,\n  serviceTemplatePlaybooks,\n  allRequestsWithTasks,\n  reloadCard,\n  handleClick,\n  fetchTransformationPlansAction,\n  fetchTransformationPlansUrl,\n  isFetchingTransformationPlans,\n  isFetchingAllRequestsWithTasks,\n  acknowledgeDeniedPlanRequestAction,\n  isEditingPlanRequest,\n  setMigrationsFilterAction,\n  cancelPlanRequestAction,\n  isCancellingPlanRequest,\n  requestsProcessingCancellation\n}) => {\n  const requestsOfAssociatedPlan = allRequestsWithTasks.filter(request => request.source_id === plan.id);\n  const mostRecentRequest = requestsOfAssociatedPlan.length > 0 && getMostRecentRequest(requestsOfAssociatedPlan);\n  const waitingForConversionHost =\n    mostRecentRequest &&\n    mostRecentRequest.approval_state === 'approved' &&\n    mostRecentRequest.miq_request_tasks.length > 0 &&\n    mostRecentRequest.miq_request_tasks.every(task => !task.conversion_host_id);\n\n  // if most recent request is still pending, show loading card\n  if (reloadCard || !mostRecentRequest || mostRecentRequest.request_state === 'pending') {\n    return (\n      <InProgressCard title={<h3 className=\"card-pf-title\">{plan.name}</h3>}>\n        <CardEmptyState\n          emptyStateInfo={__('Initiating migration. This might take a few minutes.')}\n          showSpinner\n          spinnerStyles={{ marginBottom: '15px' }}\n        />\n      </InProgressCard>\n    );\n  }\n\n  if (waitingForConversionHost) {\n    const cancelPlanRequest = () => {\n      cancelPlanRequestAction(TRANSFORMATION_PLAN_REQUESTS_URL, mostRecentRequest.id).then(() =>\n        fetchTransformationPlansAction({ url: fetchTransformationPlansUrl, archived: false })\n      );\n    };\n\n    const isProcessingCancellation = requestsProcessingCancellation.includes(\n      urlBuilder(TRANSFORMATION_PLAN_REQUESTS_URL, mostRecentRequest.id)\n    );\n\n    const targetIsOsp = getMappingType(plan.transformation_mapping.transformation_mapping_items) === OPENSTACK;\n    const cardMessage =\n      targetIsOsp && plan.targetProvider && !plan.targetProvider.hasRsaKey ? 'noRsaKey' : 'notAvailable';\n\n    return (\n      <InProgressCard\n        title={<h3 className=\"card-pf-title\">{plan.name}</h3>}\n        footer={\n          <CardFooter\n            disabled={\n              isProcessingCancellation &&\n              (isFetchingTransformationPlans ||\n                isFetchingAllRequestsWithTasks ||\n                isCancellingPlanRequest ||\n                !!mostRecentRequest.cancelation_status)\n            }\n            buttonText={__('Cancel Migration')}\n            onButtonClick={cancelPlanRequest}\n          />\n        }\n      >\n        <CardEmptyState\n          showSpinner\n          emptyStateInfo={WAITING_FOR_CONVERSION_HOST_MESSAGES[cardMessage]}\n          emptyStateInfoStyles={{ marginTop: 10 }}\n        />\n      </InProgressCard>\n    );\n  }\n\n  if (mostRecentRequest.approval_state === 'denied') {\n    const onButtonClick = () =>\n      acknowledgeDeniedPlanRequestAction({\n        plansUrl: fetchTransformationPlansUrl,\n        planRequest: mostRecentRequest\n      }).then(() => setMigrationsFilterAction(MIGRATIONS_FILTERS.completed));\n\n    return (\n      <InProgressCard\n        title={<h3 className=\"card-pf-title\">{plan.name}</h3>}\n        footer={\n          <CardFooter\n            disabled={isEditingPlanRequest}\n            buttonText={__('Cancel Migration')}\n            onButtonClick={onButtonClick}\n          />\n        }\n      >\n        <CardEmptyState\n          iconType=\"pf\"\n          iconName=\"error-circle-o\"\n          emptyStateInfo={\n            <React.Fragment>\n              {__('Unable to migrate VMs because no conversion host was configured at the time of the attempted migration.') /* prettier-ignore */}{' '}\n              {__('See the product documentation for information on configuring conversion hosts.')}\n            </React.Fragment>\n          }\n          emptyStateInfoStyles={{ marginTop: 10 }}\n        />\n      </InProgressCard>\n    );\n  }\n\n  // UX business rule: reflect failed immediately if any single task has failed\n  // in the most recent request\n  let failed = false;\n  let failedVms = 0;\n  mostRecentRequest.miq_request_tasks.forEach(task => {\n    if (task.status === 'Error') {\n      failed = true;\n      failedVms += 1;\n    }\n  });\n\n  // UX business rule: aggregrate the tasks across requests reflecting current status of all tasks,\n  // (gather the last status for the vm, gather the last storage for use in UX bussiness rule 3)\n  const tasks = {};\n  let tasksOfPlan = {};\n  if (requestsOfAssociatedPlan.length > 0) {\n    tasksOfPlan = getMostRecentVMTasksFromRequests(requestsOfAssociatedPlan, plan.options.config_info.actions);\n  } else if (mostRecentRequest) {\n    tasksOfPlan = mostRecentRequest.miq_request_tasks;\n  }\n  tasksOfPlan.forEach(task => {\n    tasks[task.source_id] = tasks[task.source_id] || {};\n    tasks[task.source_id].completed = task.status === 'Ok' && task.state === 'finished';\n    tasks[task.source_id].virtv2v_disks = task.options.virtv2v_disks;\n    tasks[task.source_id].playbooks = task.options.playbooks;\n  });\n\n  let completedVMs = 0;\n  const totalVMs = Object.keys(tasks).length;\n  let taskRunningPreMigrationPlaybook = null;\n  let taskRunningPostMigrationPlaybook = null;\n  Object.keys(tasks).forEach(task => {\n    if (tasks[task].completed) completedVMs += 1;\n\n    // after we have assigned the latest tasks for each source, check the running playbook status\n    const { playbooks } = tasks[task];\n    if (playbooks) {\n      if (\n        playbooks.pre &&\n        (playbooks.pre.job_state === PLAN_JOB_STATES.PENDING || playbooks.pre.job_state === PLAN_JOB_STATES.ACTIVE)\n      ) {\n        taskRunningPreMigrationPlaybook = tasks[task];\n      }\n      if (\n        playbooks.post &&\n        (playbooks.post.job_state === PLAN_JOB_STATES.PENDING || playbooks.post.job_state === PLAN_JOB_STATES.ACTIVE)\n      ) {\n        taskRunningPostMigrationPlaybook = tasks[task];\n      }\n    }\n  });\n\n  let failedOverlay = null;\n  if (failed) {\n    failedOverlay = (\n      <OverlayTrigger\n        overlay={\n          <Popover id={`description_${plan.id}`} title={sprintf('%s', plan.name)}>\n            <Icon\n              type=\"pf\"\n              name=\"error-circle-o\"\n              size=\"sm\"\n              style={{\n                width: 'inherit',\n                backgroundColor: 'transparent',\n                paddingRight: 5\n              }}\n            />\n            {sprintf(__('%s of %s VM migrations failed.'), failedVms, totalVMs)}\n          </Popover>\n        }\n        placement=\"top\"\n        trigger={['hover']}\n        delay={500}\n        rootClose={false}\n      >\n        <Icon\n          type=\"pf\"\n          name=\"error-circle-o\"\n          size=\"md\"\n          style={{\n            width: 'inherit',\n            backgroundColor: 'transparent',\n            paddingRight: 10\n          }}\n        />\n      </OverlayTrigger>\n    );\n  }\n\n  // UX business rule: if there are any pre migration playbooks running, show this content instead\n  if (taskRunningPreMigrationPlaybook) {\n    const playbookName = getPlaybookName(serviceTemplatePlaybooks, plan.options.config_info.pre_service_id);\n    return (\n      <InProgressWithDetailCard plan={plan} failedOverlay={failedOverlay} handleClick={handleClick}>\n        <CardEmptyState\n          emptyStateInfo={sprintf(__('Running playbook service %s. This might take a few minutes.'), playbookName)}\n          showSpinner\n          spinnerStyles={{ marginBottom: '15px' }}\n        />\n      </InProgressWithDetailCard>\n    );\n  }\n\n  // UX business rule: reflect the total disk space migrated, aggregated across requests\n  let totalDiskSpace = 0;\n  let totalMigratedDiskSpace = 0;\n  Object.keys(tasks).forEach(task => {\n    const taskDisks = tasks[task].virtv2v_disks;\n    if (taskDisks && taskDisks.length) {\n      const totalTaskDiskSpace = taskDisks.reduce((a, b) => a + b.size, 0);\n      const percentComplete = taskDisks.reduce((a, b) => a + b.percent, 0) / (100 * taskDisks.length);\n      const taskDiskSpaceCompleted = percentComplete * totalTaskDiskSpace;\n\n      totalDiskSpace += totalTaskDiskSpace;\n      totalMigratedDiskSpace += taskDiskSpaceCompleted;\n    }\n  });\n\n  const totalDiskSpaceGb = numeral(totalDiskSpace).format('0.00b');\n  const totalMigratedDiskSpaceGb = numeral(totalMigratedDiskSpace).format('0.00b');\n\n  // UX business rule: if all disks have been migrated and we have a post migration playbook running, show this instead\n  if (totalMigratedDiskSpaceGb >= totalDiskSpaceGb && taskRunningPostMigrationPlaybook) {\n    const playbookName = getPlaybookName(serviceTemplatePlaybooks, plan.options.config_info.post_service_id);\n    return (\n      <InProgressWithDetailCard plan={plan} failedOverlay={failedOverlay} handleClick={handleClick}>\n        <CardEmptyState\n          emptyStateInfo={sprintf(__('Running playbook service %s. This might take a few minutes.'), playbookName)}\n          showSpinner\n          spinnerStyles={{ marginBottom: '15px' }}\n        />\n      </InProgressWithDetailCard>\n    );\n  }\n\n  // UX business rule: reflect most request recent elapsed time\n  const elapsedTime = <TickingIsoElapsedTime startTime={mostRecentRequest.created_on} />;\n\n  // Tooltips\n  const vmBarLabel = (\n    <span>\n      <strong id=\"vms-migrated\" className=\"label-strong\">\n        {sprintf(__('%s of %s VMs'), completedVMs, totalVMs)}\n      </strong>{' '}\n      {__('migrated')}\n    </span>\n  );\n\n  const diskSpaceBarLabel = (\n    <span>\n      <strong id=\"size-migrated\" className=\"label-strong\">\n        {sprintf(__('%s of %s'), totalMigratedDiskSpaceGb, totalDiskSpaceGb)}\n      </strong>{' '}\n      {__('migrated')}\n    </span>\n  );\n\n  const availableTooltip = (id, max, now) => {\n    if (max > 0) {\n      return <Tooltip id={id}>{sprintf(__('%s%% Remaining'), Math.round(((max - now) / max) * 100))}</Tooltip>;\n    }\n    return <Tooltip id={id}>{__('No Data')}</Tooltip>;\n  };\n  const usedTooltip = (id, max, now) => {\n    if (max > 0) {\n      return <Tooltip id={id}>{sprintf(__('%s%% Complete'), Math.round((now / max) * 100))}</Tooltip>;\n    }\n    return <Tooltip id={id}>{__('No Data')}</Tooltip>;\n  };\n\n  const usedVmTooltip = () => usedTooltip(`used-vm-${plan.id}`, totalVMs, completedVMs);\n  const availableVmTooltip = () => availableTooltip(`available-vm-${plan.id}`, totalVMs, completedVMs);\n\n  const usedDiskSpaceTooltip = () => usedTooltip(`total-disk-${plan.id}`, totalDiskSpace, totalMigratedDiskSpace);\n  const availableDiskSpaceTooltip = () =>\n    availableTooltip(`migrated-disk-${plan.id}`, totalDiskSpace, totalMigratedDiskSpace);\n\n  return (\n    <InProgressWithDetailCard plan={plan} failedOverlay={failedOverlay} handleClick={handleClick}>\n      <div id={`datastore-progress-bar-${plan.id}`}>\n        <UtilizationBar\n          now={totalMigratedDiskSpace}\n          max={totalDiskSpace}\n          description={__('Datastores')}\n          label={diskSpaceBarLabel}\n          descriptionPlacementTop\n          availableTooltipFunction={availableDiskSpaceTooltip}\n          usedTooltipFunction={usedDiskSpaceTooltip}\n        />\n      </div>\n      <div id={`vm-progress-bar-${plan.id}`}>\n        <UtilizationBar\n          now={completedVMs}\n          max={totalVMs}\n          description={__('VMs')}\n          label={vmBarLabel}\n          descriptionPlacementTop\n          availableTooltipFunction={availableVmTooltip}\n          usedTooltipFunction={usedVmTooltip}\n        />\n      </div>\n      <div className=\"active-migration-elapsed-time\">\n        <Icon type=\"fa\" name=\"clock-o\" />\n        {elapsedTime}\n      </div>\n    </InProgressWithDetailCard>\n  );\n};\n\nMigrationsInProgressCard.propTypes = {\n  plan: PropTypes.object.isRequired,\n  serviceTemplatePlaybooks: PropTypes.array,\n  allRequestsWithTasks: PropTypes.array,\n  reloadCard: PropTypes.bool,\n  handleClick: PropTypes.func,\n  fetchTransformationPlansAction: PropTypes.func,\n  fetchTransformationPlansUrl: PropTypes.string,\n  isFetchingTransformationPlans: PropTypes.bool,\n  isFetchingAllRequestsWithTasks: PropTypes.bool,\n  acknowledgeDeniedPlanRequestAction: PropTypes.func,\n  isEditingPlanRequest: PropTypes.bool,\n  setMigrationsFilterAction: PropTypes.func,\n  cancelPlanRequestAction: PropTypes.func,\n  isCancellingPlanRequest: PropTypes.bool,\n  requestsProcessingCancellation: PropTypes.array\n};\n\nexport default MigrationsInProgressCard;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Card, Grid, Spinner } from 'patternfly-react';\nimport ShowWizardEmptyState from '../../../common/ShowWizardEmptyState/ShowWizardEmptyState';\nimport MigrationInProgressCard from './MigrationsInProgressCard';\n\nconst MigrationsInProgressCards = ({\n  activeTransformationPlans,\n  serviceTemplatePlaybooks,\n  allRequestsWithTasks,\n  reloadCard,\n  loading,\n  redirectTo,\n  fetchTransformationPlansAction,\n  fetchTransformationPlansUrl,\n  isFetchingTransformationPlans,\n  isFetchingAllRequestsWithTasks,\n  acknowledgeDeniedPlanRequestAction,\n  isEditingPlanRequest,\n  setMigrationsFilterAction,\n  cancelPlanRequestAction,\n  isCancellingPlanRequest,\n  requestsProcessingCancellation\n}) => (\n  <div className=\"row-cards-pf\">\n    <Grid.Row>\n      <Grid.Col\n        xs={12}\n        style={activeTransformationPlans.length > 0 && allRequestsWithTasks.length > 0 ? { marginTop: '20px' } : {}}\n      >\n        <Card.HeightMatching selector={['.card-pf-match-height']}>\n          <Spinner loading={loading}>\n            {activeTransformationPlans.length > 0 && allRequestsWithTasks.length > 0 ? (\n              activeTransformationPlans.map(plan => (\n                <MigrationInProgressCard\n                  plan={plan}\n                  serviceTemplatePlaybooks={serviceTemplatePlaybooks}\n                  allRequestsWithTasks={allRequestsWithTasks}\n                  reloadCard={reloadCard}\n                  key={plan.id}\n                  handleClick={redirectTo}\n                  fetchTransformationPlansAction={fetchTransformationPlansAction}\n                  fetchTransformationPlansUrl={fetchTransformationPlansUrl}\n                  isFetchingTransformationPlans={isFetchingTransformationPlans}\n                  isFetchingAllRequestsWithTasks={isFetchingAllRequestsWithTasks}\n                  acknowledgeDeniedPlanRequestAction={acknowledgeDeniedPlanRequestAction}\n                  isEditingPlanRequest={isEditingPlanRequest}\n                  setMigrationsFilterAction={setMigrationsFilterAction}\n                  cancelPlanRequestAction={cancelPlanRequestAction}\n                  isCancellingPlanRequest={isCancellingPlanRequest}\n                  requestsProcessingCancellation={requestsProcessingCancellation}\n                />\n              ))\n            ) : (\n              <ShowWizardEmptyState\n                title={__('No Migration Plans In Progress')}\n                iconType=\"pf\"\n                iconName=\"info\"\n                description={<span>{__('There are no existing migration plans in an In Progress state.')}</span>}\n              />\n            )}\n          </Spinner>\n        </Card.HeightMatching>\n      </Grid.Col>\n    </Grid.Row>\n  </div>\n);\n\nMigrationsInProgressCards.propTypes = {\n  activeTransformationPlans: PropTypes.array,\n  serviceTemplatePlaybooks: PropTypes.array,\n  allRequestsWithTasks: PropTypes.array,\n  reloadCard: PropTypes.bool,\n  loading: PropTypes.bool,\n  redirectTo: PropTypes.func,\n  fetchTransformationPlansAction: PropTypes.func,\n  fetchTransformationPlansUrl: PropTypes.string,\n  isFetchingTransformationPlans: PropTypes.bool,\n  isFetchingAllRequestsWithTasks: PropTypes.bool,\n  acknowledgeDeniedPlanRequestAction: PropTypes.func,\n  isEditingPlanRequest: PropTypes.bool,\n  setMigrationsFilterAction: PropTypes.func,\n  cancelPlanRequestAction: PropTypes.func,\n  isCancellingPlanRequest: PropTypes.bool,\n  requestsProcessingCancellation: PropTypes.array\n};\n\nMigrationsInProgressCards.defaultProps = {\n  activeTransformationPlans: [],\n  serviceTemplatePlaybooks: [],\n  loading: false\n};\n\nexport default MigrationsInProgressCards;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Immutable from 'seamless-immutable';\nimport { noop, Grid, Icon } from 'patternfly-react';\nimport MigrationsInProgressCards from './MigrationsInProgressCards';\nimport MigrationsNotStartedList from './MigrationsNotStartedList';\nimport MigrationsCompletedList from './MigrationsCompletedList';\nimport ShowWizardEmptyState from '../../../common/ShowWizardEmptyState/ShowWizardEmptyState';\nimport { MIGRATIONS_FILTERS, V2V_AUTO_SET_MIGRATIONS_FILTER } from '../../OverviewConstants';\n\nclass Migrations extends React.Component {\n  componentDidMount = () => {\n    const {\n      activeTransformationPlans,\n      archivedTransformationPlans,\n      finishedTransformationPlans,\n      initialMigrationsFilterSet,\n      notStartedPlans,\n      setMigrationsFilterAction\n    } = this.props;\n\n    if (!initialMigrationsFilterSet) {\n      setMigrationsFilterAction(\n        MIGRATIONS_FILTERS[\n          (activeTransformationPlans.length && 'inProgress') ||\n            (notStartedPlans.length && 'notStarted') ||\n            (finishedTransformationPlans.length && 'completed') ||\n            (archivedTransformationPlans.length && 'archived')\n        ],\n        { [V2V_AUTO_SET_MIGRATIONS_FILTER]: true }\n      );\n    }\n  };\n\n  render() {\n    const {\n      activeFilter,\n      transformationPlans,\n      allRequestsWithTasks,\n      reloadCard,\n      notStartedPlans,\n      activeTransformationPlans,\n      serviceTemplatePlaybooks,\n      createMigrationPlanClick,\n      createTransformationPlanRequestClick,\n      isCreatingTransformationPlanRequest,\n      finishedTransformationPlans,\n      redirectTo,\n      showConfirmModalAction,\n      hideConfirmModalAction,\n      fetchTransformationPlansAction,\n      fetchTransformationPlansUrl,\n      fetchArchivedTransformationPlansUrl,\n      isFetchingArchivedTransformationPlans,\n      isFetchingTransformationPlans,\n      isFetchingAllRequestsWithTasks,\n      archivedTransformationPlans,\n      allArchivedPlanRequestsWithTasks,\n      archiveTransformationPlanAction,\n      archiveTransformationPlanUrl,\n      deleteTransformationPlanAction,\n      deleteTransformationPlanUrl,\n      addNotificationAction,\n      toggleScheduleMigrationModal,\n      scheduleMigrationModal,\n      scheduleMigrationPlan,\n      scheduleMigration,\n      showPlanWizardEditModeAction,\n      fetchTransformationMappingsUrl,\n      fetchTransformationMappingsAction,\n      showEditPlanNameModalAction,\n      acknowledgeDeniedPlanRequestAction,\n      isEditingPlanRequest,\n      setMigrationsFilterAction,\n      cancelPlanRequestAction,\n      isCancellingPlanRequest,\n      requestsProcessingCancellation\n    } = this.props;\n\n    const plansExist = transformationPlans.length > 0 || archivedTransformationPlans.length > 0;\n\n    return (\n      <React.Fragment>\n        <Grid.Col xs={12} style={{ backgroundColor: '#fff' }}>\n          <div className=\"heading-with-link-container\">\n            <div className=\"pull-left\">\n              <h3>{activeFilter}</h3>\n            </div>\n            <div className=\"pull-right\">\n              {/** todo: create IconLink in patternfly-react * */}\n              <a\n                href=\"#\"\n                onClick={e => {\n                  e.preventDefault();\n                  createMigrationPlanClick();\n                }}\n              >\n                <Icon type=\"pf\" name=\"add-circle-o\" />\n                &nbsp;\n                {__('Create Migration Plan')}\n              </a>\n            </div>\n          </div>\n          <hr style={{ borderTopColor: '#d1d1d1', marginBottom: 0, marginLeft: '-20px', marginRight: '-20px' }} />\n          {!plansExist && (\n            <div style={{ marginLeft: '-20px', marginRight: '-20px', marginBottom: '-20px' }}>\n              <ShowWizardEmptyState\n                showWizardAction={() => createMigrationPlanClick()}\n                description={__('Create a migration plan to select VMs for migration.')}\n                buttonText={__('Create Migration Plan')}\n              />\n            </div>\n          )}\n        </Grid.Col>\n\n        {plansExist && (\n          <div className=\"migrations\">\n            {activeFilter === MIGRATIONS_FILTERS.notStarted && (\n              <MigrationsNotStartedList\n                notStartedPlans={Immutable.asMutable(notStartedPlans, { deep: true })}\n                migrateClick={createTransformationPlanRequestClick}\n                loading={isCreatingTransformationPlanRequest}\n                redirectTo={redirectTo}\n                showConfirmModalAction={showConfirmModalAction}\n                hideConfirmModalAction={hideConfirmModalAction}\n                addNotificationAction={addNotificationAction}\n                toggleScheduleMigrationModal={toggleScheduleMigrationModal}\n                scheduleMigrationModal={scheduleMigrationModal}\n                scheduleMigrationPlan={scheduleMigrationPlan}\n                scheduleMigration={scheduleMigration}\n                fetchTransformationPlansAction={fetchTransformationPlansAction}\n                fetchTransformationPlansUrl={fetchTransformationPlansUrl}\n                deleteTransformationPlanAction={deleteTransformationPlanAction}\n                deleteTransformationPlanUrl={deleteTransformationPlanUrl}\n                showPlanWizardEditModeAction={showPlanWizardEditModeAction}\n                fetchTransformationMappingsAction={fetchTransformationMappingsAction}\n                fetchTransformationMappingsUrl={fetchTransformationMappingsUrl}\n              />\n            )}\n            {activeFilter === MIGRATIONS_FILTERS.inProgress && (\n              <MigrationsInProgressCards\n                activeTransformationPlans={activeTransformationPlans}\n                serviceTemplatePlaybooks={serviceTemplatePlaybooks}\n                allRequestsWithTasks={allRequestsWithTasks}\n                reloadCard={reloadCard}\n                loading={isCreatingTransformationPlanRequest !== null}\n                redirectTo={redirectTo}\n                fetchTransformationPlansAction={fetchTransformationPlansAction}\n                fetchTransformationPlansUrl={fetchTransformationPlansUrl}\n                isFetchingTransformationPlans={isFetchingTransformationPlans}\n                isFetchingAllRequestsWithTasks={isFetchingAllRequestsWithTasks}\n                acknowledgeDeniedPlanRequestAction={acknowledgeDeniedPlanRequestAction}\n                isEditingPlanRequest={isEditingPlanRequest}\n                setMigrationsFilterAction={setMigrationsFilterAction}\n                cancelPlanRequestAction={cancelPlanRequestAction}\n                isCancellingPlanRequest={isCancellingPlanRequest}\n                requestsProcessingCancellation={requestsProcessingCancellation}\n              />\n            )}\n            {activeFilter === MIGRATIONS_FILTERS.completed && (\n              <MigrationsCompletedList\n                finishedTransformationPlans={Immutable.asMutable(finishedTransformationPlans, { deep: true })}\n                allRequestsWithTasks={allRequestsWithTasks}\n                retryClick={createTransformationPlanRequestClick}\n                loading={isCreatingTransformationPlanRequest}\n                redirectTo={redirectTo}\n                showConfirmModalAction={showConfirmModalAction}\n                hideConfirmModalAction={hideConfirmModalAction}\n                archiveTransformationPlanAction={archiveTransformationPlanAction}\n                archiveTransformationPlanUrl={archiveTransformationPlanUrl}\n                deleteTransformationPlanAction={deleteTransformationPlanAction}\n                deleteTransformationPlanUrl={deleteTransformationPlanUrl}\n                fetchTransformationPlansAction={fetchTransformationPlansAction}\n                fetchTransformationPlansUrl={fetchTransformationPlansUrl}\n                fetchArchivedTransformationPlansUrl={fetchArchivedTransformationPlansUrl}\n                addNotificationAction={addNotificationAction}\n                toggleScheduleMigrationModal={toggleScheduleMigrationModal}\n                scheduleMigrationModal={scheduleMigrationModal}\n                scheduleMigrationPlan={scheduleMigrationPlan}\n                scheduleMigration={scheduleMigration}\n                fetchTransformationMappingsAction={fetchTransformationMappingsAction}\n                fetchTransformationMappingsUrl={fetchTransformationMappingsUrl}\n                showEditPlanNameModalAction={showEditPlanNameModalAction}\n              />\n            )}\n            {activeFilter === MIGRATIONS_FILTERS.archived && (\n              <MigrationsCompletedList\n                finishedTransformationPlans={Immutable.asMutable(archivedTransformationPlans, { deep: true })}\n                allRequestsWithTasks={allArchivedPlanRequestsWithTasks}\n                redirectTo={redirectTo}\n                loading={isFetchingArchivedTransformationPlans}\n                archived\n                showConfirmModalAction={showConfirmModalAction}\n                hideConfirmModalAction={hideConfirmModalAction}\n                addNotificationAction={addNotificationAction}\n                deleteTransformationPlanAction={deleteTransformationPlanAction}\n                deleteTransformationPlanUrl={deleteTransformationPlanUrl}\n                fetchTransformationPlansAction={fetchTransformationPlansAction}\n                fetchTransformationPlansUrl={fetchTransformationPlansUrl}\n                fetchArchivedTransformationPlansUrl={fetchArchivedTransformationPlansUrl}\n                fetchTransformationMappingsAction={fetchTransformationMappingsAction}\n                fetchTransformationMappingsUrl={fetchTransformationMappingsUrl}\n                showEditPlanNameModalAction={showEditPlanNameModalAction}\n              />\n            )}\n          </div>\n        )}\n      </React.Fragment>\n    );\n  }\n}\n\nMigrations.propTypes = {\n  activeFilter: PropTypes.string,\n  initialMigrationsFilterSet: PropTypes.bool,\n  setMigrationsFilterAction: PropTypes.func,\n  transformationPlans: PropTypes.array,\n  allRequestsWithTasks: PropTypes.array,\n  reloadCard: PropTypes.bool,\n  notStartedPlans: PropTypes.array,\n  activeTransformationPlans: PropTypes.array,\n  serviceTemplatePlaybooks: PropTypes.array,\n  createMigrationPlanClick: PropTypes.func,\n  createTransformationPlanRequestClick: PropTypes.func,\n  isCreatingTransformationPlanRequest: PropTypes.string,\n  finishedTransformationPlans: PropTypes.array,\n  redirectTo: PropTypes.func,\n  showConfirmModalAction: PropTypes.func,\n  hideConfirmModalAction: PropTypes.func,\n  fetchTransformationPlansAction: PropTypes.func,\n  fetchTransformationPlansUrl: PropTypes.string,\n  fetchArchivedTransformationPlansUrl: PropTypes.string,\n  archivedTransformationPlans: PropTypes.array,\n  allArchivedPlanRequestsWithTasks: PropTypes.array,\n  isFetchingTransformationPlans: PropTypes.bool,\n  isFetchingArchivedTransformationPlans: PropTypes.string,\n  isFetchingAllRequestsWithTasks: PropTypes.bool,\n  archiveTransformationPlanAction: PropTypes.func,\n  archiveTransformationPlanUrl: PropTypes.string,\n  deleteTransformationPlanAction: PropTypes.func,\n  deleteTransformationPlanUrl: PropTypes.string,\n  addNotificationAction: PropTypes.func,\n  toggleScheduleMigrationModal: PropTypes.func,\n  scheduleMigrationModal: PropTypes.bool,\n  scheduleMigrationPlan: PropTypes.object,\n  scheduleMigration: PropTypes.func,\n  showPlanWizardEditModeAction: PropTypes.func,\n  fetchTransformationMappingsAction: PropTypes.func,\n  fetchTransformationMappingsUrl: PropTypes.string,\n  showEditPlanNameModalAction: PropTypes.func,\n  acknowledgeDeniedPlanRequestAction: PropTypes.func,\n  isEditingPlanRequest: PropTypes.bool,\n  cancelPlanRequestAction: PropTypes.func,\n  isCancellingPlanRequest: PropTypes.bool,\n  requestsProcessingCancellation: PropTypes.array\n};\nMigrations.defaultProps = {\n  transformationPlans: [],\n  notStartedPlans: [],\n  activeTransformationPlans: [],\n  serviceTemplatePlaybooks: [],\n  createMigrationPlanClick: noop,\n  createTransformationPlanRequestClick: noop,\n  isCreatingTransformationPlanRequest: '',\n  finishedTransformationPlans: []\n};\nexport default Migrations;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport cx from 'classnames';\nimport {\n  Icon,\n  Card,\n  AggregateStatusCount,\n  AggregateStatusNotifications,\n  AggregateStatusNotification,\n  Spinner\n} from 'patternfly-react';\n\nimport { MIGRATIONS_FILTERS } from '../../../OverviewConstants';\n\nconst ArchivedTransformationPlans = ({ archivedPlans, loading, migrationsFilter, setMigrationsFilterAction }) => {\n  const countDescription = archivedPlans.length === 1 ? __('Migration Plan Archived') : __('Migration Plans Archived');\n  const active = migrationsFilter === MIGRATIONS_FILTERS.archived;\n  const classes = cx('overview-aggregate-card', { 'is-loading': loading, active });\n\n  return (\n    <Card\n      className={classes}\n      accented\n      aggregated\n      matchHeight\n      onClick={() => setMigrationsFilterAction(MIGRATIONS_FILTERS.archived)}\n    >\n      <Spinner loading={loading}>\n        <Card.Title>\n          <AggregateStatusCount>{archivedPlans.length}</AggregateStatusCount> {countDescription}\n        </Card.Title>\n        {archivedPlans.length > 0 && (\n          <Card.Body className=\"overview-aggregate-card--body\">\n            <AggregateStatusNotifications>\n              <AggregateStatusNotification>\n                <Icon type=\"pf\" name=\"ok\" />\n              </AggregateStatusNotification>\n            </AggregateStatusNotifications>\n          </Card.Body>\n        )}\n      </Spinner>\n    </Card>\n  );\n};\n\nArchivedTransformationPlans.propTypes = {\n  archivedPlans: PropTypes.array,\n  loading: PropTypes.bool,\n  migrationsFilter: PropTypes.string,\n  setMigrationsFilterAction: PropTypes.func\n};\n\nexport default ArchivedTransformationPlans;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport cx from 'classnames';\nimport {\n  Icon,\n  Card,\n  AggregateStatusCount,\n  AggregateStatusNotifications,\n  AggregateStatusNotification,\n  Spinner\n} from 'patternfly-react';\n\nimport getMostRecentRequest from '../../../../common/getMostRecentRequest';\nimport { MIGRATIONS_FILTERS } from '../../../OverviewConstants';\n\nconst FinishedTransformationPlans = ({ finishedPlans, loading, migrationsFilter, setMigrationsFilterAction }) => {\n  const countDescription = finishedPlans.length === 1 ? __('Migration Plan Complete') : __('Migration Plans Complete');\n  const active = migrationsFilter === MIGRATIONS_FILTERS.completed;\n  const failedPlans = finishedPlans.filter(plan => {\n    const mostRecentRequest = plan.miq_requests.length > 0 && getMostRecentRequest(plan.miq_requests);\n    return mostRecentRequest.status === 'Error' || mostRecentRequest.status === 'Denied';\n  });\n\n  const classes = cx('overview-aggregate-card', { 'is-loading': loading, active });\n\n  return (\n    <Card\n      className={classes}\n      accented\n      aggregated\n      matchHeight\n      onClick={() => setMigrationsFilterAction(MIGRATIONS_FILTERS.completed)}\n    >\n      <Spinner loading={loading}>\n        <Card.Title>\n          <AggregateStatusCount>{finishedPlans.length}</AggregateStatusCount> {countDescription}\n        </Card.Title>\n        {finishedPlans.length > 0 && (\n          <Card.Body className=\"overview-aggregate-card--body\">\n            <AggregateStatusNotifications>\n              <AggregateStatusNotification>\n                <Icon type=\"pf\" name={failedPlans.length > 0 ? 'error-circle-o' : 'ok'} />{' '}\n                {failedPlans.length > 0 && failedPlans.length}\n              </AggregateStatusNotification>\n            </AggregateStatusNotifications>\n          </Card.Body>\n        )}\n      </Spinner>\n    </Card>\n  );\n};\n\nFinishedTransformationPlans.propTypes = {\n  finishedPlans: PropTypes.array,\n  loading: PropTypes.bool,\n  migrationsFilter: PropTypes.string,\n  setMigrationsFilterAction: PropTypes.func\n};\n\nexport default FinishedTransformationPlans;\n","import { string, object } from 'yup';\n\nexport const schedulesSchema = object().shape({\n  href: string().required(),\n  id: string().required(),\n  run_at: object()\n    .shape({\n      start_time: string().required()\n    })\n    .required()\n});\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport cx from 'classnames';\nimport {\n  Icon,\n  Card,\n  AggregateStatusCount,\n  AggregateStatusNotifications,\n  AggregateStatusNotification,\n  Spinner\n} from 'patternfly-react';\n\nimport getMostRecentRequest from '../../../../common/getMostRecentRequest';\nimport { PLAN_JOB_STATUS } from '../../../../../../../data/models/plans';\nimport { MIGRATIONS_FILTERS } from '../../../OverviewConstants';\n\nconst ActiveTransformationPlans = ({\n  activePlans,\n  allRequestsWithTasks,\n  reloadCard,\n  loading,\n  migrationsFilter,\n  setMigrationsFilterAction\n}) => {\n  const countDescription =\n    activePlans.length === 1 ? __('Migration Plan In Progress') : __('Migration Plans In Progress');\n  const active = migrationsFilter === MIGRATIONS_FILTERS.inProgress;\n  const erroredPlans = activePlans.filter(plan => {\n    if (allRequestsWithTasks && allRequestsWithTasks.length > 0) {\n      const requestsOfAssociatedPlan = allRequestsWithTasks.filter(request => request.source_id === plan.id);\n      const mostRecentRequest = requestsOfAssociatedPlan.length > 0 && getMostRecentRequest(requestsOfAssociatedPlan);\n      return (\n        mostRecentRequest &&\n        mostRecentRequest.miq_request_tasks.some(task => {\n          if (task.options && task.options.playbooks) {\n            const { playbooks } = task.options;\n            if (playbooks.pre && playbooks.pre.job_status === PLAN_JOB_STATUS.ERROR) {\n              return true;\n            }\n            if (playbooks.post && playbooks.post.job_status === PLAN_JOB_STATUS.ERROR) {\n              return true;\n            }\n          }\n          return task.state === 'finished' && task.status === 'Error';\n        })\n      );\n    }\n    return [];\n  });\n\n  let erroredPlansLen = erroredPlans.length;\n  if (erroredPlansLen > 0 && reloadCard) {\n    erroredPlansLen -= 1;\n  }\n\n  const classes = cx('overview-aggregate-card', { 'is-loading': loading, active });\n\n  return (\n    <Card\n      className={classes}\n      accented\n      aggregated\n      matchHeight\n      onClick={() => setMigrationsFilterAction(MIGRATIONS_FILTERS.inProgress)}\n    >\n      <Spinner loading={loading}>\n        <Card.Title>\n          <AggregateStatusCount>{activePlans.length}</AggregateStatusCount> {countDescription}\n        </Card.Title>\n        {activePlans.length > 0 && (\n          <Card.Body className=\"overview-aggregate-card--body\">\n            <AggregateStatusNotifications>\n              <AggregateStatusNotification>\n                <Icon type=\"pf\" name={erroredPlansLen > 0 ? 'error-circle-o' : 'ok'} />{' '}\n                {erroredPlansLen > 0 && erroredPlansLen}\n              </AggregateStatusNotification>\n            </AggregateStatusNotifications>\n          </Card.Body>\n        )}\n      </Spinner>\n    </Card>\n  );\n};\n\nActiveTransformationPlans.propTypes = {\n  activePlans: PropTypes.array,\n  allRequestsWithTasks: PropTypes.array,\n  reloadCard: PropTypes.bool,\n  loading: PropTypes.bool,\n  migrationsFilter: PropTypes.string,\n  setMigrationsFilterAction: PropTypes.func\n};\n\nexport default ActiveTransformationPlans;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport cx from 'classnames';\nimport {\n  Icon,\n  Card,\n  AggregateStatusCount,\n  AggregateStatusNotifications,\n  AggregateStatusNotification,\n  Spinner\n} from 'patternfly-react';\n\nimport { MIGRATIONS_FILTERS } from '../../../OverviewConstants';\n\nconst NotStartedTransformationPlans = ({ notStartedPlans, loading, migrationsFilter, setMigrationsFilterAction }) => {\n  const countDescription =\n    notStartedPlans.length === 1 ? __('Migration Plan Not Started') : __('Migration Plans Not Started');\n  const active = migrationsFilter === MIGRATIONS_FILTERS.notStarted;\n  const classes = cx('overview-aggregate-card', { 'is-loading': loading, active });\n\n  return (\n    <Card\n      className={classes}\n      accented\n      aggregated\n      matchHeight\n      onClick={() => setMigrationsFilterAction(MIGRATIONS_FILTERS.notStarted)}\n    >\n      <Spinner loading={loading}>\n        <Card.Title>\n          <AggregateStatusCount>{notStartedPlans.length}</AggregateStatusCount> {countDescription}\n        </Card.Title>\n        {notStartedPlans.length > 0 && (\n          <Card.Body className=\"overview-aggregate-card--body\">\n            <AggregateStatusNotifications>\n              <AggregateStatusNotification>\n                <Icon type=\"pf\" name=\"ok\" />\n              </AggregateStatusNotification>\n            </AggregateStatusNotifications>\n          </Card.Body>\n        )}\n      </Spinner>\n    </Card>\n  );\n};\n\nNotStartedTransformationPlans.propTypes = {\n  notStartedPlans: PropTypes.array,\n  loading: PropTypes.bool,\n  migrationsFilter: PropTypes.string,\n  setMigrationsFilterAction: PropTypes.func\n};\n\nexport default NotStartedTransformationPlans;\n","import NotStartedTransformationPlans from './NotStartedTransformationPlans/NotStartedTransformationPlans';\nimport ActiveTransformationPlans from './ActiveTransformationPlans/ActiveTransformationPlans';\nimport FinishedTransformationPlans from './FinishedTransformationPlans/FinishedTransformationPlans';\nimport ArchivedTransformationPlans from './ArchivedTransformationPlans/ArchivedTransformationPlans';\n\nexport {\n  NotStartedTransformationPlans,\n  ActiveTransformationPlans,\n  FinishedTransformationPlans,\n  ArchivedTransformationPlans\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Card, Breadcrumb, CardGrid, Spinner, Icon } from 'patternfly-react';\n\nimport Toolbar from '../../../config/Toolbar';\nimport * as AggregateCards from './components/AggregateCards';\nimport Migrations from './components/Migrations/Migrations';\nimport ShowWizardEmptyState from '../common/ShowWizardEmptyState/ShowWizardEmptyState';\nimport componentRegistry from '../../../../components/componentRegistry';\nimport ConfirmModal from '../common/ConfirmModal';\nimport EditPlanNameModal from './components/EditPlanNameModal';\nimport {\n  MIGRATIONS_FILTERS,\n  FETCH_TRANSFORMATION_PLANS_URL,\n  FETCH_ARCHIVED_TRANSFORMATION_PLANS_URL\n} from './OverviewConstants';\nimport { FETCH_TRANSFORMATION_MAPPINGS_URL, FETCH_CLOUD_TENANTS_URL } from '../Mappings/MappingsConstants';\nimport { FETCH_V2V_PROVIDERS_URL } from '../../../../redux/common/providers/providersConstants';\n\nclass Overview extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.planWizard = componentRegistry.markup('PlanWizardContainer', props.store);\n\n    this.hasMadeInitialPlansFetch = false;\n    this.willUnmount = false;\n  }\n\n  componentDidMount() {\n    const {\n      fetchCloudTenantsAction,\n      fetchCloudTenantsUrl,\n      fetchProvidersAction,\n      fetchProvidersUrl,\n      fetchTransformationMappingsUrl,\n      fetchTransformationMappingsAction,\n      fetchTransformationPlansUrl,\n      fetchTransformationPlansAction,\n      fetchArchivedTransformationPlansUrl,\n      fetchServiceTemplateAnsiblePlaybooksAction,\n      fetchServiceTemplateAnsiblePlaybooksUrl\n    } = this.props;\n\n    fetchProvidersAction(fetchProvidersUrl)\n      .then(() => {\n        const p1 = fetchTransformationPlansAction({\n          url: fetchTransformationPlansUrl,\n          archived: false\n        });\n        const p2 = fetchTransformationPlansAction({\n          url: fetchArchivedTransformationPlansUrl,\n          archived: true\n        });\n        const p3 = fetchServiceTemplateAnsiblePlaybooksAction(fetchServiceTemplateAnsiblePlaybooksUrl);\n        const p4 = fetchTransformationMappingsAction(fetchTransformationMappingsUrl);\n        const p5 = fetchCloudTenantsAction(fetchCloudTenantsUrl);\n\n        return Promise.all([p1, p2, p3, p4, p5]);\n      })\n      .then(() => {\n        this.hasMadeInitialPlansFetch = true;\n\n        if (!this.pollingInterval && !this.willUnmount) {\n          this.startPolling();\n        }\n      });\n  }\n\n  componentWillReceiveProps(nextProps) {\n    const {\n      isContinuingToPlan,\n      fetchTransformationPlansUrl,\n      fetchTransformationPlansAction,\n      planWizardId\n    } = this.props;\n\n    if (isContinuingToPlan !== nextProps.isContinuingToPlan && !nextProps.isContinuingToPlan) {\n      this.showPlanWizardOrError(planWizardId);\n    }\n\n    // kill interval if a wizard becomes visble\n    if (nextProps.planWizardVisible) {\n      this.stopPolling();\n    } else if (\n      !nextProps.planWizardVisible &&\n      this.hasMadeInitialPlansFetch &&\n      !this.pollingInterval &&\n      !this.willUnmount\n    ) {\n      fetchTransformationPlansAction({\n        url: fetchTransformationPlansUrl,\n        archived: false\n      });\n      this.startPolling();\n    }\n  }\n\n  componentWillUnmount() {\n    this.willUnmount = true;\n    this.stopPolling();\n  }\n\n  showPlanWizardOrError = planWizardId => {\n    const { transformationMappings, showPlanWizardAction } = this.props;\n    if (transformationMappings.length > 0) {\n      showPlanWizardAction(planWizardId);\n    } else {\n      this.showNoMappingsError();\n    }\n  };\n\n  showPlanWizardEditModeOrError = editingPlanId => {\n    const { transformationMappings, showPlanWizardEditModeAction } = this.props;\n    if (transformationMappings.length > 0) {\n      showPlanWizardEditModeAction(editingPlanId);\n    } else {\n      this.showNoMappingsError();\n    }\n  };\n\n  showNoMappingsError = () => {\n    const { showConfirmModalAction, hideConfirmModalAction } = this.props;\n    showConfirmModalAction({\n      title: __('Migration plan error'),\n      icon: <Icon className=\"confirm-warning-icon\" type=\"pf\" name=\"error-circle-o\" />,\n      body: (\n        <React.Fragment>\n          <h3 style={{ marginTop: 0 }}>{__('No infrastructure mapping exists')}</h3>\n          <p>\n            {__('A migration plan must include an infrastructure mapping.')}{' '}\n            <a href=\"/migration#/mappings\">{__('Go to the Infrastructure Mappings page to create one.')}</a>\n          </p>\n        </React.Fragment>\n      ),\n      cancelButtonLabel: null,\n      confirmButtonLabel: __('Close'),\n      onConfirm: hideConfirmModalAction\n    });\n  };\n\n  startPolling = () => {\n    const { fetchTransformationPlansAction, fetchTransformationPlansUrl } = this.props;\n    this.pollingInterval = setInterval(() => {\n      fetchTransformationPlansAction({\n        url: fetchTransformationPlansUrl,\n        archived: false\n      });\n    }, 15000);\n  };\n\n  stopPolling = () => {\n    if (this.pollingInterval) {\n      clearInterval(this.pollingInterval);\n      this.pollingInterval = null;\n    }\n  };\n\n  createTransformationPlanRequest = (url, planId) => {\n    const {\n      createTransformationPlanRequestAction,\n      fetchTransformationPlansAction,\n      fetchTransformationPlansUrl,\n      setMigrationsFilterAction,\n      retryMigrationAction\n    } = this.props;\n\n    createTransformationPlanRequestAction(url).then(() => {\n      retryMigrationAction(planId);\n      setMigrationsFilterAction(MIGRATIONS_FILTERS.inProgress);\n      fetchTransformationPlansAction({\n        url: fetchTransformationPlansUrl,\n        archived: false\n      });\n    });\n  };\n\n  renderAggregateDataCards = () => {\n    const {\n      activeTransformationPlans,\n      allRequestsWithTasks,\n      archivedTransformationPlans,\n      finishedTransformationPlans,\n      isFetchingAllRequestsWithTasks,\n      migrationsFilter,\n      notStartedTransformationPlans,\n      reloadCard,\n      requestsWithTasksPreviouslyFetched,\n      setMigrationsFilterAction\n    } = this.props;\n    return (\n      <div className=\"row-cards-pf\">\n        <Card.HeightMatching selector={['.card-pf-match-height']}>\n          <CardGrid.Col xs={6} sm={3}>\n            <AggregateCards.NotStartedTransformationPlans\n              notStartedPlans={notStartedTransformationPlans}\n              loading={isFetchingAllRequestsWithTasks && !requestsWithTasksPreviouslyFetched}\n              migrationsFilter={migrationsFilter}\n              setMigrationsFilterAction={setMigrationsFilterAction}\n            />\n          </CardGrid.Col>\n          <CardGrid.Col xs={6} sm={3}>\n            <AggregateCards.ActiveTransformationPlans\n              activePlans={activeTransformationPlans}\n              allRequestsWithTasks={allRequestsWithTasks}\n              reloadCard={reloadCard}\n              loading={isFetchingAllRequestsWithTasks && !requestsWithTasksPreviouslyFetched}\n              migrationsFilter={migrationsFilter}\n              setMigrationsFilterAction={setMigrationsFilterAction}\n            />\n          </CardGrid.Col>\n          <CardGrid.Col xs={6} sm={3}>\n            <AggregateCards.FinishedTransformationPlans\n              finishedPlans={finishedTransformationPlans}\n              loading={isFetchingAllRequestsWithTasks && !requestsWithTasksPreviouslyFetched}\n              migrationsFilter={migrationsFilter}\n              setMigrationsFilterAction={setMigrationsFilterAction}\n            />\n          </CardGrid.Col>\n          <CardGrid.Col xs={6} sm={3}>\n            <AggregateCards.ArchivedTransformationPlans\n              archivedPlans={archivedTransformationPlans}\n              loading={isFetchingAllRequestsWithTasks && !requestsWithTasksPreviouslyFetched}\n              migrationsFilter={migrationsFilter}\n              setMigrationsFilterAction={setMigrationsFilterAction}\n            />\n          </CardGrid.Col>\n        </Card.HeightMatching>\n      </div>\n    );\n  };\n\n  redirectTo = path => this.props.redirectTo(path);\n\n  render() {\n    const {\n      isFetchingProviders,\n      hasSufficientProviders,\n      mappingWizardVisible,\n      planWizardVisible,\n      editPlanNameModalVisible,\n      showEditPlanNameModalAction,\n      hideEditPlanNameModalAction,\n      transformationMappings,\n      isFetchingTransformationMappings,\n      transformationPlans,\n      allRequestsWithTasks,\n      reloadCard,\n      isFetchingAllRequestsWithTasks,\n      requestsWithTasksPreviouslyFetched,\n      notStartedTransformationPlans,\n      activeTransformationPlans,\n      serviceTemplatePlaybooks,\n      finishedTransformationPlans,\n      isCreatingTransformationPlanRequest,\n      migrationsFilter,\n      confirmModalVisible,\n      confirmModalOptions,\n      showConfirmModalAction,\n      hideConfirmModalAction,\n      fetchTransformationPlansAction,\n      fetchTransformationPlansUrl,\n      fetchArchivedTransformationPlansUrl,\n      archivedTransformationPlans,\n      allArchivedPlanRequestsWithTasks,\n      archiveTransformationPlanAction,\n      archiveTransformationPlanUrl,\n      deleteTransformationPlanAction,\n      deleteTransformationPlanUrl,\n      isFetchingTransformationPlans,\n      isFetchingArchivedTransformationPlans,\n      addNotificationAction,\n      toggleScheduleMigrationModal,\n      scheduleMigrationModal,\n      scheduleMigrationPlan,\n      scheduleMigration,\n      fetchTransformationMappingsUrl,\n      fetchTransformationMappingsAction,\n      openMappingWizardOnTransitionAction,\n      setMigrationsFilterAction,\n      initialMigrationsFilterSet,\n      acknowledgeDeniedPlanRequestAction,\n      isEditingPlanRequest,\n      cancelPlanRequestAction,\n      isCancellingPlanRequest,\n      requestsProcessingCancellation\n    } = this.props;\n\n    const mainContent = (\n      <React.Fragment>\n        <Spinner\n          loading={\n            !requestsWithTasksPreviouslyFetched &&\n            !this.hasMadeInitialPlansFetch &&\n            (isFetchingAllRequestsWithTasks ||\n              isFetchingProviders ||\n              isFetchingTransformationPlans ||\n              isFetchingArchivedTransformationPlans ||\n              isFetchingTransformationMappings)\n          }\n          style={{ marginTop: 200 }}\n        >\n          {hasSufficientProviders ? (\n            !!transformationMappings.length || !!transformationPlans.length || !!archivedTransformationPlans.length ? (\n              <Migrations\n                activeFilter={migrationsFilter}\n                initialMigrationsFilterSet={initialMigrationsFilterSet}\n                setMigrationsFilterAction={setMigrationsFilterAction}\n                transformationPlans={transformationPlans}\n                allRequestsWithTasks={allRequestsWithTasks}\n                archivedTransformationPlans={archivedTransformationPlans}\n                allArchivedPlanRequestsWithTasks={allArchivedPlanRequestsWithTasks}\n                reloadCard={reloadCard}\n                notStartedPlans={notStartedTransformationPlans}\n                activeTransformationPlans={activeTransformationPlans}\n                serviceTemplatePlaybooks={serviceTemplatePlaybooks}\n                finishedTransformationPlans={finishedTransformationPlans}\n                createMigrationPlanClick={this.showPlanWizardOrError}\n                createTransformationPlanRequestClick={this.createTransformationPlanRequest}\n                isCreatingTransformationPlanRequest={isCreatingTransformationPlanRequest}\n                redirectTo={this.redirectTo}\n                showConfirmModalAction={showConfirmModalAction}\n                hideConfirmModalAction={hideConfirmModalAction}\n                fetchTransformationPlansAction={fetchTransformationPlansAction}\n                fetchTransformationPlansUrl={fetchTransformationPlansUrl}\n                fetchArchivedTransformationPlansUrl={fetchArchivedTransformationPlansUrl}\n                isFetchingTransformationPlans={isFetchingTransformationPlans}\n                isFetchingArchivedTransformationPlans={isFetchingArchivedTransformationPlans}\n                isFetchingAllRequestsWithTasks={isFetchingAllRequestsWithTasks}\n                archiveTransformationPlanAction={archiveTransformationPlanAction}\n                archiveTransformationPlanUrl={archiveTransformationPlanUrl}\n                deleteTransformationPlanAction={deleteTransformationPlanAction}\n                deleteTransformationPlanUrl={deleteTransformationPlanUrl}\n                addNotificationAction={addNotificationAction}\n                toggleScheduleMigrationModal={toggleScheduleMigrationModal}\n                scheduleMigrationModal={scheduleMigrationModal}\n                scheduleMigrationPlan={scheduleMigrationPlan}\n                scheduleMigration={scheduleMigration}\n                showPlanWizardEditModeAction={this.showPlanWizardEditModeOrError}\n                fetchTransformationMappingsUrl={fetchTransformationMappingsUrl}\n                fetchTransformationMappingsAction={fetchTransformationMappingsAction}\n                showEditPlanNameModalAction={showEditPlanNameModalAction}\n                acknowledgeDeniedPlanRequestAction={acknowledgeDeniedPlanRequestAction}\n                isEditingPlanRequest={isEditingPlanRequest}\n                cancelPlanRequestAction={cancelPlanRequestAction}\n                isCancellingPlanRequest={isCancellingPlanRequest}\n                requestsProcessingCancellation={requestsProcessingCancellation}\n              />\n            ) : (\n              <ShowWizardEmptyState\n                description={__('Create an infrastructure mapping to later be used by a migration plan')}\n                buttonText={__('Create Infrastructure Mapping')}\n                showWizardAction={() => {\n                  this.redirectTo('/mappings');\n                  openMappingWizardOnTransitionAction();\n                }}\n                className=\"full-page-empty\"\n              />\n            )\n          ) : (\n            <ShowWizardEmptyState\n              description={\n                __('The source and target providers must be configured before attempting a migration') // prettier-ignore\n              }\n              buttonText={__('Configure Providers')}\n              buttonHref=\"/ems_infra/show_list\"\n              className=\"full-page-empty\"\n            />\n          )}\n        </Spinner>\n        <ConfirmModal show={confirmModalVisible} onCancel={hideConfirmModalAction} {...confirmModalOptions} />\n        <EditPlanNameModal\n          editPlanNameModalVisible={editPlanNameModalVisible}\n          hideEditPlanNameModalAction={hideEditPlanNameModalAction}\n          transformationPlans={transformationPlans}\n          archivedTransformationPlans={archivedTransformationPlans}\n          fetchTransformationPlansAction={fetchTransformationPlansAction}\n          fetchTransformationPlansUrl={fetchTransformationPlansUrl}\n          fetchArchivedTransformationPlansUrl={fetchArchivedTransformationPlansUrl}\n        />\n      </React.Fragment>\n    );\n\n    const inProgressCardsVisible =\n      migrationsFilter === MIGRATIONS_FILTERS.inProgress && activeTransformationPlans.length > 0;\n\n    const emptyStateVisible =\n      (migrationsFilter === MIGRATIONS_FILTERS.notStarted && notStartedTransformationPlans.length === 0) ||\n      (migrationsFilter === MIGRATIONS_FILTERS.inProgress && activeTransformationPlans.length === 0) ||\n      (migrationsFilter === MIGRATIONS_FILTERS.completed && finishedTransformationPlans.length === 0) ||\n      (migrationsFilter === MIGRATIONS_FILTERS.archived && archivedTransformationPlans.length === 0);\n\n    // Full-height grey background (.cards-pf) for in-progress cards and empty states, otherwise only grey behind aggregate cards\n    const overviewContent =\n      inProgressCardsVisible || emptyStateVisible ? (\n        <div\n          className=\"row cards-pf\"\n          style={{ overflow: 'auto', overflowX: 'hidden', paddingBottom: 50, height: '100%' }}\n        >\n          {this.renderAggregateDataCards()}\n          {mainContent}\n        </div>\n      ) : (\n        <div className=\"row\" style={{ overflow: 'auto', overflowX: 'hidden', paddingBottom: 50, height: '100%' }}>\n          <div className=\"row cards-pf\" style={{ marginLeft: 0, marginRight: 0 }}>\n            {this.renderAggregateDataCards()}\n          </div>\n          <div className=\"row\" style={{ marginLeft: 0, marginRight: 0 }}>\n            {mainContent}\n          </div>\n        </div>\n      );\n\n    const toolbarContent = (\n      <Toolbar>\n        <Breadcrumb.Item active>{__('Compute')}</Breadcrumb.Item>\n        <Breadcrumb.Item active>{__('Migration')}</Breadcrumb.Item>\n        <Breadcrumb.Item active>\n          <strong>{__('Migration Plans')}</strong>\n        </Breadcrumb.Item>\n      </Toolbar>\n    );\n\n    return (\n      <React.Fragment>\n        {toolbarContent}\n        {overviewContent}\n        {mappingWizardVisible && this.mappingWizard}\n        {planWizardVisible && this.planWizard}\n      </React.Fragment>\n    );\n  }\n}\nOverview.propTypes = {\n  store: PropTypes.object,\n  showMappingWizardAction: PropTypes.func,\n  showPlanWizardAction: PropTypes.func,\n  addNotificationAction: PropTypes.func,\n  mappingWizardVisible: PropTypes.bool,\n  planWizardVisible: PropTypes.bool,\n  editPlanNameModalVisible: PropTypes.bool,\n  showEditPlanNameModalAction: PropTypes.func,\n  hideEditPlanNameModalAction: PropTypes.func,\n  transformationPlans: PropTypes.array,\n  allRequestsWithTasks: PropTypes.array,\n  reloadCard: PropTypes.bool,\n  fetchTransformationPlansUrl: PropTypes.string,\n  fetchTransformationPlansAction: PropTypes.func,\n  isFetchingAllRequestsWithTasks: PropTypes.bool,\n  requestsWithTasksPreviouslyFetched: PropTypes.bool,\n  notStartedTransformationPlans: PropTypes.array,\n  activeTransformationPlans: PropTypes.array,\n  finishedTransformationPlans: PropTypes.array,\n  transformationMappings: PropTypes.array,\n  fetchTransformationMappingsUrl: PropTypes.string,\n  fetchTransformationMappingsAction: PropTypes.func,\n  isFetchingTransformationMappings: PropTypes.bool,\n  isRejectedTransformationMappings: PropTypes.bool,\n  createTransformationPlanRequestAction: PropTypes.func,\n  isCreatingTransformationPlanRequest: PropTypes.string,\n  isContinuingToPlan: PropTypes.bool,\n  planWizardId: PropTypes.string,\n  continueToPlanAction: PropTypes.func,\n  showPlanWizardEditModeAction: PropTypes.func,\n  migrationsFilter: PropTypes.string,\n  setMigrationsFilterAction: PropTypes.func,\n  retryMigrationAction: PropTypes.func,\n  history: PropTypes.object,\n  yesToDeleteInfrastructureMappingAction: PropTypes.func,\n  deleteInfrastructureMappingAction: PropTypes.func,\n  yesToDeleteInfrastructureMapping: PropTypes.bool,\n  fetchProvidersAction: PropTypes.func,\n  fetchProvidersUrl: PropTypes.string,\n  isFetchingProviders: PropTypes.bool,\n  hasSufficientProviders: PropTypes.bool,\n  confirmModalVisible: PropTypes.bool,\n  confirmModalOptions: PropTypes.object,\n  showConfirmModalAction: PropTypes.func,\n  hideConfirmModalAction: PropTypes.func,\n  fetchArchivedTransformationPlansUrl: PropTypes.string,\n  archivedTransformationPlans: PropTypes.array,\n  allArchivedPlanRequestsWithTasks: PropTypes.array,\n  isFetchingTransformationPlans: PropTypes.bool,\n  isFetchingArchivedTransformationPlans: PropTypes.string,\n  archiveTransformationPlanAction: PropTypes.func,\n  archiveTransformationPlanUrl: PropTypes.string,\n  deleteTransformationPlanAction: PropTypes.func,\n  deleteTransformationPlanUrl: PropTypes.string,\n  toggleScheduleMigrationModal: PropTypes.func,\n  scheduleMigrationModal: PropTypes.bool,\n  scheduleMigrationPlan: PropTypes.object,\n  scheduleMigration: PropTypes.func,\n  fetchServiceTemplateAnsiblePlaybooksAction: PropTypes.func,\n  fetchServiceTemplateAnsiblePlaybooksUrl: PropTypes.string,\n  serviceTemplatePlaybooks: PropTypes.array,\n  redirectTo: PropTypes.func.isRequired,\n  openMappingWizardOnTransitionAction: PropTypes.func,\n  initialMigrationsFilterSet: PropTypes.bool,\n  acknowledgeDeniedPlanRequestAction: PropTypes.func,\n  isEditingPlanRequest: PropTypes.bool,\n  cancelPlanRequestAction: PropTypes.func,\n  isCancellingPlanRequest: PropTypes.bool,\n  requestsProcessingCancellation: PropTypes.array,\n  fetchCloudTenantsAction: PropTypes.func,\n  fetchCloudTenantsUrl: PropTypes.string\n};\n\nOverview.defaultProps = {\n  archiveTransformationPlanUrl: '/api/service_templates',\n  deleteTransformationPlanUrl: '/api/service_templates',\n  fetchCloudTenantsUrl: FETCH_CLOUD_TENANTS_URL,\n  fetchTransformationMappingsUrl: FETCH_TRANSFORMATION_MAPPINGS_URL,\n  fetchTransformationPlansUrl: FETCH_TRANSFORMATION_PLANS_URL,\n  fetchServiceTemplateAnsiblePlaybooksUrl:\n    '/api/service_templates/?' +\n    \"filter[]=type='ServiceTemplateAnsiblePlaybook'\" +\n    '&expand=resources' +\n    '&attributes=name,description,created_at',\n  fetchArchivedTransformationPlansUrl: FETCH_ARCHIVED_TRANSFORMATION_PLANS_URL,\n  fetchProvidersUrl: FETCH_V2V_PROVIDERS_URL\n};\n\nexport default Overview;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Redirect, Route } from 'react-router-dom';\nimport { links } from './config';\nimport { componentSettings } from '../../components';\nimport componentRegistry from '../../components/componentRegistry';\n\nconst Routes = ({ store }) =>\n  links.map(({ path, component, redirect }) => {\n    if (typeof redirect !== 'undefined') {\n      return <Route exact key={path} path={path} render={() => <Redirect to={redirect} />} />;\n    }\n    const coreComponent = componentSettings(component);\n    if (coreComponent) {\n      const markup = componentRegistry.markup(coreComponent.name, coreComponent.data, store);\n      return (\n        <Route\n          exact\n          key={path}\n          path={`/${path}`}\n          render={props => {\n            if (props.match.isExact) {\n              return (\n                <React.Fragment>\n                  {componentRegistry.markup(coreComponent.name, { ...coreComponent.data, ...props }, store)}\n                </React.Fragment>\n              );\n            }\n            return markup;\n          }}\n        />\n      );\n    }\n    return <Route exact key={path} path={`/${path}`} />;\n  });\n\nRoutes.propTypes = {\n  store: PropTypes.object\n};\nRoutes.defaultProps = {\n  store: {}\n};\nexport default Routes;\n","import React from 'react';\nimport { Icon } from 'patternfly-react';\n\nexport const V2V_SET_PLANS_BODY = 'V2V_SET_PLANS_BODY';\nexport const V2V_SET_PLAN_SCHEDULE = 'V2V_SET_PLAN_SCHEDULE';\nexport const V2V_PLAN_WIZARD_SHOW_ALERT = 'V2V_PLAN_WIZARD_SHOW_ALERT';\nexport const V2V_PLAN_WIZARD_HIDE_ALERT = 'V2V_PLAN_WIZARD_HIDE_ALERT';\n\nexport const stepIDs = {\n  generalStep: 'planWizardGeneralStep',\n  vmStep: 'planWizardVMStep',\n  instancePropertiesStep: 'planWizardInstancePropertiesStep',\n  advancedOptionsStep: 'planWizardAdvancedOptionsStep',\n  scheduleStep: 'planWizardScheduleStep',\n  resultsStep: 'planWizardResultsStep'\n};\n\nexport const overwriteCsvConfirmModalProps = {\n  title: __('Overwrite Import File'),\n  body: (\n    <React.Fragment>\n      <p>{__('Importing a new VM list file will overwrite the contents of the existing list.')}</p>\n      <p>{__('Are you sure you want to import a new file?')}</p>\n    </React.Fragment>\n  ),\n  icon: <Icon className=\"confirm-warning-icon\" type=\"pf\" name=\"warning-triangle-o\" />,\n  confirmButtonLabel: __('Import'),\n  dialogClassName: 'plan-wizard-confirm-modal',\n  backdropClassName: 'plan-wizard-confirm-backdrop'\n};\n","import React from 'react';\nimport { ConnectedRouter } from 'connected-react-router';\nimport { connect } from 'react-redux';\nimport { Spinner } from 'patternfly-react';\nimport PropTypes from 'prop-types';\nimport Routes from './config/Routes';\nimport NotificationList from './screens/App/common/NotificationList';\nimport createReducers from '../redux/reducers';\nimport { updateVerticalMenu } from '../common/menu';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    ManageIQ.redux.addReducer(createReducers());\n    updateVerticalMenu(ManageIQ.redux.store.getState().router.location.pathname);\n  }\n\n  render() {\n    if (!this.props.isLoaded)\n      return (\n        <div className=\"row cards-pf\">\n          <Spinner loading />\n        </div>\n      );\n    return (\n      <ConnectedRouter history={ManageIQ.redux.history}>\n        <React.Fragment>\n          <NotificationList />\n          <Routes store={ManageIQ.redux.store} />\n        </React.Fragment>\n      </ConnectedRouter>\n    );\n  }\n\n  componentDidMount() {\n    this.unlisten = ManageIQ.redux.history.listen(location => {\n      updateVerticalMenu(location.pathname);\n    });\n  }\n\n  componentWillUnmount() {\n    this.unlisten();\n  }\n}\n\nApp.propTypes = {\n  isLoaded: PropTypes.bool.isRequired\n};\n\nconst mapStateToProps = ({ overview }) => ({ isLoaded: !!overview });\n\nexport default connect(mapStateToProps)(App);\n","import ReactDOM from 'react-dom';\nimport componentRegistry from './componentRegistry';\n\nexport function mount(component, selector, data = {}) {\n  const reactNode = document.querySelector(selector);\n\n  if (reactNode) {\n    ReactDOM.unmountComponentAtNode(reactNode);\n    ReactDOM.render(componentRegistry.markup(component, data), reactNode);\n  } else {\n    // eslint-disable-next-line no-console\n    console.log(`Cannot find '${selector}' element for mounting the '${component}'`);\n  }\n}\n","// todo: expose this from patternfly-react instead?\nexport const getDisplayName = Component => Component.displayName || Component.name || 'Component';\n","import { V2V_TARGET_PROVIDERS } from '../MappingWizardConstants';\n\nexport const getClusterOptions = clusterMappings => {\n  const sourceClustersWithAssociatedTargetClusters = clusterMappings.reduce(\n    (mappings, targetClusterWithSourceClusters) => {\n      const { nodes: sourceClusters, ...targetCluster } = targetClusterWithSourceClusters;\n      const sourceToTargetMappings = sourceClusters.map(sourceCluster => ({\n        sourceCluster,\n        targetCluster,\n        sourceClusterMappedToTargetCluster: {\n          name: `${sourceCluster.name} (${targetCluster.name})`,\n          id: sourceCluster.id\n        }\n      }));\n      return mappings.concat(sourceToTargetMappings);\n    },\n    []\n  );\n\n  return sourceClustersWithAssociatedTargetClusters.map(\n    ({ sourceClusterMappedToTargetCluster }) => sourceClusterMappedToTargetCluster\n  );\n};\n\nexport const multiProviderTargetLabel = (providerType, wizardStep) => {\n  switch (providerType) {\n    case V2V_TARGET_PROVIDERS[1].id:\n      switch (wizardStep) {\n        case 'cluster':\n          return __('Target Provider \\\\ Project');\n        case 'storage':\n          return __('Target Provider \\\\ Volume Type');\n        case 'network':\n          return __('Target Project \\\\ Network');\n        default:\n          return null;\n      }\n    default:\n      switch (wizardStep) {\n        case 'cluster':\n          return __('Target Provider \\\\ Datacenter \\\\ Cluster');\n        case 'storage':\n          return __('Target Datastores');\n        case 'network':\n          return __('Target Network');\n        default:\n          return null;\n      }\n  }\n};\n\nexport const updateMappings = (mappings, clusterStepMappings) =>\n  mappings.filter(mapping => {\n    const potentialAssociatedClusterStepMappings = clusterStepMappings.filter(\n      clusterStepMapping => clusterStepMapping.id === mapping.id\n    );\n\n    if (potentialAssociatedClusterStepMappings.length === 0) {\n      return false;\n    }\n\n    const associatedClusterMapping = potentialAssociatedClusterStepMappings.find(clusterStepMapping => {\n      const { nodes: sourceClusters } = clusterStepMapping;\n      const sourceClusterIds = sourceClusters.map(sourceCluster => sourceCluster.id);\n      const { nodes: mappedSourceStoragesOrNetworks } = mapping.nodes[0];\n\n      return mappedSourceStoragesOrNetworks.every(storageOrNetwork =>\n        sourceClusterIds.some(id => id === storageOrNetwork.sourceClusterId)\n      );\n    });\n\n    return associatedClusterMapping;\n  });\n","import { destroy } from 'redux-form';\n\nimport {\n  V2V_SET_TRANSFORMATIONS_BODY,\n  V2V_SHOW_WARNING_MODAL,\n  V2V_HIDE_WARNING_MODAL,\n  V2V_SHOW_ALERT,\n  V2V_HIDE_ALERT,\n  V2V_MAPPING_WIZARD_EXITED,\n  V2V_HIDE_MAPPING_WIZARD\n} from './MappingWizardConstants';\n\nexport const hideMappingWizardAction = () => dispatch => {\n  dispatch({\n    type: V2V_HIDE_MAPPING_WIZARD\n  });\n};\n\nexport const mappingWizardExitedAction = () => dispatch => {\n  dispatch({\n    type: V2V_MAPPING_WIZARD_EXITED\n  });\n\n  // Dispatch reset for all the wizard step forms here\n  dispatch(\n    destroy(\n      'mappingWizardGeneralStep',\n      'mappingWizardClustersStep',\n      'mappingWizardDatastoresStep',\n      'mappingWizardNetworksStep'\n    )\n  );\n};\n\nexport const setTransformationsBodyAction = body => dispatch => {\n  dispatch({\n    type: V2V_SET_TRANSFORMATIONS_BODY,\n    payload: body\n  });\n};\n\nexport const showWarningModalAction = sourceClustersWithoutMappings => dispatch => {\n  dispatch({\n    type: V2V_SHOW_WARNING_MODAL,\n    payload: sourceClustersWithoutMappings\n  });\n};\n\nexport const hideWarningModalAction = () => dispatch => {\n  dispatch({\n    type: V2V_HIDE_WARNING_MODAL\n  });\n};\n\nexport const showAlertAction = (alertText, alertType = 'error') => dispatch => {\n  dispatch({\n    type: V2V_SHOW_ALERT,\n    payload: { alertText, alertType }\n  });\n};\n\nexport const hideAlertAction = () => dispatch => {\n  dispatch({\n    type: V2V_HIDE_ALERT\n  });\n};\n","import React from 'react';\nimport { IntlProvider } from 'react-intl';\nimport { getDisplayName } from './helpers';\nimport i18n from './i18n';\n\nconst i18nProviderWrapperFactory = initialNow => WrappedComponent => {\n  const wrappedName = getDisplayName(WrappedComponent);\n\n  class I18nProviderWrapper extends React.Component {\n    state = { i18nLoaded: true };\n\n    render() {\n      if (!this.state.i18nLoaded) {\n        return <span />;\n      }\n      return (\n        <IntlProvider locale={i18n.locale} initialNow={initialNow}>\n          <WrappedComponent {...this.props} />\n        </IntlProvider>\n      );\n    }\n  }\n  I18nProviderWrapper.displayName = `I18nProviderWrapper(${wrappedName})`;\n\n  return I18nProviderWrapper;\n};\n\nexport { i18nProviderWrapperFactory };\n","import { FINISHED, ERROR } from './screens/ConversionHostsSettings/ConversionHostsSettingsConstants';\nimport { RHV, OPENSTACK } from '../../../../common/constants';\n\nexport const getFormValuesFromApiSettings = payload => ({\n  max_concurrent_tasks_per_host: payload.transformation.limits.max_concurrent_tasks_per_host,\n  max_concurrent_tasks_per_ems: payload.transformation.limits.max_concurrent_tasks_per_ems\n  /* FIXME: remove the comment once backend is ready\n  cpu_limit_per_host: payload.transformation.limits.cpu_limit_per_host,\n  network_limit_per_host: payload.transformation.limits.network_limit_per_host\n  */\n});\n\nexport const getApiSettingsFromFormValues = values => ({\n  transformation: {\n    limits: {\n      max_concurrent_tasks_per_host: values.max_concurrent_tasks_per_host,\n      max_concurrent_tasks_per_ems: values.max_concurrent_tasks_per_ems\n      /* FIXME: remove the comment once backend is ready\n      cpu_limit_per_host: values.cpu_limit_per_host,\n      network_limit_per_host: values.network_limit_per_host\n      */\n    }\n  }\n});\n\nexport const parseConversionHostTasksMetadata = tasks => {\n  // Example task name: \"Configuring a conversion_host: operation=enable resource=(name: ims-conversion-host type: ManageIQ::Providers::Openstack::CloudManager::Vm id: 42000000000113)\"\n  const taskNameRegex = /operation=(\\w+)\\s+resource=\\(name:\\s(.+)\\stype:\\s+([\\w:]+)\\s+id:\\s(.+)\\)/;\n  if (!tasks) return [];\n  return tasks.map(task => {\n    const result = taskNameRegex.exec(task.name);\n    if (!result) return { ...task, meta: {} };\n    const [, operation, resourceName, resourceType, resourceId] = result;\n    return {\n      ...task,\n      meta: {\n        isTask: true, // To distinguish when part of combinedListItems\n        operation,\n        resourceName,\n        resourceType,\n        resourceId,\n        unparsedTaskName: task.name\n      },\n      name: resourceName // For sorting and filtering\n    };\n  });\n};\n\nexport const indexConversionHostTasksByResource = tasksWithMetadata => {\n  const tasksByResource = {};\n  tasksWithMetadata.forEach(task => {\n    if (!task.meta) return;\n    const { resourceType: type, resourceId: id, operation } = task.meta;\n    if (!tasksByResource[type]) tasksByResource[type] = {};\n    if (!tasksByResource[type][id]) tasksByResource[type][id] = {};\n    if (!tasksByResource[type][id][operation]) tasksByResource[type][id][operation] = [];\n    tasksByResource[type][id][operation].push(task);\n  });\n  return tasksByResource;\n};\n\nexport const getActiveConversionHostEnableTasks = (tasksWithMetadata, conversionHosts) => {\n  // Start with the latest task for each resource (filter out old failures if a new task exists)\n  const mostRecentTasks = tasksWithMetadata.filter((task, index) =>\n    tasksWithMetadata.every(\n      (otherTask, otherIndex) =>\n        otherIndex === index ||\n        otherTask.meta.resourceType !== task.meta.resourceType ||\n        otherTask.meta.resourceId !== task.meta.resourceId ||\n        otherTask.updated_on <= task.updated_on\n    )\n  );\n  // Filter to only enable tasks that are either unfinished or finished with errors, and don't match any enabled hosts.\n  return mostRecentTasks.filter(\n    task =>\n      task.meta.operation === 'enable' &&\n      (task.state !== FINISHED || task.status === ERROR) &&\n      conversionHosts.every(\n        ch => ch.resource.type !== task.meta.resourceType || ch.resource.id !== task.meta.resourceId\n      )\n  );\n};\n\nexport const attachTasksToConversionHosts = (conversionHosts, tasksByResource) =>\n  conversionHosts.filter(conversionHost => !!conversionHost.resource).map(conversionHost => {\n    const { type, id } = conversionHost.resource;\n    return {\n      ...conversionHost,\n      meta: {\n        tasksByOperation: (tasksByResource[type] && tasksByResource[type][id]) || {}\n      }\n    };\n  });\n\nexport const getCombinedConversionHostListItems = (conversionHosts, tasksWithMetadata, tasksByResource) => {\n  const activeEnableTasks = getActiveConversionHostEnableTasks(tasksWithMetadata, conversionHosts);\n  const conversionHostsWithTasks = attachTasksToConversionHosts(conversionHosts, tasksByResource);\n  return [...activeEnableTasks, ...conversionHostsWithTasks];\n};\n\nexport const getConversionHostSshKeyInfoMessage = selectedProviderType => {\n  if (selectedProviderType === RHV) {\n    return __('RHV-M deploys a common SSH public key on all hosts when configuring them. This allows commands and playbooks to be run from RHV-M. The associated private key is in the file /etc/pki/ovirt-engine/keys/engine_id_rsa on RHV-M.'); // prettier-ignore\n  }\n  if (selectedProviderType === OPENSTACK) {\n    return __('This is the private key file used to connect to the conversion host instance for the OpenStack User.');\n  }\n  return '';\n};\n","import { reset } from 'redux-form';\nimport URI from 'urijs';\nimport API from '../../../../common/API';\n\nimport {\n  V2V_FETCH_SERVERS,\n  V2V_FETCH_SETTINGS,\n  V2V_PATCH_SETTINGS,\n  FETCH_V2V_CONVERSION_HOSTS,\n  FETCH_V2V_CONVERSION_HOST_TASKS,\n  SHOW_V2V_CONVERSION_HOST_WIZARD,\n  HIDE_V2V_CONVERSION_HOST_WIZARD,\n  V2V_CONVERSION_HOST_WIZARD_EXITED,\n  POST_V2V_CONVERSION_HOSTS,\n  SET_V2V_CONVERSION_HOST_TO_DELETE,\n  SHOW_V2V_CONVERSION_HOST_DELETE_MODAL,\n  HIDE_V2V_CONVERSION_HOST_DELETE_MODAL,\n  DELETE_V2V_CONVERSION_HOST,\n  SET_V2V_CONVERSION_HOST_TASK_TO_RETRY,\n  SHOW_V2V_CONVERSION_HOST_RETRY_MODAL,\n  HIDE_V2V_CONVERSION_HOST_RETRY_MODAL,\n  V2V_CONVERSION_HOST_RETRY_MODAL_EXITED\n} from './SettingsConstants';\nimport { getApiSettingsFromFormValues } from './helpers';\nimport { stepIDs } from './screens/ConversionHostsSettings/components/ConversionHostWizard/ConversionHostWizardConstants';\n\nconst _getServersActionCreator = url => dispatch =>\n  dispatch({\n    type: V2V_FETCH_SERVERS,\n    payload: API.get(url)\n  });\n\nexport const fetchServersAction = url => {\n  const uri = new URI(url);\n  return _getServersActionCreator(uri.toString());\n};\n\nconst _getSettingsActionCreator = url => dispatch =>\n  dispatch({\n    type: V2V_FETCH_SETTINGS,\n    payload: API.get(url)\n  });\n\nexport const fetchSettingsAction = url => {\n  const uri = new URI(url);\n  return _getSettingsActionCreator(uri.toString());\n};\n\nconst _patchSettingsActionCreator = (urls, settingsFormValues) => dispatch => {\n  const patchBody = getApiSettingsFromFormValues(settingsFormValues);\n  return dispatch({\n    type: V2V_PATCH_SETTINGS,\n    payload: new Promise((resolve, reject) => {\n      Promise.all(urls.map(url => API.patch(url, patchBody)))\n        .then(payloads => resolve(payloads[0]))\n        .catch(e => reject(e));\n    })\n  });\n};\n\nexport const patchSettingsAction = (servers, newSettings) => {\n  const settingsUrls = servers.map(server => new URI(`${server.href}/settings`).toString());\n  return _patchSettingsActionCreator(settingsUrls, newSettings);\n};\n\nconst _getConversionHostsActionCreator = url => dispatch =>\n  dispatch({\n    type: FETCH_V2V_CONVERSION_HOSTS,\n    payload: API.get(url)\n  });\n\nexport const fetchConversionHostsAction = url => {\n  const uri = new URI(url);\n  return _getConversionHostsActionCreator(uri.toString());\n};\n\nconst _getConversionHostTasksActionCreator = url => dispatch =>\n  dispatch({\n    type: FETCH_V2V_CONVERSION_HOST_TASKS,\n    payload: API.get(url)\n  });\n\nexport const fetchConversionHostTasksAction = url => {\n  const uri = new URI(url);\n  return _getConversionHostTasksActionCreator(uri.toString());\n};\n\nexport const showConversionHostWizardAction = () => dispatch => dispatch({ type: SHOW_V2V_CONVERSION_HOST_WIZARD });\n\nexport const hideConversionHostWizardAction = () => dispatch => dispatch({ type: HIDE_V2V_CONVERSION_HOST_WIZARD });\n\nexport const conversionHostWizardExitedAction = () => dispatch => {\n  dispatch({ type: V2V_CONVERSION_HOST_WIZARD_EXITED });\n  // Dispatch reset for all the wizard step forms here\n  Object.values(stepIDs).forEach(formName => {\n    dispatch(reset(formName));\n  });\n};\n\nconst _postConversionHostsActionCreator = (url, postBodies) => dispatch =>\n  dispatch({\n    type: POST_V2V_CONVERSION_HOSTS,\n    payload: Promise.all(postBodies.map(body => API.post(url, body)))\n  });\n\nexport const postConversionHostsAction = (url, postBodies) =>\n  _postConversionHostsActionCreator(new URI(url).toString(), postBodies);\n\nexport const setHostToDeleteAction = host => ({\n  type: SET_V2V_CONVERSION_HOST_TO_DELETE,\n  payload: host\n});\n\nexport const showConversionHostDeleteModalAction = () => ({\n  type: SHOW_V2V_CONVERSION_HOST_DELETE_MODAL\n});\n\nexport const hideConversionHostDeleteModalAction = () => ({\n  type: HIDE_V2V_CONVERSION_HOST_DELETE_MODAL\n});\n\nexport const _deleteConversionHostActionCreator = (url, host) => dispatch =>\n  dispatch({\n    type: DELETE_V2V_CONVERSION_HOST,\n    payload: new Promise((resolve, reject) => {\n      API.post(`${url}/${host.id}`, {\n        action: 'delete'\n      })\n        .then(response => {\n          resolve(response);\n        })\n        .catch(e => reject(e));\n    })\n  });\n\nexport const deleteConversionHostAction = (url, host) =>\n  _deleteConversionHostActionCreator(new URI(url).toString(), host);\n\nexport const setConversionHostTaskToRetryAction = task => ({\n  type: SET_V2V_CONVERSION_HOST_TASK_TO_RETRY,\n  payload: task\n});\n\nexport const showConversionHostRetryModalAction = () => ({\n  type: SHOW_V2V_CONVERSION_HOST_RETRY_MODAL\n});\n\nexport const hideConversionHostRetryModalAction = () => ({\n  type: HIDE_V2V_CONVERSION_HOST_RETRY_MODAL\n});\n\nexport const conversionHostRetryModalExitedAction = () => ({\n  type: V2V_CONVERSION_HOST_RETRY_MODAL_EXITED\n});\n","import URI from 'urijs';\n\nimport API from '../../../../common/API';\nimport { V2V_NOTIFICATION_ADD } from '../common/NotificationList/NotificationConstants';\nimport { formatDateTime } from '../../../../components/dates/MomentDate';\nimport {\n  ARCHIVE_TRANSFORMATION_PLAN,\n  DELETE_TRANSFORMATION_PLAN,\n  CREATE_V2V_TRANSFORMATION_PLAN_REQUEST,\n  FETCH_V2V_ALL_ARCHIVED_PLAN_REQUESTS_WITH_TASKS,\n  FETCH_V2V_SERVICE_TEMPLATE_ANSIBLE_PLAYBOOKS,\n  FETCH_V2V_ALL_REQUESTS_WITH_TASKS,\n  FETCH_V2V_ARCHIVED_TRANSFORMATION_PLANS,\n  FETCH_V2V_TRANSFORMATION_MAPPINGS,\n  FETCH_V2V_TRANSFORMATION_PLANS,\n  HIDE_CONFIRM_MODAL,\n  SHOW_CONFIRM_MODAL,\n  SHOW_PLAN_WIZARD,\n  SHOW_EDIT_PLAN_TITLE_MODAL,\n  HIDE_EDIT_PLAN_TITLE_MODAL,\n  V2V_RETRY_MIGRATION,\n  V2V_SCHEDULE_MIGRATION,\n  V2V_SET_MIGRATIONS_FILTER,\n  V2V_TOGGLE_SCHEDULE_MIGRATION_MODAL,\n  SHOW_PLAN_WIZARD_EDIT_MODE,\n  V2V_EDIT_PLAN_REQUEST,\n  V2V_CANCEL_PLAN_REQUEST\n} from './OverviewConstants';\nimport { OPEN_V2V_MAPPING_WIZARD_ON_MOUNT } from '../Mappings/MappingsConstants';\n\nexport { fetchCloudTenantsAction } from '../Mappings/MappingsActions';\n\nexport const showConfirmModalAction = modalOptions => ({\n  type: SHOW_CONFIRM_MODAL,\n  payload: modalOptions\n});\n\nexport const hideConfirmModalAction = () => ({\n  type: HIDE_CONFIRM_MODAL\n});\n\nexport const showPlanWizardAction = id => dispatch => {\n  dispatch({\n    type: SHOW_PLAN_WIZARD,\n    payload: { id }\n  });\n};\n\nexport const showPlanWizardEditModeAction = id => dispatch => {\n  dispatch({\n    type: SHOW_PLAN_WIZARD_EDIT_MODE,\n    editingPlanId: id\n  });\n};\n\nexport const showEditPlanNameModalAction = id => dispatch => {\n  dispatch({\n    type: SHOW_EDIT_PLAN_TITLE_MODAL,\n    editingPlanId: id\n  });\n};\n\nexport const hideEditPlanNameModalAction = () => dispatch => {\n  dispatch({\n    type: HIDE_EDIT_PLAN_TITLE_MODAL\n  });\n};\n\nconst _createTransformationPlanRequestActionCreator = url => dispatch =>\n  dispatch({\n    type: CREATE_V2V_TRANSFORMATION_PLAN_REQUEST,\n    payload: {\n      promise: API.post(url, { action: 'order' }),\n      data: url\n    }\n  });\n\nexport const createTransformationPlanRequestAction = url => {\n  const uri = new URI(url);\n  return _createTransformationPlanRequestActionCreator(uri.toString());\n};\n\nconst _getTransformationMappingsActionCreator = url => dispatch =>\n  dispatch({\n    type: FETCH_V2V_TRANSFORMATION_MAPPINGS,\n    payload: API.get(url)\n  });\n\nexport const fetchTransformationMappingsAction = url => {\n  const uri = new URI(url);\n  return _getTransformationMappingsActionCreator(uri.toString());\n};\n\nconst fetchTasksForAllRequests = (allRequests, archived, dispatch) => {\n  if (allRequests.length > 0) {\n    dispatch({\n      type: archived ? FETCH_V2V_ALL_ARCHIVED_PLAN_REQUESTS_WITH_TASKS : FETCH_V2V_ALL_REQUESTS_WITH_TASKS,\n      payload: new Promise((resolve, reject) => {\n        API.post('/api/requests?expand=resource&attributes=miq_request_tasks,service_template', {\n          action: 'query',\n          resources: allRequests\n        })\n          .then(responseRequestsWithTasks => {\n            resolve(responseRequestsWithTasks);\n          })\n          .catch(e => reject(e));\n      })\n    });\n  }\n};\n\nconst collectAllRequests = plan => plan.miq_requests.map(request => Object.assign({}, { href: request.href }));\n\nconst _getTransformationPlansActionCreator = (url, archived) => dispatch =>\n  dispatch({\n    type: archived ? FETCH_V2V_ARCHIVED_TRANSFORMATION_PLANS : FETCH_V2V_TRANSFORMATION_PLANS,\n    payload: new Promise((resolve, reject) => {\n      API.get(url)\n        .then(response => {\n          resolve(response);\n          const allPlansWithRequests = response.data.resources;\n\n          const allRequests = [];\n          const mergedRequests = [].concat(\n            ...allRequests.concat(allPlansWithRequests.map(plan => collectAllRequests(plan)))\n          );\n\n          fetchTasksForAllRequests(mergedRequests, archived, dispatch);\n        })\n        .catch(e => reject(e));\n    })\n  });\n\nexport const fetchTransformationPlansAction = ({ url, archived }) => {\n  const uri = new URI(url);\n  return _getTransformationPlansActionCreator(uri.toString(), archived);\n};\n\nconst _getServiceTemplateAnsiblePlaybooksActionCreator = url => dispatch =>\n  dispatch({\n    type: FETCH_V2V_SERVICE_TEMPLATE_ANSIBLE_PLAYBOOKS,\n    payload: API.get(url)\n  });\n\nexport const fetchServiceTemplateAnsiblePlaybooksAction = url => {\n  const uri = new URI(url);\n  return _getServiceTemplateAnsiblePlaybooksActionCreator(uri.toString());\n};\n\nexport const setMigrationsFilterAction = (filter, additionalActions) => dispatch => {\n  dispatch({\n    type: V2V_SET_MIGRATIONS_FILTER,\n    payload: filter\n  });\n\n  if (additionalActions) {\n    for (const type in additionalActions) {\n      if ({}.hasOwnProperty.call(additionalActions, type)) {\n        dispatch({\n          type,\n          payload: additionalActions[type]\n        });\n      }\n    }\n  }\n};\n\nexport const retryMigrationAction = planId => ({\n  type: V2V_RETRY_MIGRATION,\n  payload: planId\n});\n\nconst _archiveTransformationPlanActionCreator = url => dispatch =>\n  dispatch({\n    type: ARCHIVE_TRANSFORMATION_PLAN,\n    payload: API.post(url, { action: 'archive' })\n  });\n\nexport const archiveTransformationPlanAction = (url, id) => {\n  const uri = new URI(`${url}/${id}`);\n  return _archiveTransformationPlanActionCreator(uri.toString());\n};\n\nconst _deleteTransformationPlanActionCreator = url => dispatch =>\n  dispatch({\n    type: DELETE_TRANSFORMATION_PLAN,\n    payload: API.post(url, { action: 'delete' })\n  });\n\nexport const deleteTransformationPlanAction = (url, id) => {\n  const uri = new URI(`${url}/${id}`);\n  return _deleteTransformationPlanActionCreator(uri.toString());\n};\n\nexport const toggleScheduleMigrationModal = plan => ({\n  type: V2V_TOGGLE_SCHEDULE_MIGRATION_MODAL,\n  payload: plan\n});\n\nexport const scheduleMigration = payload => dispatch =>\n  dispatch({\n    type: V2V_SCHEDULE_MIGRATION,\n    payload: new Promise((resolve, reject) => {\n      const {\n        scheduleTime,\n        plan: { id: planId }\n      } = payload;\n      const scheduleId = (payload.plan.schedules && payload.plan.schedules[0].id) || null;\n      let url = `/api/service_templates/${planId}`;\n      let body = {\n        action: 'order',\n        resource: {\n          schedule_time: scheduleTime\n        }\n      };\n      if (scheduleId) {\n        url = `${url}/schedules/${scheduleId}`;\n        body = scheduleTime\n          ? {\n              action: 'edit',\n              resource: {\n                run_at: { ...payload.plan.schedules[0].run_at, start_time: new Date(scheduleTime).toUTCString() }\n              }\n            }\n          : { action: 'delete' };\n      }\n      return API.post(url, body)\n        .then(response => {\n          resolve(response);\n          let msg = __('Migration successfully unscheduled');\n          if (scheduleTime) {\n            msg = sprintf(\n              __('Migration successfully scheduled for %s'),\n              formatDateTime(response.data.run_at.start_time)\n            );\n          }\n          dispatch({\n            type: V2V_NOTIFICATION_ADD,\n            message: msg,\n            notificationType: 'success',\n            actionEnabled: false\n          });\n        })\n        .catch(e => reject(e));\n    })\n  });\n\nexport const openMappingWizardOnTransitionAction = () => ({ type: OPEN_V2V_MAPPING_WIZARD_ON_MOUNT });\n\nconst _editPlanRequestActionCreator = ({ planRequestUrl, plansUrl, resource }) => dispatch =>\n  dispatch({\n    type: V2V_EDIT_PLAN_REQUEST,\n    payload: new Promise((resolve, reject) =>\n      API.post(planRequestUrl, { action: 'edit', resource })\n        .then(response => {\n          resolve(response);\n          fetchTransformationPlansAction({\n            url: plansUrl,\n            archived: false\n          })(dispatch);\n        })\n        .catch(e => reject(e))\n    )\n  });\n\nexport const editPlanRequestAction = ({ planRequestUrl, plansUrl, resource }) =>\n  _editPlanRequestActionCreator({\n    planRequestUrl: new URI(planRequestUrl).toString(),\n    plansUrl: new URI(plansUrl).toString(),\n    resource\n  });\n\nexport const acknowledgeDeniedPlanRequestAction = ({ plansUrl, planRequest }) =>\n  editPlanRequestAction({\n    planRequestUrl: planRequest.href,\n    plansUrl,\n    resource: {\n      options: {\n        ...planRequest.options,\n        denial_acknowledged: true\n      }\n    }\n  });\n\nconst _cancelPlanRequestActionCreator = url => dispatch =>\n  dispatch({\n    type: V2V_CANCEL_PLAN_REQUEST,\n    payload: {\n      promise: new Promise((resolve, reject) => {\n        API.post(url, { action: 'cancel' })\n          .then(response => resolve(response))\n          .catch(e => reject(e));\n      }),\n      data: url,\n      meta: { url }\n    }\n  });\n\nexport const cancelPlanRequestAction = (url, id) => _cancelPlanRequestActionCreator(new URI(`${url}/${id}`).toString());\n","import './polyfills';\nimport componentRegistry from '../components/componentRegistry';\nimport { mount } from '../components/mounter';\nimport App from '../react/';\nimport { coreComponents } from '../components';\n\ncomponentRegistry.registerMultiple(coreComponents);\n\nwindow.v2v = {\n  mount,\n  componentRegistry\n};\n\nManageIQ.component.addReact('manageiq-v2v', App);\n// Another way to mount the component is via JS - e.g.\n// v2v.mount('manageiq-v2v', '#reactRoot');\n","import { addLocaleData } from 'react-intl';\n\n// hard wired to english for now\nimport en from 'react-intl/locale-data/en';\nimport fr from 'react-intl/locale-data/fr';\nimport es from 'react-intl/locale-data/es';\nimport ja from 'react-intl/locale-data/ja';\nimport zh_CN from 'react-intl/locale-data/zh';\n\nclass I18n {\n  constructor(locale, timezone) {\n    zh_CN[0].locale = 'zh_CN';\n    this.fallbackIntl = !global.Intl;\n\n    [this.locale] = locale.split('-');\n    this.timezone = this.fallbackIntl ? 'UTC' : timezone;\n\n    // this.loaded = false;\n    // this.ready = this.init();\n\n    // hard wired for now\n    addLocaleData([...en, ...fr, ...es, ...ja, ...zh_CN]);\n    this.loaded = true;\n  }\n\n  // todo: gather react-intl locale-data from the server asynchronously\n  // async init() {\n  //   await this.fetchIntl();\n  //   addLocaleData(await import(`react-intl/locale-data/${this.locale}`));\n  //   this.loaded = true;\n  // }\n\n  // async fetchIntl() {\n  //   if (this.fallbackIntl) {\n  //     global.Intl = await import('intl');\n  //     await import(`intl/locale-data/jsonp/${this.locale}`);\n  //   }\n  // }\n}\n\nconst [htmlElemnt] = document.getElementsByTagName('html');\nconst langAttr = htmlElemnt.getAttribute('lang') || 'en';\nconst timezoneAttr = htmlElemnt.getAttribute('data-timezone') || 'UTC';\n\nconst i18n = new I18n(langAttr, timezoneAttr);\n\nexport default i18n;\n","export const FETCH_V2V_PLAYBOOKS = 'FETCH_V2V_PLAYBOOKS';\nexport const SET_V2V_ADVANCED_OPTIONS_STEP_VMS = 'SET_V2V_ADVANCED_OPTIONS_STEP_VMS';\nexport const RESET_V2V_ADVANCED_OPTIONS_STEP_VMS = 'RESET_V2V_ADVANCED_OPTIONS_STEP_VMS';\n\nexport const FILTER_TYPES = [\n  {\n    id: 'name',\n    title: __('VM Name'),\n    placeholder: __('Filter by VM Name'),\n    filterType: 'text'\n  },\n  {\n    id: 'cluster',\n    title: __('Source Cluster'),\n    placeholder: __('Filter by Source Cluster'),\n    filterType: 'text'\n  }\n];\n","export const V2V_VALIDATE_VMS = 'V2V_VALIDATE_VMS';\nexport const V2V_VM_STEP_RESET = 'V2V_VM_STEP_RESET';\nexport const QUERY_V2V_PLAN_VMS = 'QUERY_V2V_PLAN_VMS';\n\nexport const V2V_VM_POST_VALIDATION_REASONS = {\n  conflict: __('VM is in conflict'),\n  empty_name: __('Empty name specified'),\n  in_other_plan: __('VM exists in a different migration plan'),\n  migrated: __('VM has already been migrated'),\n  not_exist: __('VM does not exist'),\n  ok: __('VM available for migration'),\n  duplicate: __('Duplicate VM'),\n  inactive: __('VM is inactive'),\n  no_info_available: __('VM unavailable for migration, no information available')\n};\n","export const FETCH_V2V_SOURCE_NETWORKS = 'FETCH_V2V_SOURCE_NETWORKS';\nexport const FETCH_V2V_TARGET_NETWORKS = 'FETCH_V2V_TARGET_NETWORKS';\nexport const FETCH_V2V_PUBLIC_CLOUD_NETWORKS = 'FETCH_V2V_PUBLIC_CLOUD_NETWORKS';\n\nexport const QUERY_ATTRIBUTES = {\n  source: 'lans,ext_management_system.name,v_parent_datacenter',\n  rhevm: 'lans,ext_management_system.name',\n  openstack: 'cloud_networks,ext_management_system.name'\n};\n\nexport const FETCH_NETWORK_URLS = {\n  source: '/api/clusters',\n  rhevm: '/api/clusters',\n  openstack: '/api/cloud_tenants',\n  public: '/api/providers'\n};\n\nexport const NETWORK_ATTRIBUTES = {\n  openstack: 'cloud_networks',\n  rhevm: 'lans'\n};\n\nexport const HAS_CLOUD_NETWORKS = {\n  openstack: true,\n  rhevm: false\n};\n","export const FETCH_V2V_SOURCE_DATASTORES = 'FETCH_V2V_SOURCE_DATASTORES';\nexport const FETCH_V2V_TARGET_DATASTORES = 'FETCH_V2V_TARGET_DATASTORES';\n\nexport const QUERY_ATTRIBUTES = {\n  source: 'storages,ext_management_system.name,v_parent_datacenter',\n  rhevm: 'storages,ext_management_system.name',\n  openstack: 'cloud_volume_types,ext_management_system.name'\n};\n\nexport const FETCH_STORAGE_URLS = {\n  source: '/api/clusters',\n  rhevm: '/api/clusters',\n  openstack: '/api/cloud_tenants'\n};\n\nexport const STORAGE_ATTRIBUTES = {\n  openstack: 'cloud_volume_types',\n  rhevm: 'storages'\n};\n","import { OPENSTACK, RHV } from '../../MappingWizardConstants';\n\nexport const FETCH_V2V_SOURCE_CLUSTERS = 'FETCH_V2V_SOURCE_CLUSTERS';\nexport const FETCH_V2V_TARGET_CLUSTERS = 'FETCH_V2V_TARGET_CLUSTERS';\nexport const QUERY_V2V_PROVIDERS = 'QUERY_V2V_PROVIDERS';\n\nexport const QUERY_PROVIDERS_URL = '/api/providers';\n\nexport const TARGET_WARNING_MESSAGES = {\n  [RHV]: __('You must enable at least one conversion host in the cluster. You can continue to create an infrastructure mapping that includes the target cluster, but you must enable a conversion host before running the migration plan.'), // prettier-ignore\n  [OPENSTACK]: __('You must enable an RSA key pair on the OpenStack provider. You can continue to create an infrastructure mapping without the key pair, but you must enable it before running the migration plan.') // prettier-ignore\n};\n","import { RHV, OPENSTACK } from '../../../common/constants';\n\nexport const FETCH_V2V_TARGET_CLUSTERS = 'FETCH_V2V_TARGET_CLUSTERS';\n\nexport const FETCH_TARGET_COMPUTE_URLS = {\n  [RHV]:\n    '/api/clusters?expand=resources' +\n    '&attributes=ext_management_system.emstype,v_parent_datacenter,ext_management_system.name,hosts' +\n    '&filter[]=ext_management_system.emstype=rhevm',\n  [OPENSTACK]:\n    '/api/cloud_tenants?expand=resources&filter[]=ext_management_system.type=ManageIQ::Providers::Openstack::CloudManager&attributes=ext_management_system.name,ext_management_system.id,vms'\n};\n","export const schemaValidationEnabled = true;\n\nexport const logSchemaError = err => {\n  console.error(err.name, err.errors); // eslint-disable-line no-console\n};\n\nexport const validateSchema = (schema, models) => {\n  if (schemaValidationEnabled) {\n    schema.validate(models, { abortEarly: false, strict: true }).catch(err => {\n      logSchemaError(err);\n    });\n  }\n};\n","import { push } from 'connected-react-router';\n\nexport const redirectTo = path => (dispatch, getState) => {\n  // NOTE: to avoid pushing the same path to history and throwing error\n  if (getState().router.location.pathname !== path) {\n    dispatch(push(path));\n  }\n};\n","const V2V_NOTIFICATION_ADD = 'V2V_NOTIFICATION_ADD';\nconst V2V_NOTIFICATION_REMOVE = 'V2V_NOTIFICATION_REMOVE';\n\nexport { V2V_NOTIFICATION_ADD, V2V_NOTIFICATION_REMOVE };\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { noop } from 'patternfly-react';\n\n// This component has no role on the page, and will be hidden from screen readers (role=\"presentation\").\n// Prevents a click on an inner element (e.g. a DropdownKebab) from triggering a click on an ancestor (e.g. a table row).\n// The onKeyUp handler and role are used to satisfy eslint-plugin-jsx-a11y.\nconst StopPropagationOnClick = ({ children }) => (\n  <span onClick={e => e.stopPropagation()} onKeyUp={noop} role=\"presentation\">\n    {children}\n  </span>\n);\n\nStopPropagationOnClick.propTypes = {\n  children: PropTypes.node\n};\n\nexport default StopPropagationOnClick;\n","/**\n * returns a unique network based on current UI model\n */\nexport const networkKey = network => `${network.clusterId}\\\\${network.uid_ems || network.ems_ref}`;\n","import Immutable from 'seamless-immutable';\n\nimport { networkKey } from '../../../common/networkKey';\nimport { MAPPING_TYPE_RESOURCE_MAP } from './InfrastructureMappingsListConstants';\n\nexport const getMappingType = transformation_mapping_items => {\n  const isOSPMapping =\n    transformation_mapping_items.some(item => item.destination_type === 'CloudTenant') &&\n    transformation_mapping_items.some(item => item.destination_type === 'CloudVolumeType') &&\n    transformation_mapping_items.some(item => item.destination_type === 'CloudNetwork');\n  if (isOSPMapping) return 'openstack';\n  return 'rhevm';\n};\n\nexport const getHeaderText = transformation_mapping_items => {\n  const mappingType = getMappingType(transformation_mapping_items);\n  if (mappingType === 'openstack') {\n    return {\n      sourceNetworks: __('Source Provider \\\\ Datacenter \\\\ Cluster \\\\ Network'),\n      targetNetworks: __('Target Provider \\\\ Project \\\\ Network'),\n      sourceDatastores: __('Source Provider \\\\ Datacenter \\\\ Cluster \\\\ Datastore'),\n      targetDatastores: __('Target Provider \\\\ Project \\\\ Volume Type'),\n      sourceClusters: __('Source Provider \\\\ Datacenter \\\\ Cluster'),\n      targetClusters: __('Target Provider \\\\ Project')\n    };\n  }\n  return {\n    sourceNetworks: __('Source Networks'),\n    targetNetworks: __('Target Networks'),\n    sourceDatastores: __('Source Datastores'),\n    targetDatastores: __('Target Datastores'),\n    sourceClusters: __('Source Clusters'),\n    targetClusters: __('Target Clusters')\n  };\n};\n\nexport const mapInfrastructureMappings = (\n  transformation_mapping_items,\n  clusters,\n  datastores,\n  networks,\n  cloudTenants,\n  cloudNetworks,\n  cloudVolumeTypes\n) => {\n  /**\n   * map the target source -> destination clusters/networks/datastores for\n   * display on the infrastructure mappings list view\n   *\n   * SQL-JOIN-MIQ-IN-JS ;)\n   *\n   * results in the following structure:\n   * {\n   *  targetClusters: {\n   *    `clusterId`: {\n   *      targetCluster: {...},\n   *      sourceClusters: [{...}]\n   *    }\n   *  },\n   *  targetDatastores: {\n   *   `datastoreId`: {\n   *     target: {\n   *       targetCluster: {...},\n   *       targetDatastore: {...}\n   *     },\n   *     sources: [\n   *       {\n   *         sourceDatastore: {...},\n   *         sourceCluster: {...}\n   *       }\n   *     ]\n   *   }\n   *  }\n   *  targetNetworks: {\n   *   `networkId`: {\n   *     target: {\n   *       targetCluster: {...},\n   *       targetNetwork: {...}\n   *     },\n   *     sources: [\n   *       {\n   *         sourceNetwork: {...},\n   *         sourceCluster: {...}\n   *       }\n   *     ]\n   *   }\n   *  }\n   * }\n   *\n   */\n  const clusterMappingItems = transformation_mapping_items.filter(item => {\n    const destination = item.destination_type.toLowerCase();\n    return destination === 'emscluster' || destination === 'cloudtenant';\n  });\n  const datastoreMappingItems = transformation_mapping_items.filter(item => {\n    const destination = item.destination_type.toLowerCase();\n    return destination === 'storage' || destination === 'cloudvolumetype';\n  });\n  const networkMappingItems = transformation_mapping_items.filter(item => {\n    const destination = item.destination_type.toLowerCase();\n    return destination === 'lan' || destination === 'cloudnetwork';\n  });\n\n  const mappingType = getMappingType(transformation_mapping_items);\n\n  const targetComputeMap = {\n    openstack: cloudTenants,\n    rhevm: clusters\n  };\n\n  const targetStoragesMap = {\n    openstack: cloudVolumeTypes,\n    rhevm: datastores\n  };\n\n  const targetNetworksMap = {\n    openstack: cloudNetworks,\n    rhevm: networks\n  };\n\n  // create unique cluster mappings by unique target cluster\n  const targetClusters = {};\n  for (const clusterMapping of clusterMappingItems) {\n    const sourceCluster = clusters.find(c => c.id === clusterMapping.source_id);\n    const targetCluster = targetComputeMap[mappingType].find(c => c.id === clusterMapping.destination_id);\n\n    if (sourceCluster && targetCluster) {\n      if (targetClusters[targetCluster.id]) {\n        targetClusters[targetCluster.id].sourceClusters.push(sourceCluster);\n      } else {\n        targetClusters[targetCluster.id] = {};\n        targetClusters[targetCluster.id].targetCluster = targetCluster;\n        targetClusters[targetCluster.id].sourceClusters = [sourceCluster];\n      }\n    } else {\n      // we have missing cluster data, just return null and show missing data\n      return {\n        targetClusters: null,\n        targetDatastores: null,\n        targetNetworks: null\n      };\n    }\n  }\n\n  // transform cluster lans and datastores to key/value lookups for use in datastore/lan mappings\n  const storagesMap = {\n    openstack: [],\n    rhevm: {}\n  };\n\n  const networksMap = {\n    CloudNetwork: {},\n    Lan: {}\n  };\n\n  clusters.forEach(cluster => {\n    if (cluster.storages && cluster.storages.length) {\n      cluster.storages.forEach(datastore => {\n        storagesMap.rhevm[datastore.id] = cluster.id;\n      });\n    }\n    if (cluster.lans && cluster.lans.length) {\n      cluster.lans.forEach(lan => {\n        networksMap.Lan[lan.id] = cluster.id;\n      });\n    }\n  });\n  cloudTenants.forEach(tenant => {\n    if (tenant.cloud_volume_types && tenant.cloud_volume_types.length) {\n      tenant.cloud_volume_types.forEach(cloud_volume_type => {\n        storagesMap.openstack.push({ [cloud_volume_type.id]: tenant.id });\n      });\n    }\n    if (tenant.cloud_networks && tenant.cloud_networks.length) {\n      tenant.cloud_networks.forEach(network => {\n        networksMap.CloudNetwork[network.id] = tenant.id;\n      });\n    }\n  });\n\n  // create unique datastore mappings by unique target datastore\n  const targetDatastores = {};\n  let missingDatastores = false;\n  for (const datastoreMapping of datastoreMappingItems) {\n    const sourceCluster = clusters.find(c => c.id === storagesMap.rhevm[datastoreMapping.source_id]);\n    const targetCluster = targetComputeMap[mappingType].find(c => {\n      if (mappingType === 'openstack') {\n        return storagesMap.openstack.find(item => item[datastoreMapping.destination_id] === c.id);\n      }\n      return c.id === storagesMap.rhevm[datastoreMapping.destination_id];\n    });\n    const sourceDatastore = datastores.find(d => d.id === datastoreMapping.source_id);\n    const targetDatastore = targetStoragesMap[mappingType].find(d => d.id === datastoreMapping.destination_id);\n\n    if (sourceCluster && targetCluster && sourceDatastore && targetDatastore) {\n      const source = {\n        sourceDatastore,\n        sourceCluster\n      };\n      const target = {\n        targetDatastore,\n        targetCluster\n      };\n      if (targetDatastores[targetDatastore.id]) {\n        targetDatastores[targetDatastore.id].sources.push(source);\n      } else {\n        targetDatastores[targetDatastore.id] = {};\n        targetDatastores[targetDatastore.id].target = target;\n        targetDatastores[targetDatastore.id].sources = [source];\n      }\n    } else {\n      missingDatastores = true;\n      break;\n    }\n  }\n\n  // create unique networks mappings by unique target network\n  const targetNetworks = {};\n  let missingNetworks = false;\n  for (const networkMapping of networkMappingItems) {\n    if (!(networkMapping.source_id in networksMap[networkMapping.source_type])) {\n      missingNetworks = true;\n      break;\n    }\n    if (!(networkMapping.destination_id in networksMap[networkMapping.destination_type])) {\n      missingNetworks = true;\n      break;\n    }\n\n    const sourceCluster = clusters.find(\n      c => c.id === networksMap[MAPPING_TYPE_RESOURCE_MAP[mappingType].networks.source][networkMapping.source_id]\n    );\n    const targetCluster = targetComputeMap[mappingType].find(\n      c => c.id === networksMap[MAPPING_TYPE_RESOURCE_MAP[mappingType].networks.target][networkMapping.destination_id]\n    );\n    const sn = networks.find(network => network.id === networkMapping.source_id);\n    const tn = targetNetworksMap[mappingType].find(network => network.id === networkMapping.destination_id);\n\n    if (sourceCluster && targetCluster && sn && tn) {\n      const sourceNetwork = Immutable.set(sn, 'clusterId', sourceCluster.id);\n      const targetNetwork = Immutable.set(tn, 'clusterId', targetCluster.id);\n      const source = {\n        sourceNetwork,\n        sourceCluster\n      };\n\n      const target = {\n        targetNetwork,\n        targetCluster\n      };\n\n      const targetNetworkKey = networkKey(targetNetwork);\n      if (targetNetworks[targetNetworkKey]) {\n        const duplicatedLanIndex = targetNetworks[targetNetworkKey].sources.findIndex(\n          s => networkKey(s.sourceNetwork) === networkKey(sourceNetwork)\n        );\n        if (duplicatedLanIndex === -1) {\n          targetNetworks[targetNetworkKey].sources.push(source);\n        }\n      } else {\n        targetNetworks[targetNetworkKey] = {};\n        targetNetworks[targetNetworkKey].target = target;\n        targetNetworks[targetNetworkKey].sources = [source];\n      }\n    } else {\n      missingNetworks = true;\n      break;\n    }\n  }\n\n  return {\n    targetClusters,\n    targetDatastores: missingDatastores ? null : targetDatastores,\n    targetNetworks: missingNetworks ? null : targetNetworks\n  };\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Breadcrumb, Grid } from 'patternfly-react';\n\nconst Toolbar = ({ children }) => (\n  <Grid.Row className=\"toolbar-pf\" style={{ paddingTop: 0 }}>\n    <Grid.Col xs={12}>\n      <Breadcrumb style={{ marginBottom: 8 }}>{children}</Breadcrumb>\n    </Grid.Col>\n  </Grid.Row>\n);\nToolbar.propTypes = {\n  children: PropTypes.node\n};\nToolbar.defaultProps = {\n  children: null\n};\nexport default Toolbar;\n","import { OPENSTACK, RHV, V2V_TARGET_PROVIDERS } from '../../../../../../common/constants';\n\nexport const V2V_SET_TRANSFORMATIONS_BODY = 'V2V_SET_TRANSFORMATIONS_BODY';\nexport const V2V_SHOW_WARNING_MODAL = 'V2V_SHOW_WARNING_MODAL';\nexport const V2V_HIDE_WARNING_MODAL = 'V2V_HIDE_WARNING_MODAL';\nexport const V2V_SHOW_ALERT = 'V2V_SHOW_ALERT';\nexport const V2V_HIDE_ALERT = 'V2V_HIDE_ALERT';\nexport const V2V_MAPPING_WIZARD_EXITED = 'V2V_MAPPING_WIZARD_EXITED';\nexport const V2V_SHOW_MAPPING_WIZARD = 'V2V_SHOW_MAPPING_WIZARD';\nexport const V2V_HIDE_MAPPING_WIZARD = 'V2V_HIDE_MAPPING_WIZARD';\nexport { OPENSTACK, RHV, V2V_TARGET_PROVIDERS };\n\nexport const V2V_TARGET_PROVIDER_STORAGE_KEYS = {\n  [RHV]: 'storages',\n  [OPENSTACK]: 'cloud_volume_types'\n};\n\nexport const V2V_TARGET_PROVIDER_NETWORK_KEYS = { [RHV]: 'lans', [OPENSTACK]: 'cloud_networks' };\n\nexport const TRANSFORMATION_MAPPING_ITEM_SOURCE_TYPES = {\n  cluster: 'EmsCluster',\n  datastore: 'Storage',\n  network: 'Lan'\n};\n\nexport const TRANSFORMATION_MAPPING_ITEM_DESTINATION_TYPES = {\n  [OPENSTACK]: {\n    cluster: 'CloudTenant',\n    datastore: 'CloudVolumeType',\n    network: 'CloudNetwork'\n  },\n  [RHV]: {\n    cluster: 'EmsCluster',\n    datastore: 'Storage',\n    network: 'Lan'\n  }\n};\n","import { connect } from 'react-redux';\nimport NotificationList from './NotificationList';\nimport * as NotificationListActions from './NotificationListActions';\nimport reducer from './NotificationListReducer';\n\nexport const reducers = { notifications: reducer };\n\nconst mapStateToProps = ({ notifications }, ownProps) => ({\n  ...notifications,\n  ...ownProps.data\n});\n\nconst mergeProps = (stateProps, dispatchProps, ownProps) => Object.assign(stateProps, ownProps.data, dispatchProps);\n\nexport default connect(\n  mapStateToProps,\n  NotificationListActions,\n  mergeProps\n)(NotificationList);\n","export const getVMStepSelectedVms = (allVms, selectedVms) => allVms.filter(vm => selectedVms.includes(vm.id));\n\n// Property can be 'pre_service' or 'post_service'.\n// Returns an array of vm ids which have a truthy value for that property in the plan being edited.\nexport const getVmIdsWithProperty = (editingPlan, property, vmStepSelectedVms) => {\n  const actions =\n    editingPlan && editingPlan.options && editingPlan.options.config_info && editingPlan.options.config_info.actions;\n  if (!actions) return [];\n  const actionsWithProperty = actions.filter(action => action[property]);\n  const vmIds = actionsWithProperty.map(action => action.vm_id);\n  return vmIds.filter(id => vmStepSelectedVms.some(vm => vm.id === id));\n};\n\nexport const preselectPlaybooksForVms = (editingPlan, vms) => {\n  const vmIdsWithPreService = getVmIdsWithProperty(editingPlan, 'pre_service', vms);\n  const vmIdsWithPostService = getVmIdsWithProperty(editingPlan, 'post_service', vms);\n  return vms.map(vm => ({\n    ...vm,\n    preMigration: vmIdsWithPreService.some(id => id === vm.id),\n    postMigration: vmIdsWithPostService.some(id => id === vm.id)\n  }));\n};\n\nexport const applyPlaybookSelections = (vms, playbookVms) =>\n  vms.map(vm => ({\n    ...vm,\n    preMigration: playbookVms.preMigration.includes(vm.id),\n    postMigration: playbookVms.postMigration.includes(vm.id)\n  }));\n\nexport const updatePlaybookSelections = (vms, playbookVms) => {\n  const vmIds = vms.map(vm => vm.id);\n  return {\n    preMigration: playbookVms.preMigration.filter(id => vmIds.includes(id)),\n    postMigration: playbookVms.postMigration.filter(id => vmIds.includes(id))\n  };\n};\n","import { reset } from 'redux-form';\nimport { HIDE_PLAN_WIZARD, PLAN_WIZARD_EXITED, PLAN_WIZARD_NEXT, PLAN_WIZARD_BACK } from '../../OverviewConstants';\nimport {\n  V2V_SET_PLANS_BODY,\n  V2V_SET_PLAN_SCHEDULE,\n  V2V_PLAN_WIZARD_SHOW_ALERT,\n  V2V_PLAN_WIZARD_HIDE_ALERT\n} from './PlanWizardConstants';\nimport { RESET_V2V_ADVANCED_OPTIONS_STEP_VMS } from './components/PlanWizardAdvancedOptionsStep/PlanWizardAdvancedOptionsStepConstants';\nimport { V2V_VM_STEP_RESET } from './components/PlanWizardVMStep/PlanWizardVMStepConstants';\n\nexport const hidePlanWizardAction = () => dispatch => {\n  dispatch({\n    type: HIDE_PLAN_WIZARD\n  });\n};\n\nexport const planWizardExitedAction = () => dispatch => {\n  dispatch({\n    type: PLAN_WIZARD_EXITED\n  });\n  // Dispatch reset for all the wizard step forms here\n  dispatch(reset('planWizardGeneralStep'));\n  dispatch(reset('planWizardVMStep'));\n  dispatch(reset('planWizardInstancePropertiesStep'));\n  dispatch({\n    type: V2V_VM_STEP_RESET\n  });\n  dispatch(reset('planWizardScheduleStep'));\n  dispatch(reset('planWizardAdvancedOptionsStep'));\n  dispatch({\n    type: RESET_V2V_ADVANCED_OPTIONS_STEP_VMS\n  });\n};\n\nexport const setMetadataWithNextButtonClickedAction = body => dispatch => {\n  dispatch({\n    type: PLAN_WIZARD_NEXT,\n    payload: body\n  });\n};\n\nexport const setMetadataWithBackButtonClickedAction = body => dispatch => {\n  dispatch({\n    type: PLAN_WIZARD_BACK,\n    payload: body\n  });\n};\n\nexport const setPlansBodyAction = body => dispatch => {\n  dispatch({\n    type: V2V_SET_PLANS_BODY,\n    payload: body\n  });\n};\n\nexport const setPlanScheduleAction = body => dispatch => {\n  dispatch({\n    type: V2V_SET_PLAN_SCHEDULE,\n    payload: body\n  });\n};\n\nexport const resetVmStepAction = () => dispatch => {\n  dispatch({\n    type: V2V_VM_STEP_RESET\n  });\n  dispatch(reset('planWizardVMStep'));\n};\n\nexport const showAlertAction = (alertText, alertType = 'error') => dispatch => {\n  dispatch({\n    type: V2V_PLAN_WIZARD_SHOW_ALERT,\n    payload: { alertText, alertType }\n  });\n};\n\nexport const hideAlertAction = () => dispatch => {\n  dispatch({\n    type: V2V_PLAN_WIZARD_HIDE_ALERT\n  });\n};\n\nexport const resetAdvancedOptionsStepAction = () => dispatch => {\n  dispatch({\n    type: RESET_V2V_ADVANCED_OPTIONS_STEP_VMS\n  });\n  dispatch(reset('planWizardAdvancedOptionsStep'));\n};\n","export const POST_V2V_TRANSFORM_MAPPINGS = 'POST_V2V_TRANSFORM_MAPPINGS';\nexport const UPDATE_V2V_TRANSFORMATION_MAPPING = 'UPDATE_V2V_TRANSFORMATION_MAPPING';\n\nexport const SOURCE_HREF_SLUGS = {\n  EmsCluster: '/api/clusters/',\n  Storage: '/api/data_stores/',\n  Lan: '/api/lans/'\n};\n\nexport const DESTINATION_HREF_SLUGS = {\n  openstack: {\n    CloudTenant: '/api/cloud_tenants/',\n    CloudVolumeType: '/api/cloud_volume_types/',\n    CloudNetwork: '/api/cloud_networks/'\n  },\n  rhevm: {\n    EmsCluster: '/api/clusters/',\n    Storage: '/api/data_stores/',\n    Lan: '/api/lans/'\n  }\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport cx from 'classnames';\nimport EllipsisWithTooltip from 'react-ellipsis-with-tooltip';\nimport { OverlayTrigger, Popover, Icon } from 'patternfly-react';\n\nconst DualPaneMapperListItem = ({ item, text, warningMessage, selected, handleClick, handleKeyPress }) => {\n  const classes = cx('dual-pane-mapper-item', { selected });\n\n  const warningOverlay = warningMessage && (\n    <OverlayTrigger\n      overlay={\n        <Popover id={`warning_for_${text}`}>\n          <div style={{ maxWidth: 400 }}>{warningMessage}</div>\n        </Popover>\n      }\n      placement=\"top\"\n      trigger={['click']}\n      delay={500}\n      rootClose\n      onClick={event => event.stopPropagation()}\n    >\n      <Icon type=\"pf\" name=\"warning-triangle-o\" className=\"clickable-icon\" />\n    </OverlayTrigger>\n  );\n\n  return (\n    <div\n      className={classes}\n      onClick={() => handleClick(item)}\n      onKeyPress={() => handleKeyPress(item)}\n      tabIndex=\"0\"\n      aria-selected={selected}\n      role=\"option\"\n    >\n      <EllipsisWithTooltip id={text}>\n        <div className=\"dual-pane-mapper-info\">\n          <span className=\"dual-pane-mapper-item-container\">\n            {text}\n            {warningOverlay}\n          </span>\n          <span className=\"dual-pane-mapper-item-select-indicator fa fa-check\" />\n        </div>\n      </EllipsisWithTooltip>\n    </div>\n  );\n};\n\nDualPaneMapperListItem.propTypes = {\n  item: PropTypes.object,\n  text: PropTypes.string,\n  warningMessage: PropTypes.string,\n  selected: PropTypes.bool,\n  handleClick: PropTypes.func,\n  handleKeyPress: PropTypes.func\n};\n\nexport default DualPaneMapperListItem;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst DualPaneMapperCount = ({ selectedItems, totalItems }) => {\n  const message = totalItems === 1 ? __('%s of %s item selected') : __('%s of %s items selected');\n  return <div className=\"dual-pane-mapper-count\">{sprintf(message, selectedItems, totalItems)}</div>;\n};\n\nDualPaneMapperCount.propTypes = {\n  selectedItems: PropTypes.number,\n  totalItems: PropTypes.number\n};\n\nexport default DualPaneMapperCount;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport cx from 'classnames';\nimport { Spinner } from 'patternfly-react';\n\nconst DualPaneMapperList = ({ children, listTitle, loading, id, counter }) => {\n  const classes = cx('dual-pane-mapper-items-container', {\n    'has-counter': counter,\n    loading\n  });\n\n  return (\n    <div className=\"dual-pane-mapper-list-container\">\n      <div className=\"dual-pane-mapper-list\">\n        <label htmlFor=\"availableTitle\">\n          <span id=\"listTitle\">{listTitle}</span>\n        </label>\n        <div className={classes} id={id}>\n          {loading ? <Spinner loading /> : children}\n        </div>\n      </div>\n      {counter && counter}\n    </div>\n  );\n};\n\nDualPaneMapperList.propTypes = {\n  children: PropTypes.node,\n  listTitle: PropTypes.string,\n  id: PropTypes.string,\n  loading: PropTypes.bool,\n  counter: PropTypes.node\n};\n\nexport default DualPaneMapperList;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { Button } from 'patternfly-react';\n\nconst DualPaneMapper = ({ children, handleButtonClick, validMapping }) => (\n  <div className=\"dual-pane-mapper-container\">\n    <div className=\"dual-pane-mapper\">{children}</div>\n    <Button bsStyle=\"primary\" disabled={validMapping} onClick={handleButtonClick}>\n      {__('Add Mapping')}\n    </Button>\n  </div>\n);\n\nDualPaneMapper.propTypes = {\n  children: PropTypes.node,\n  handleButtonClick: PropTypes.func,\n  validMapping: PropTypes.bool\n};\n\nexport default DualPaneMapper;\n","import { connect } from 'react-redux';\n\nimport Mappings from './Mappings';\nimport * as MappingsActions from './MappingsActions';\nimport * as RouterActions from '../../../../redux/actions/routerActions';\nimport * as ProvidersActions from '../../../../redux/common/providers/providersActions';\nimport reducer from './MappingsReducer';\n\nimport {\n  activeTransformationPlansFilter,\n  finishedWithErrorTransformationPlansFilter,\n  notStartedTransformationPlansFilter\n} from '../Overview/OverviewSelectors';\n\nexport const reducers = { mappings: reducer, form: {} };\n\nconst mapStateToProps = (\n  {\n    mappings,\n    overview: { archivedTransformationPlans, transformationPlans, planId },\n    providers: { hasSufficientProviders, isRejectedProviders, isFetchingProviders }\n  },\n  ownProps\n) => ({\n  ...mappings,\n  ...ownProps.data,\n  archivedTransformationPlans,\n  transformationPlans,\n  hasSufficientProviders,\n  isRejectedProviders,\n  isFetchingProviders,\n  activeTransformationPlans: activeTransformationPlansFilter(transformationPlans, planId),\n  finishedWithErrorTransformationPlans: finishedWithErrorTransformationPlansFilter(transformationPlans),\n  notStartedTransformationPlans: notStartedTransformationPlansFilter(transformationPlans)\n});\n\nconst mergeProps = (stateProps, dispatchProps, ownProps) => ({\n  ...stateProps,\n  ...ownProps.data,\n  ...dispatchProps\n});\n\nexport default connect(\n  mapStateToProps,\n  { ...MappingsActions, ...RouterActions, ...ProvidersActions },\n  mergeProps\n)(Mappings);\n","import { connect } from 'react-redux';\nimport Plan from './Plan';\nimport * as PlanActions from './PlanActions';\nimport * as NotificationActions from '../common/NotificationList/NotificationListActions';\n\nimport reducer from './PlanReducer';\n\nexport const reducers = { plan: reducer, form: {} };\n\nconst mapStateToProps = ({ plan }, { data }) => {\n  const {\n    match: {\n      params: { id: planId }\n    }\n  } = data;\n  return {\n    ...plan,\n    ...data,\n    planId\n  };\n};\n\nconst mergeProps = (stateProps, dispatchProps, ownProps) => Object.assign(stateProps, ownProps.data, dispatchProps);\n\nexport default connect(\n  mapStateToProps,\n  Object.assign(PlanActions, NotificationActions),\n  mergeProps\n)(Plan);\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst WizardErrorState = ({ title, message, onClose }) => (\n  <div className=\"wizard-pf-complete blank-slate-pf\">\n    <div className=\"wizard-pf-success-icon\">\n      <span className=\"pficon pficon-error-circle-o\" />\n    </div>\n    <h3 className=\"blank-slate-pf-main-action\">{title}</h3>\n    <p className=\"blank-slate-pf-secondary-action\">{message}</p>\n    {onClose ? (\n      <button type=\"button\" className=\"btn btn-lg btn-primary\" onClick={onClose}>\n        {__('Close')}\n      </button>\n    ) : null}\n  </div>\n);\n\nWizardErrorState.propTypes = {\n  title: PropTypes.string.isRequired,\n  message: PropTypes.string,\n  onClose: PropTypes.func\n};\n\nWizardErrorState.defaultProps = {\n  message: ''\n};\n\nexport default WizardErrorState;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Spinner } from 'patternfly-react';\n\nconst WizardLoadingState = ({ title, message }) => (\n  <div className=\"wizard-pf-process blank-slate-pf\">\n    <Spinner loading size=\"lg\" className=\"blank-slate-pf-icon\" />\n    <h3 className=\"blank-slate-pf-main-action\">{title}</h3>\n    <p className=\"blank-slate-pf-secondary-action\">{message}</p>\n  </div>\n);\n\nWizardLoadingState.propTypes = {\n  title: PropTypes.string.isRequired,\n  message: PropTypes.string\n};\n\nWizardLoadingState.defaultProps = {\n  message: ''\n};\n\nexport default WizardLoadingState;\n","import ModalWizard from './ModalWizard';\nimport ModalWizardBody from './ModalWizardBody';\nimport ModalWizardStateProvider from './ModalWizardStateProvider';\n\nModalWizard.StateProvider = ModalWizardStateProvider;\nModalWizard.Body = ModalWizardBody;\n\nexport default ModalWizard;\n","// task.status\nexport const ERROR = 'Error';\nexport const OK = 'Ok';\n\n// task.state\nexport const FINISHED = 'Finished';\n\n// task.meta.operation\nexport const ENABLE = 'enable';\nexport const DISABLE = 'disable';\n","import { connect } from 'react-redux';\nimport Settings from './Settings';\nimport reducer from './SettingsReducer';\nimport * as RouterActions from '../../../../redux/actions/routerActions';\n\nexport const reducers = { settings: reducer };\n\nconst mapStateToProps = () => ({});\n\nconst mergeProps = (stateProps, dispatchProps, ownProps) => Object.assign(stateProps, ownProps.data, dispatchProps);\n\nexport default connect(\n  mapStateToProps,\n  RouterActions,\n  mergeProps\n)(Settings);\n","import URI from 'urijs';\nimport API from '../../../common/API';\n\nimport { FETCH_V2V_PROVIDERS } from './providersConstants';\n\nconst _getProvidersActionCreator = url => dispatch =>\n  dispatch({\n    type: FETCH_V2V_PROVIDERS,\n    payload: API.get(url)\n  });\n\nexport const fetchProvidersAction = url => {\n  const uri = new URI(url);\n  return _getProvidersActionCreator(uri.toString());\n};\n","import { V2V_NOTIFICATION_ADD, V2V_NOTIFICATION_REMOVE } from './NotificationConstants';\n\nexport const addNotificationAction = notification => dispatch => {\n  dispatch({\n    type: V2V_NOTIFICATION_ADD,\n    header: notification.header,\n    message: notification.message,\n    notificationType: notification.notificationType,\n    data: notification.data,\n    persistent: notification.persistent,\n    timerdelay: notification.timerdelay || 8000,\n    actionEnabled: notification.actionEnabled\n  });\n};\n\nexport const removeNotificationAction = key => dispatch => {\n  dispatch({\n    type: V2V_NOTIFICATION_REMOVE,\n    key\n  });\n};\n","export const SET_V2V_EDITING_MAPPING = 'SET_V2V_EDITING_MAPPING';\nexport const FETCH_V2V_CONVERSION_HOSTS = 'FETCH_V2V_CONVERSION_HOSTS';\n","import URI from 'urijs';\nimport API from '../../../../common/API';\n\nimport {\n  DELETE_V2V_INFRASTRUCTURE_MAPPING,\n  FETCH_V2V_CLOUD_NETWORKS,\n  FETCH_V2V_CLOUD_TENANTS,\n  FETCH_V2V_CLOUD_VOLUME_TYPES,\n  FETCH_V2V_CLUSTERS,\n  FETCH_V2V_DATASTORES,\n  FETCH_V2V_NETWORKS,\n  FETCH_V2V_TRANSFORMATION_MAPPINGS,\n  HIDE_V2V_DELETE_CONFIRMATION_MODAL,\n  SET_V2V_MAPPING_TO_DELETE,\n  SHOW_V2V_DELETE_CONFIRMATION_MODAL,\n  YES_TO_DELETE_AND_HIDE_DELETE_CONFIRMATION_MODAL\n} from './MappingsConstants';\n\nimport { V2V_SHOW_MAPPING_WIZARD } from '../Mappings/screens/MappingWizard/MappingWizardConstants';\n\nimport { SET_V2V_EDITING_MAPPING } from '../Mappings/screens/MappingWizard/components/MappingWizardGeneralStep/MappingWizardGeneralStepConstants';\n\nexport { fetchTransformationPlansAction } from '../Overview/OverviewActions';\n\n// ****************************************************************************\n// DELETE_V2V_INFRASTRUCTURE_MAPPING\n// ****************************************************************************\nexport const deleteInfrastructureMappingAction = mapping => dispatch =>\n  dispatch({\n    type: DELETE_V2V_INFRASTRUCTURE_MAPPING,\n    payload: new Promise((resolve, reject) => {\n      API.post(`/api/transformation_mappings/${mapping.id}`, {\n        action: 'delete'\n      })\n        .then(response => {\n          resolve(response);\n        })\n        .catch(e => reject(e));\n    })\n  });\n\n// ****************************************************************************\n// FETCH_V2V_CLOUD_NETWORKS\n// ****************************************************************************\nconst _getCloudNetworksActionCreator = url => dispatch =>\n  dispatch({\n    type: FETCH_V2V_CLOUD_NETWORKS,\n    payload: API.get(url)\n  });\n\nexport const fetchCloudNetworksAction = url => {\n  const uri = new URI(url);\n  return _getCloudNetworksActionCreator(uri.toString());\n};\n\n// ****************************************************************************\n// FETCH_V2V_CLOUD_TENANTS\n// ****************************************************************************\nconst _getCloudTenantsActionCreator = url => dispatch =>\n  dispatch({\n    type: FETCH_V2V_CLOUD_TENANTS,\n    payload: API.get(url)\n  });\n\nexport const fetchCloudTenantsAction = (url, options = {}) => {\n  const uri = new URI(url);\n  if (options.addSearch) {\n    uri.addSearch(options.addSearch);\n  }\n  return _getCloudTenantsActionCreator(uri.toString());\n};\n\n// ****************************************************************************\n// FETCH_V2V_CLOUD_VOLUME_TYPES\n// ****************************************************************************\nconst _getCloudVolumeTypesActionCreator = url => dispatch =>\n  dispatch({\n    type: FETCH_V2V_CLOUD_VOLUME_TYPES,\n    payload: API.get(url)\n  });\n\nexport const fetchCloudVolumeTypesAction = url => {\n  const uri = new URI(url);\n  return _getCloudVolumeTypesActionCreator(uri.toString());\n};\n\n// ****************************************************************************\n// FETCH_V2V_CLUSTERS\n// ****************************************************************************\n\nconst _getClustersActionCreator = url => dispatch =>\n  dispatch({\n    type: FETCH_V2V_CLUSTERS,\n    payload: API.get(url)\n  });\n\nexport const fetchClustersAction = url => {\n  const uri = new URI(url);\n  return _getClustersActionCreator(uri.toString());\n};\n\n// ****************************************************************************\n// FETCH_V2V_DATASTORES\n// ****************************************************************************\nconst _getDatastoresActionCreator = url => dispatch =>\n  dispatch({\n    type: FETCH_V2V_DATASTORES,\n    payload: API.get(url)\n  });\n\nexport const fetchDatastoresAction = url => {\n  const uri = new URI(url);\n  return _getDatastoresActionCreator(uri.toString());\n};\n\n// ****************************************************************************\n// FETCH_V2V_NETWORKS\n// ****************************************************************************\nconst _getNetworksActionCreator = url => dispatch =>\n  dispatch({\n    type: FETCH_V2V_NETWORKS,\n    payload: API.get(url)\n  });\n\nexport const fetchNetworksAction = url => {\n  const uri = new URI(url);\n  return _getNetworksActionCreator(uri.toString());\n};\n\n// ****************************************************************************\n// FETCH_V2V_TRANSFORMATKON_MAPPINGS\n// ****************************************************************************\nconst _getTransformationMappingsActionCreator = url => dispatch =>\n  dispatch({\n    type: FETCH_V2V_TRANSFORMATION_MAPPINGS,\n    payload: API.get(url)\n  });\n\nexport const fetchTransformationMappingsAction = url => {\n  const uri = new URI(url);\n  return _getTransformationMappingsActionCreator(uri.toString());\n};\n\n// ****************************************************************************\n// HIDE_V2V_DELETE_CONFIRMATION_MODAL\n// ****************************************************************************\nexport const hideDeleteConfirmationModalAction = () => ({\n  type: HIDE_V2V_DELETE_CONFIRMATION_MODAL,\n  payload: false\n});\n\n// ****************************************************************************\n// SET_V2V_MAPPING_TO_DELETE\n// ****************************************************************************\nexport const setMappingToDeleteAction = mapping => ({\n  type: SET_V2V_MAPPING_TO_DELETE,\n  payload: mapping\n});\n\n// ****************************************************************************\n// SHOW_V2V_DELETE_CONFIRMATION_MODAL\n// ****************************************************************************\nexport const showDeleteConfirmationModalAction = () => ({\n  type: SHOW_V2V_DELETE_CONFIRMATION_MODAL,\n  payload: true\n});\n\n// ****************************************************************************\n// SHOW_V2V_MAPPING_WIZARD\n// ****************************************************************************\nexport const showMappingWizardAction = () => ({\n  type: V2V_SHOW_MAPPING_WIZARD\n});\n\n// ****************************************************************************\n// SHOW_V2V_MAPPING_WIZARD_EDIT_MODE\n// ****************************************************************************\nexport const showMappingWizardEditModeAction = mapping => dispatch => {\n  dispatch({\n    type: V2V_SHOW_MAPPING_WIZARD\n  });\n  dispatch({\n    type: SET_V2V_EDITING_MAPPING,\n    payload: mapping\n  });\n};\n\n// ****************************************************************************\n// YES_TO_DELETE_AND_HIDE_DELETE_CONFIRMATION_MODAL\n// ****************************************************************************\nexport const yesToDeleteInfrastructureMappingAction = () => ({\n  type: YES_TO_DELETE_AND_HIDE_DELETE_CONFIRMATION_MODAL\n});\n","const getPlanScheduleInfo = plan => {\n  const migrationScheduled = (plan && plan.schedules && plan.schedules[0].run_at.start_time) || 0;\n  const staleMigrationSchedule = new Date(migrationScheduled).getTime() < Date.now();\n  const migrationStarting = staleMigrationSchedule && new Date(migrationScheduled).getTime() > Date.now() - 120000;\n  const showInitialScheduleButton = staleMigrationSchedule && !migrationStarting;\n  return {\n    migrationScheduled,\n    staleMigrationSchedule,\n    migrationStarting,\n    showInitialScheduleButton\n  };\n};\n\nexport default getPlanScheduleInfo;\n","const { API } = window;\n\nexport default {\n  get(url, headers = {}, params = {}) {\n    return API.get(url, {\n      transformResponse: e => ({ data: e }),\n      headers,\n      params\n    });\n  },\n  put(url, data = {}, headers = {}) {\n    return API.put(url, data, {\n      headers\n    });\n  },\n  post(url, data = {}, headers = {}) {\n    return API.post(url, data, {\n      headers,\n      transformResponse: e => ({ data: e })\n    });\n  },\n  delete(url, headers = {}) {\n    return API.delete(url, {\n      headers\n    });\n  },\n  patch(url, data = {}, headers = {}) {\n    return API.patch(url, data, {\n      headers\n    });\n  }\n};\n","import commonUtilitiesHelper from '../../../../common/commonUtilitiesHelper';\n\nconst getMostRecentVMTasksFromRequests = (requests, actions) => {\n  const vm_ids = actions.map(a => a.vm_id);\n\n  const allTasks = requests.map(request => request.miq_request_tasks);\n\n  const flattenAllTasks = [];\n  commonUtilitiesHelper.flatten(allTasks, flattenAllTasks);\n\n  const groupedByVMId = commonUtilitiesHelper.groupBy(flattenAllTasks, 'source_id');\n\n  const vmTasksForRequestOfPlan = [];\n  vmTasksForRequestOfPlan.push(\n    vm_ids.reduce((tasks, id) => {\n      const task = commonUtilitiesHelper.getMostRecentEntityByCreationDate(groupedByVMId[id]);\n      if (task) {\n        return [...tasks, task];\n      }\n      return tasks;\n    }, [])\n  );\n\n  const flattenVMTasksForRequestOfPlan = [];\n  commonUtilitiesHelper.flatten(vmTasksForRequestOfPlan, flattenVMTasksForRequestOfPlan);\n\n  return flattenVMTasksForRequestOfPlan;\n};\n\nexport default getMostRecentVMTasksFromRequests;\n","import moment from 'moment';\n\nexport const IsoElapsedTime = (startTime, endTime) => {\n  let elapsedHours = moment(endTime).diff(startTime, 'hours');\n  const elapsedMinutes = moment(endTime).diff(startTime, 'minutes') % 60;\n  const elapsedSeconds = moment(endTime).diff(startTime, 'seconds') % 60;\n  const elapsedDays = Math.floor(elapsedHours / 24);\n  elapsedHours %= 24;\n\n  let elapsedTime;\n  if (elapsedDays >= 2) {\n    elapsedTime = sprintf(__('%s days %02s:%02s:%02s'), elapsedDays, elapsedHours, elapsedMinutes, elapsedSeconds);\n  } else if (elapsedDays === 1) {\n    elapsedTime = sprintf(__('1 day %02s:%02s:%02s'), elapsedHours, elapsedMinutes, elapsedSeconds);\n  } else {\n    elapsedTime = sprintf(__('%02s:%02s:%02s'), elapsedHours, elapsedMinutes, elapsedSeconds);\n  }\n  return elapsedTime;\n};\n","import { array, string, object } from 'yup';\nimport { schedulesSchema } from './schedules';\n\nexport const plansSchema = array()\n  .of(\n    object().shape({\n      href: string().required(),\n      id: string().required(),\n      name: string().required(),\n      description: string().nullable(),\n      options: object()\n        .shape({\n          config_info: object().shape({\n            transformation_mapping_id: string().required(),\n            actions: array()\n              .of(object().shape({ vm_id: string().required() }))\n              .nullable()\n          })\n        })\n        .required(),\n      created_at: string().required(),\n      miq_requests: array()\n        .of(\n          object().shape({\n            href: string().required(),\n            id: string().required(),\n            description: string().required(),\n            created_on: string().required(),\n            updated_on: string().nullable(),\n            fulfilled_on: string().nullable(),\n            request_state: string().required(),\n            status: string().required(),\n            options: object()\n              .shape({\n                src_id: string(),\n                delivered_on: string().nullable()\n              })\n              .required()\n          })\n        )\n        .nullable(),\n      schedules: array()\n        .of(schedulesSchema)\n        .nullable()\n    })\n  )\n  .nullable();\n\nexport const PLAN_JOB_STATES = {\n  PENDING: 'pending',\n  ACTIVE: 'active',\n  FINISHED: 'finished'\n};\n\nexport const PLAN_JOB_STATUS = {\n  OK: 'Ok',\n  ERROR: 'Error'\n};\n","import { connect } from 'react-redux';\nimport Overview from './Overview';\nimport * as OverviewActions from './OverviewActions';\nimport * as NotificationActions from '../common/NotificationList/NotificationListActions';\nimport * as ProvidersActions from '../../../../redux/common/providers/providersActions';\nimport * as RouterActions from '../../../../redux/actions/routerActions';\n\nimport reducer from './OverviewReducer';\nimport {\n  notStartedTransformationPlansFilter,\n  activeTransformationPlansFilter,\n  finishedTransformationPlansFilter,\n  requestsProcessingCancellationFilter,\n  combineRequestsProcessingCancellation,\n  attachTargetProviderToOspPlans\n} from './OverviewSelectors';\n\nexport const reducers = { overview: reducer, form: {} };\n\nconst mapStateToProps = (\n  { overview, overview: { transformationPlans, allRequestsWithTasks, planId, cloudTenants }, providers },\n  ownProps\n) => {\n  const { requestsProcessingCancellation, ...overviewRest } = overview;\n\n  return {\n    ...overviewRest,\n    ...providers,\n    ...ownProps.data,\n    notStartedTransformationPlans: notStartedTransformationPlansFilter(transformationPlans),\n    activeTransformationPlans: attachTargetProviderToOspPlans(\n      activeTransformationPlansFilter(transformationPlans, planId),\n      providers.providers,\n      cloudTenants\n    ),\n    finishedTransformationPlans: finishedTransformationPlansFilter(transformationPlans),\n    requestsProcessingCancellation: combineRequestsProcessingCancellation(\n      requestsProcessingCancellation,\n      requestsProcessingCancellationFilter(transformationPlans)\n    )\n  };\n};\n\nconst mergeProps = (stateProps, dispatchProps, ownProps) => Object.assign(stateProps, ownProps.data, dispatchProps);\n\nexport default connect(\n  mapStateToProps,\n  Object.assign(OverviewActions, NotificationActions, ProvidersActions, RouterActions),\n  mergeProps\n)(Overview);\n","// reminder... we need to go back and prefix these: V2V_\nexport const SHOW_PLAN_WIZARD = 'SHOW_PLAN_WIZARD';\nexport const SHOW_PLAN_WIZARD_EDIT_MODE = 'SHOW_PLAN_WIZARD_EDIT_MODE';\nexport const HIDE_PLAN_WIZARD = 'HIDE_PLAN_WIZARD';\nexport const SHOW_EDIT_PLAN_TITLE_MODAL = 'SHOW_EDIT_PLAN_TITLE_MODAL';\nexport const HIDE_EDIT_PLAN_TITLE_MODAL = 'HIDE_EDIT_PLAN_TITLE_MODAL';\nexport const PLAN_WIZARD_EXITED = 'PLAN_WIZARD_EXITED';\nexport const PLAN_WIZARD_NEXT = 'PLAN_WIZARD_NEXT';\nexport const PLAN_WIZARD_BACK = 'PLAN_WIZARD_BACK';\nexport const CONTINUE_TO_PLAN = 'CONTINUE_TO_PLAN';\nexport const V2V_SET_MIGRATIONS_FILTER = 'V2V_SET_MIGRATIONS_FILTER';\nexport const V2V_AUTO_SET_MIGRATIONS_FILTER = 'V2V_AUTO_SET_MIGRATIONS_FILTER';\nexport const V2V_RETRY_MIGRATION = 'V2V_RETRY_MIGRATION';\nexport const V2V_TOGGLE_SCHEDULE_MIGRATION_MODAL = 'V2V_TOGGLE_SCHEDULE_MIGRATION_MODAL';\nexport const V2V_SCHEDULE_MIGRATION = 'V2V_SCHEDULE_MIGRATION';\nexport const V2V_EDIT_PLAN_REQUEST = 'V2V_EDIT_PLAN_REQUEST';\nexport const V2V_CANCEL_PLAN_REQUEST = 'V2V_CANCEL_PLAN_REQUEST';\nexport const SHOW_CONFIRM_MODAL = 'SHOW_CONFIRM_MODAL';\nexport const HIDE_CONFIRM_MODAL = 'HIDE_CONFIRM_MODAL';\nexport const ARCHIVE_TRANSFORMATION_PLAN = 'ARCHIVE_TRANSFORMATION_PLAN';\nexport const DELETE_TRANSFORMATION_PLAN = 'DELETE_TRANSFORMATION_PLAN';\n\nexport const FETCH_V2V_TRANSFORMATION_MAPPINGS = 'FETCH_V2V_TRANSFORMATION_MAPPINGS';\n\nexport const FETCH_V2V_TRANSFORMATION_PLANS = 'FETCH_V2V_TRANSFORMATION_PLANS';\nexport const FETCH_V2V_SERVICE_TEMPLATE_ANSIBLE_PLAYBOOKS = 'FETCH_V2V_SERVICE_TEMPLATE_ANSIBLE_PLAYBOOKS';\nexport const FETCH_V2V_ARCHIVED_TRANSFORMATION_PLANS = 'FETCH_V2V_ARCHIVED_TRANSFORMATION_PLANS';\n\nexport const CREATE_V2V_TRANSFORMATION_PLAN_REQUEST = 'CREATE_V2V_TRANSFORMATION_PLAN_REQUEST';\n\nexport const FETCH_V2V_ALL_REQUESTS_WITH_TASKS = 'FETCH_V2V_ALL_REQUESTS_WITH_TASKS';\nexport const FETCH_V2V_ALL_ARCHIVED_PLAN_REQUESTS_WITH_TASKS = 'FETCH_V2V_ALL_ARCHIVED_PLAN_REQUESTS_WITH_TASKS';\n\nexport const MIGRATIONS_FILTERS = {\n  notStarted: __('Not Started Plans'),\n  inProgress: __('In Progress Plans'),\n  completed: __('Completed Plans'),\n  archived: __('Archived Plans')\n};\n\nexport const OSP_TENANT = 'CloudTenant';\nexport const OSP_VOLUME = 'CloudVolumeType';\nexport const OSP_NETWORK = 'CloudNetwork';\nexport const EMS_CLUSTER = 'EmsCluster';\n\nexport const FETCH_TRANSFORMATION_PLANS_URL =\n  '/api/service_templates/?' +\n  \"filter[]=type='ServiceTemplateTransformationPlan'\" +\n  '&filter[]=active=true' +\n  '&expand=resources,schedules' +\n  '&attributes=name,description,miq_requests,options,created_at,transformation_mapping,transformation_mapping.transformation_mapping_items' +\n  '&sort_by=updated_at' +\n  '&sort_order=desc';\n\nexport const FETCH_ARCHIVED_TRANSFORMATION_PLANS_URL =\n  '/api/service_templates/?' +\n  \"filter[]=type='ServiceTemplateTransformationPlan'\" +\n  '&filter[]=archived=true' +\n  '&expand=resources' +\n  '&attributes=name,description,miq_requests,options,created_at,transformation_mapping' +\n  '&sort_by=updated_at' +\n  '&sort_order=desc';\n\nexport const TRANSFORMATION_PLAN_REQUESTS_URL = '/api/requests';\n\nexport const WAITING_FOR_CONVERSION_HOST_MESSAGES = {\n  notAvailable: __('Waiting for an available conversion host. You can continue waiting or go to the Migration Settings page to increase the number of migrations per host'), // prettier-ignore\n  noRsaKey: __('No RSA key pair exists on the OpenStack provider. Cancel the migration, add the key, and retry.')\n};\n","// shim for using process in browser\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\n(function () {\n    try {\n        if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n} ())\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\nprocess.prependListener = noop;\nprocess.prependOnceListener = noop;\n\nprocess.listeners = function (name) { return [] }\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n","export const QUERY_V2V_OSP_TENANT_ATTRIBUTES = 'QUERY_V2V_OSP_TENANT_ATTRIBUTES';\nexport const SET_V2V_INSTANCE_PROPERTIES_ROWS = 'SET_V2V_INSTANCE_PROPERTIES_ROWS';\nexport const QUERY_V2V_OSP_BEST_FIT_FLAVOR = 'QUERY_V2V_OSP_BEST_FIT_FLAVOR';\nexport const SET_V2V_BEST_FIT_FLAVORS_AND_DEFAULT_SECURITY_GROUPS =\n  'SET_V2V_BEST_FIT_FLAVORS_AND_DEFAULT_SECURITY_GROUPS';\nexport const PLAN_WIZARD_EXITED = 'PLAN_WIZARD_EXITED';\nexport const PLAN_WIZARD_NEXT = 'PLAN_WIZARD_NEXT';\n","import { OSP_TENANT, EMS_CLUSTER } from '../../../../OverviewConstants';\n\nexport const getTenantsById = tenants =>\n  tenants.reduce(\n    (tenantsById, tenant) => ({\n      ...tenantsById,\n      [tenant.id]: { ...tenant }\n    }),\n    {}\n  );\n\nexport const getDestinationTenantIdsBySourceClusterId = transformation_mapping_items => {\n  const relevantMappings = transformation_mapping_items.filter(\n    item => item.destination_type === OSP_TENANT && item.source_type === EMS_CLUSTER\n  );\n  return relevantMappings.reduce(\n    (newObject, mapping) => ({\n      ...newObject,\n      [mapping.source_id]: mapping.destination_id\n    }),\n    {}\n  );\n};\n\nexport const getVmsWithTargetClusterName = (vms, destinationTenantIdsBySourceClusterId, tenantsWithAttributesById) =>\n  vms.map(vm => {\n    const destinationTenantId = destinationTenantIdsBySourceClusterId[vm.ems_cluster_id];\n    const tenant = destinationTenantId && tenantsWithAttributesById[destinationTenantId];\n    return {\n      ...vm,\n      target_cluster_name: tenant ? tenant.name : ''\n    };\n  });\n\nexport const allFitFlavorIdsForVM = (bestFitFlavors, vmId) => {\n  const flavorsSlugPrefix = 'flavors/';\n  const flavorForVM = bestFitFlavors.find(flavor => flavor.source_href_slug === `vms/${vmId}`);\n  const allFitFlavors = flavorForVM ? flavorForVM.all_fit : [];\n  return allFitFlavors.map(flavorSlug => flavorSlug.slice(flavorsSlugPrefix.length));\n};\n","import { connect } from 'react-redux';\n\nimport PlanWizardInstancePropertiesStep from './PlanWizardInstancePropertiesStep';\nimport * as PlanWizardInstancePropertiesStepActions from './PlanWizardInstancePropertiesStepActions';\nimport reducer from './PlanWizardInstancePropertiesStepReducer';\nimport { getVMStepSelectedVms } from '../PlanWizardAdvancedOptionsStep/helpers';\nimport { findEditingPlan } from '../../PlanWizardSelectors';\n\nexport const reducers = { planWizardInstancePropertiesStep: reducer };\n\nconst mapStateToProps = (\n  {\n    overview: { transformationMappings, transformationPlans, editingPlanId },\n    planWizardInstancePropertiesStep,\n    planWizardVMStep,\n    form: {\n      planWizardGeneralStep: {\n        values: { vm_choice_radio, infrastructure_mapping }\n      },\n      planWizardVMStep: {\n        values: { selectedVms }\n      },\n      planWizardInstancePropertiesStep: instancePropertiesStepForm\n    }\n  },\n  ownProps\n) => {\n  const editingPlan = findEditingPlan(transformationPlans, editingPlanId);\n  const allVms = [...planWizardVMStep.valid_vms, ...planWizardVMStep.invalid_vms, ...planWizardVMStep.conflict_vms];\n  const selectedMapping =\n    transformationMappings &&\n    infrastructure_mapping &&\n    transformationMappings.find(mapping => mapping.id === infrastructure_mapping);\n  return {\n    ...planWizardInstancePropertiesStep,\n    ...ownProps.data,\n    instancePropertiesStepForm,\n    vmStepSelectedVms: getVMStepSelectedVms(allVms, selectedVms).map(vm => ({\n      ...vm,\n      osp_security_group: {},\n      osp_flavor: {}\n    })),\n    selectedMapping,\n    editingPlan,\n    shouldPrefillForEditing:\n      editingPlan &&\n      editingPlan.transformation_mapping &&\n      editingPlan.transformation_mapping.id === infrastructure_mapping\n  };\n};\n\nconst mergeProps = (stateProps, dispatchProps, ownProps) => ({\n  ...stateProps,\n  ...ownProps.data,\n  ...dispatchProps\n});\n\nexport default connect(\n  mapStateToProps,\n  PlanWizardInstancePropertiesStepActions,\n  mergeProps\n)(PlanWizardInstancePropertiesStep);\n","import { connect } from 'react-redux';\n\nimport PlanWizardAdvancedOptionsStep from './PlanWizardAdvancedOptionsStep';\nimport * as PlanWizardAdvancedOptionsStepActions from './PlanWizardAdvancedOptionsStepActions';\nimport { getVMStepSelectedVms, getVmIdsWithProperty } from './helpers';\nimport reducer from './PlanWizardAdvancedOptionsStepReducer';\nimport { findEditingPlan } from '../../PlanWizardSelectors';\n\nexport const reducers = { planWizardAdvancedOptionsStep: reducer };\n\nconst mapStateToProps = (\n  {\n    planWizardAdvancedOptionsStep,\n    planWizardVMStep,\n    overview: { transformationPlans, editingPlanId },\n    form: {\n      planWizardGeneralStep: {\n        values: { vm_choice_radio, infrastructure_mapping }\n      },\n      planWizardVMStep: {\n        values: { selectedVms }\n      },\n      planWizardAdvancedOptionsStep: advancedOptionsStepForm\n    }\n  },\n  ownProps\n) => {\n  const editingPlan = findEditingPlan(transformationPlans, editingPlanId);\n  const shouldPrefillForEditing =\n    editingPlan &&\n    editingPlan.transformation_mapping &&\n    editingPlan.transformation_mapping.id === infrastructure_mapping;\n  const allVms = [...planWizardVMStep.valid_vms, ...planWizardVMStep.invalid_vms, ...planWizardVMStep.conflict_vms];\n\n  const configInfo = editingPlan && editingPlan.options && editingPlan.options.config_info;\n  const vmStepSelectedVms = getVMStepSelectedVms(allVms, selectedVms);\n\n  return {\n    ...planWizardAdvancedOptionsStep,\n    ...ownProps.data,\n    advancedOptionsStepForm,\n    vmStepSelectedVms,\n    initialValues: {\n      playbookVms: {\n        preMigration: shouldPrefillForEditing\n          ? getVmIdsWithProperty(editingPlan, 'pre_service', vmStepSelectedVms)\n          : [],\n        postMigration: shouldPrefillForEditing\n          ? getVmIdsWithProperty(editingPlan, 'post_service', vmStepSelectedVms)\n          : []\n      },\n      preMigrationPlaybook: shouldPrefillForEditing ? configInfo.pre_service_id : '',\n      postMigrationPlaybook: shouldPrefillForEditing ? configInfo.post_service_id : ''\n    },\n    enableReinitialize: true, // Tells redux-form to use new initialValues when they change\n    keepDirtyOnReinitialize: true,\n    editingPlan,\n    shouldPrefillForEditing\n  };\n};\n\nconst mergeProps = (stateProps, dispatchProps, ownProps) => ({\n  ...stateProps,\n  ...ownProps.data,\n  ...dispatchProps\n});\n\nexport default connect(\n  mapStateToProps,\n  PlanWizardAdvancedOptionsStepActions,\n  mergeProps\n)(PlanWizardAdvancedOptionsStep);\n","import { connect } from 'react-redux';\nimport PlanWizard from './PlanWizard';\nimport * as PlanWizardActions from './PlanWizardActions';\nimport { planWizardOverviewFilter, planWizardFormFilter } from './PlanWizardSelectors';\nimport { setMigrationsFilterAction, showConfirmModalAction, hideConfirmModalAction } from '../../OverviewActions';\n\nimport reducer from './PlanWizardReducer';\n\nexport const reducers = { planWizard: reducer };\n\nconst mapStateToProps = ({ overview, planWizard, form }, ownProps) => {\n  const selectedOverview = planWizardOverviewFilter(overview);\n  const selectedForms = planWizardFormFilter(form);\n  return {\n    ...planWizard,\n    ...selectedOverview,\n    ...selectedForms,\n    ...ownProps.data\n  };\n};\n\nconst actions = {\n  ...PlanWizardActions,\n  setMigrationsFilterAction,\n  showConfirmModalAction,\n  hideConfirmModalAction\n};\n\nconst mergeProps = (stateProps, dispatchProps, ownProps) => Object.assign(stateProps, ownProps.data, dispatchProps);\n\nexport default connect(\n  mapStateToProps,\n  actions,\n  mergeProps\n)(PlanWizard);\n","export const POST_V2V_MIGRATION_PLANS = 'POST_V2V_MIGRATION_PLANS';\nexport const PUT_V2V_MIGRATION_PLANS = 'PUT_V2V_MIGRATION_PLANS';\nexport const POST_V2V_MIGRATION_REQUESTS = 'POST_V2V_MIGRATION_REQUESTS';\n","import { connect } from 'react-redux';\nimport PlanWizardResultsStep from './PlanWizardResultsStep';\nimport * as PlanWizardResultsStepActions from './PlanWizardResultsStepActions';\n\nimport reducer from './PlanWizardResultsStepReducer';\nimport { findEditingPlan, getCurrentTargetProvider } from '../../PlanWizardSelectors';\n\nexport const reducers = { planWizardResultsStep: reducer };\n\nconst mapStateToProps = (\n  { planWizardResultsStep, planWizard, overview: { transformationPlans, transformationMappings, editingPlanId }, form },\n  ownProps\n) => ({\n  ...planWizardResultsStep,\n  ...planWizard,\n  ...ownProps.data,\n  targetProvider: getCurrentTargetProvider(form, transformationMappings),\n  editingPlan: findEditingPlan(transformationPlans, editingPlanId)\n});\n\nconst mergeProps = (stateProps, dispatchProps, ownProps) => Object.assign(stateProps, ownProps.data, dispatchProps);\n\nexport default connect(\n  mapStateToProps,\n  PlanWizardResultsStepActions,\n  mergeProps\n)(PlanWizardResultsStep);\n","import numeral from 'numeral';\nimport { V2V_VM_POST_VALIDATION_REASONS } from './PlanWizardVMStepConstants';\n\nconst manageDuplicateVMRows = (vm, vmIndex, uniqueIds) => {\n  const index = vm.id && uniqueIds.indexOf(vm.id);\n  if (index > -1) {\n    uniqueIds.splice(index, 1);\n  } else if (index === -1) {\n    vm.reason = V2V_VM_POST_VALIDATION_REASONS.duplicate;\n    vm.warning = false;\n    vm.valid = false;\n    vm.invalid = true;\n    vm.id = `duplicate-${vm.id}-${vmIndex}`;\n  }\n};\n\nconst manageBlankReason = vm => {\n  if (!vm.reason) {\n    vm.reason = V2V_VM_POST_VALIDATION_REASONS.no_info_available;\n  }\n};\n\nconst manageNoIdVMRows = (vm, vmIndex) => (!vm.id ? { ...vm, id: `no-id-${vmIndex}` } : vm);\n\nconst fillMissingIds = vms => vms && vms.map((vm, vmIndex) => (vm.id ? vm : manageNoIdVMRows(vm, vmIndex)));\n\nconst manageOddCSVImportErrors = (vm, vmIndex, uniqueIds) => {\n  manageDuplicateVMRows(vm, vmIndex, uniqueIds);\n  manageBlankReason(vm);\n};\n\nexport const parseVmPath = vm => {\n  if (vm.path === undefined) {\n    return { provider: '', datacenter: '', folder: '' };\n  }\n  const [provider, datacenter, ...folderParts] = vm.path.split('/');\n  return {\n    provider,\n    datacenter: datacenter || '',\n    folder: `/${folderParts.join('/')}`\n  };\n};\n\nconst attachMetadata = (vms, meta) => {\n  if (!vms) return [];\n  const csvFieldsByVmName =\n    meta.csvRows &&\n    meta.csvRows.length > 0 &&\n    meta.csvRows.reduce(\n      (newObject, row) => ({\n        ...newObject,\n        [row.name]: row\n      }),\n      {}\n    );\n  return vms.map(vm => ({\n    ...vm,\n    ...parseVmPath(vm),\n    csvFields: csvFieldsByVmName && csvFieldsByVmName[vm.name]\n  }));\n};\n\nexport const _formatValidVms = (payloadVms, meta) => {\n  const vms = attachMetadata(payloadVms, meta);\n  const uniqueIds = vms && [...new Set(vms.map(value => value.id))];\n  return (\n    vms &&\n    vms.map((v, vIndex) => {\n      v.valid = true;\n      v.allocated_size = numeral(v.allocated_size).format('0.00b');\n      v.reason = V2V_VM_POST_VALIDATION_REASONS[v.reason];\n      manageDuplicateVMRows(v, vIndex, uniqueIds);\n      return v;\n    })\n  );\n};\n\nexport const _formatInvalidVms = (payloadVms, meta) => {\n  const vms = attachMetadata(payloadVms, meta);\n  const backfilledVms = fillMissingIds(vms);\n  const uniqueIds = backfilledVms && [...new Set(backfilledVms.map(vm => vm.id))];\n  return (\n    backfilledVms &&\n    backfilledVms.map((v, vIndex) => {\n      v.allocated_size = numeral(v.allocated_size).format('0.00b');\n      v.reason = V2V_VM_POST_VALIDATION_REASONS[v.reason];\n      if (\n        v.reason === V2V_VM_POST_VALIDATION_REASONS.migrated ||\n        v.reason === V2V_VM_POST_VALIDATION_REASONS.in_other_plan\n      ) {\n        v.warning = true;\n      } else {\n        v.invalid = true;\n      }\n      manageOddCSVImportErrors(v, vIndex, uniqueIds);\n      return v;\n    })\n  );\n};\n\nexport const _formatConflictVms = (payloadVms, meta) => {\n  const vms = attachMetadata(payloadVms, meta);\n  const inactiveVMCount = (vms && vms.filter(vm => vm.cluster === '' || vm.path === '').length) || 0;\n  const allVMCount = (vms && vms.length) || 0;\n  const vmCount = inactiveVMCount > 0 ? allVMCount - inactiveVMCount : allVMCount;\n  const backfilledVms = fillMissingIds(vms);\n  const uniqueIds = backfilledVms && [...new Set(backfilledVms.map(value => value.id))];\n  return (\n    backfilledVms &&\n    backfilledVms.map((v, vIndex) => {\n      v.allocated_size = numeral(v.allocated_size).format('0.00b');\n      v.reason = V2V_VM_POST_VALIDATION_REASONS[v.reason];\n\n      if (v.cluster === '' || v.path === '') {\n        v.reason = V2V_VM_POST_VALIDATION_REASONS.inactive;\n        v.invalid = true;\n      } else if (vmCount === 1) {\n        v.reason = V2V_VM_POST_VALIDATION_REASONS.ok;\n        v.valid = true;\n      } else if (vmCount > 1) {\n        v.warning = true;\n      }\n\n      manageOddCSVImportErrors(v, vIndex, uniqueIds);\n      return v;\n    })\n  );\n};\n\nexport const getVmIds = editingPlan =>\n  editingPlan &&\n  editingPlan.options &&\n  editingPlan.options.config_info &&\n  editingPlan.options.config_info.actions &&\n  editingPlan.options.config_info.actions.map(action => action.vm_id);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { noop, Button, Icon, FormControl } from 'patternfly-react';\n\n/**\n * This is a custom toolbar find w/ limited functionality of Toolbar.Find\n * Note: does not implement the \"findNext\" and \"findPrevious\" functionality\n *\n * This should be added in a future release.\n */\nclass CustomToolbarFind extends React.Component {\n  state = {\n    dropdownShown: false,\n    currentValue: ''\n  };\n\n  onValueKeyPress = keyEvent => {\n    const { onEnter } = this.props;\n    const { currentValue } = this.state;\n\n    if (keyEvent.key === 'Enter' && onEnter) {\n      onEnter(currentValue);\n    }\n  };\n\n  handleValueChange = event => {\n    const { onChange } = this.props;\n\n    this.setState({ currentValue: event.target.value });\n\n    if (onChange) {\n      onChange(event.target.value);\n    }\n  };\n\n  hideDropdown = () => {\n    const { onExit } = this.props;\n    this.setState({ dropdownShown: false });\n    onExit();\n  };\n\n  toggleDropdownShown = () => {\n    this.setState(prevState => ({ dropdownShown: !prevState.dropdownShown }));\n  };\n\n  render() {\n    const { dropdownShown, currentValue } = this.state;\n    const { className, placeholder } = this.props;\n\n    const classes = classNames('form-group toolbar-pf-find', className);\n\n    const dropdownClasses = classNames('find-pf-dropdown-container', {\n      show: dropdownShown\n    });\n\n    return (\n      <div className={classes}>\n        <Button bsStyle=\"link\" className=\"btn-find\" onClick={this.toggleDropdownShown}>\n          <Icon type=\"fa\" name=\"search\" />\n        </Button>\n        <div className={dropdownClasses}>\n          <FormControl\n            type=\"text\"\n            id=\"find\"\n            value={currentValue}\n            placeholder={placeholder}\n            onKeyPress={e => this.onValueKeyPress(e)}\n            onChange={this.handleValueChange}\n          />\n          <div className=\"find-pf-buttons\">\n            {/* {this.renderCounts()} */}\n            <Button bsStyle=\"link\" className=\"btn-find-close\" onClick={this.hideDropdown}>\n              <Icon type=\"pf\" name=\"close\" />\n            </Button>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nCustomToolbarFind.propTypes = {\n  /** Additional css classes */\n  className: PropTypes.string,\n  /** Placeholder text when empty */\n  placeholder: PropTypes.string,\n  /** Callback function when user hits the enter key */\n  onEnter: PropTypes.func,\n  /** Callback function when the find value changes */\n  onChange: PropTypes.func,\n  /** Callback function when exit clicked */\n  onExit: PropTypes.func\n};\n\nCustomToolbarFind.defaultProps = {\n  className: '',\n  placeholder: '',\n  onEnter: noop,\n  onChange: noop,\n  onExit: noop\n};\n\nexport default CustomToolbarFind;\n","/**\n * Simple client side search filter for VM table\n *\n * rows: [{\n *  name: 'cfmetest67',\n *  path: 'vCenter/Datacenter',\n *  cluster: 'Raleigh'\n *  ...\n * }]\n */\nexport default function searchFilter(searchFilterValue, rows) {\n  if (searchFilterValue && rows && rows.length) {\n    const filteredRows = [];\n    rows.forEach(row => {\n      const match = Object.values(row).some(value => `${value || ''}`.indexOf(searchFilterValue) > -1);\n      if (match) {\n        filteredRows.push(row);\n      }\n    });\n    return filteredRows;\n  }\n  return rows;\n}\n","/**\n * Simple client side row filter for VM table\n *\n * activeFilters: {\n *  label: 'VM Name: {value}',\n *  field: {id: \"name\", title: \"VM Name\", placeholder: \"Filter by VM Name\", filterType: \"text\"},\n *  value: '{value}'\n * }\n *\n * rows: [{\n *  name: 'cfmetest67',\n *  path: 'vCenter/Datacenter',\n *  cluster: 'Raleigh'\n *  ...\n * }]\n */\nexport default function rowFilter(activeFilters, rows) {\n  if (activeFilters && activeFilters.length && rows && rows.length) {\n    const filteredRows = [];\n    rows.forEach(row => {\n      const match = activeFilters.every(\n        filter =>\n          row[filter.field.id] && filter.value\n            ? `${row[filter.field.id].toLowerCase()}`.indexOf(filter.value.toLowerCase()) > -1\n            : null\n      );\n      if (match) {\n        filteredRows.push(row);\n      }\n    });\n    return filteredRows;\n  }\n  return rows;\n}\n","import { connect } from 'react-redux';\nimport PlanWizardVMStep from './PlanWizardVMStep';\nimport * as PlanWizardVMStepActions from './PlanWizardVMStepActions';\n\nimport reducer from './PlanWizardVMStepReducer';\nimport { findEditingPlan } from '../../PlanWizardSelectors';\n\nexport const reducers = { planWizardVMStep: reducer };\n\nconst mapStateToProps = ({ planWizardVMStep, form, overview }, ownProps) => {\n  const editingPlan = findEditingPlan(overview.transformationPlans, overview.editingPlanId);\n  const infrastructure_mapping_id = form.planWizardGeneralStep.values.infrastructure_mapping;\n  return {\n    ...planWizardVMStep,\n    ...ownProps.data,\n    vm_choice_radio: form.planWizardGeneralStep.values.vm_choice_radio,\n    infrastructure_mapping_id,\n    editingPlan,\n    shouldPrefillForEditing:\n      editingPlan &&\n      editingPlan.transformation_mapping &&\n      editingPlan.transformation_mapping.id === infrastructure_mapping_id,\n    formSelectedVms: form.planWizardVMStep && form.planWizardVMStep.values && form.planWizardVMStep.values.selectedVms\n  };\n};\n\nexport default connect(\n  mapStateToProps,\n  PlanWizardVMStepActions\n)(PlanWizardVMStep);\n","import { connect } from 'react-redux';\nimport MappingWizardResultsStep from './MappingWizardResultsStep';\nimport * as MappingWizardResultsStepActions from './MappingWizardResultsStepActions';\nimport * as RouterActions from '../../../../../../../../redux/actions/routerActions';\n\nimport reducer from './MappingWizardResultsStepReducer';\n\nexport const reducers = { mappingWizardResultsStep: reducer };\n\nconst mapStateToProps = (\n  {\n    mappingWizardResultsStep,\n    mappingWizard,\n    mappingWizardGeneralStep: { editingMapping },\n    form: { mappingWizardGeneralStep }\n  },\n  ownProps\n) => ({\n  editingMapping,\n  targetProvider: mappingWizardGeneralStep.values.targetProvider,\n  ...mappingWizardResultsStep,\n  ...mappingWizard,\n  ...ownProps.data\n});\n\nconst mergeProps = (stateProps, dispatchProps, ownProps) => Object.assign(stateProps, ownProps.data, dispatchProps);\n\nexport default connect(\n  mapStateToProps,\n  { ...MappingWizardResultsStepActions, ...RouterActions },\n  mergeProps\n)(MappingWizardResultsStep);\n","import { networkKey } from '../../../../../common/networkKey';\nimport { normalizeCloudNetworkHref } from './helpers';\n\nexport const uniqueNetworks = (networks = []) =>\n  networks.reduce(\n    (networksMap, network) => ({\n      ...networksMap,\n      [networkKey(network)]: networksMap[networkKey(network)]\n        ? [...networksMap[networkKey(network)], network]\n        : [network]\n    }),\n    {}\n  );\n\nexport const combineNetworks = (privateNetworks, publicNetworks) => {\n  const normalizedPublicNetworks = publicNetworks.filter(network => network.shared).map(normalizeCloudNetworkHref);\n\n  return [...normalizedPublicNetworks, ...privateNetworks].reduce((networks, network) => {\n    const networkIsDuplicate = networks.some(ntwk => ntwk.id === network.id);\n\n    if (networkIsDuplicate) {\n      return networks;\n    }\n\n    return [...networks, network];\n  }, []);\n};\n","import URI from 'urijs';\n\nimport {\n  getTransformationMappingItemsBySourceType,\n  getTransformationMappingItemsByDestinationType\n} from '../../../../helpers';\nimport API from '../../../../../../../../../../common/API';\nimport {\n  TRANSFORMATION_MAPPING_ITEM_SOURCE_TYPES,\n  TRANSFORMATION_MAPPING_ITEM_DESTINATION_TYPES\n} from '../../../../MappingWizardConstants';\nimport {\n  QUERY_ATTRIBUTES,\n  FETCH_NETWORK_URLS,\n  NETWORK_ATTRIBUTES,\n  HAS_CLOUD_NETWORKS\n} from '../../MappingWizardNetworksStepConstants';\nimport { uniqueNetworks, combineNetworks } from '../../MappingWizardNetworksStepSelectors';\nimport { networkKey } from '../../../../../../../common/networkKey';\n\nexport const getRepresentatives = (groupedNetworks = {}) => {\n  const representatives = [];\n  for (const key in groupedNetworks) {\n    if ({}.hasOwnProperty.call(groupedNetworks, key)) {\n      representatives.push(groupedNetworks[key][0]);\n    }\n  }\n  return representatives;\n};\n\nexport const sourceNetworksFilter = (groupedSourceNetworks, networksStepMappings) => {\n  const mappedNetworks = networksStepMappings.reduce((mappedNetworksArray, targetClusterWithNetworkMappings) => {\n    const sourceNetworks = targetClusterWithNetworkMappings.nodes.reduce(\n      (networks, networkMapping) => [...networks, ...networkMapping.nodes],\n      []\n    );\n    return [...mappedNetworksArray, ...sourceNetworks];\n  }, []);\n\n  return getRepresentatives(groupedSourceNetworks).filter(\n    network => !mappedNetworks.some(mappedNetwork => networkKey(mappedNetwork) === networkKey(network))\n  );\n};\n\nexport const clustersMappingWithTreeViewAttrs = clusterMapping => ({\n  ...clusterMapping,\n  text: clusterMapping.name,\n  selectable: false\n});\n\nexport const targetNetworkWithTreeViewAttrs = targetNetwork => ({\n  ...targetNetwork,\n  text: `${targetNetwork.providerName} \\\\ ${targetNetwork.name}`,\n  selectable: true,\n  selected: false,\n  state: {\n    expanded: true\n  }\n});\n\nexport const sourceNetworkWithTreeViewAttrs = (sourceNetwork, selectedCluster) => ({\n  ...sourceNetwork,\n  text: `${sourceNetwork.providerName} \\\\ ${sourceNetwork.name}`,\n  icon: 'fa fa-file-o',\n  sourceClusterId: selectedCluster.id,\n  selectable: true,\n  selected: false\n});\n\nexport const networkGroupingForRep = (sourceNetworkRep, groupedSourceNetworks, selectedCluster) => {\n  const sourceNetworks = groupedSourceNetworks[networkKey(sourceNetworkRep)];\n  return sourceNetworks.map(sourceNetwork => sourceNetworkWithTreeViewAttrs(sourceNetwork, selectedCluster));\n};\n\nexport const dedupeMappedSourceNetworks = networksMapping => {\n  const { nodes: sourceNetworks, ...targetNetwork } = networksMapping;\n  const groupedNetworks = uniqueNetworks(sourceNetworks);\n  return {\n    ...targetNetwork,\n    nodes: getRepresentatives(groupedNetworks)\n  };\n};\n\nexport const dedupeMappedTargetNetworks = networksStepMapping => {\n  const { nodes: networksMappings, ...targetCluster } = networksStepMapping;\n  const groupedMappings = uniqueNetworks(networksMappings);\n  return {\n    ...targetCluster,\n    nodes: getRepresentatives(groupedMappings)\n  };\n};\n\nexport const mappingsForTreeView = mappings =>\n  mappings.reduce((updatedMappings, networksStepMapping) => {\n    const { nodes: networksMappings } = dedupeMappedTargetNetworks(networksStepMapping);\n    const updatedNetworksMappings = networksMappings.reduce(\n      (dedupedMappings, networksMapping) => [...dedupedMappings, dedupeMappedSourceNetworks(networksMapping)],\n      []\n    );\n    const updatedMapping = {\n      ...networksStepMapping,\n      nodes: updatedNetworksMappings\n    };\n    return [...updatedMappings, updatedMapping];\n  }, []);\n\nexport const mappingWithTargetNetworkRemoved = (networksStepMapping, targetNetworkToRemove) => {\n  const { nodes: networksMappings, ...targetCluster } = networksStepMapping;\n  const updatedNetworksMappings = networksMappings.filter(\n    targetNetworkWithSourceNetworks => targetNetworkWithSourceNetworks.id !== targetNetworkToRemove.id\n  );\n  return updatedNetworksMappings.length === 0\n    ? null\n    : {\n        ...targetCluster,\n        nodes: updatedNetworksMappings\n      };\n};\n\nexport const mappingWithSourceNetworkRemoved = (networksMapping, sourceNetworkToRemove) => {\n  const { nodes: sourceNetworks, ...targetNetwork } = networksMapping;\n  const updatedSourceNetworks = sourceNetworks.filter(\n    sourceNetwork => networkKey(sourceNetwork) !== networkKey(sourceNetworkToRemove)\n  );\n  return updatedSourceNetworks.length === 0\n    ? null\n    : {\n        ...targetNetwork,\n        nodes: updatedSourceNetworks\n      };\n};\n\nconst getMappedTargetNetworks = (networks, mappedNetworkIds) =>\n  networks.filter(network => mappedNetworkIds.some(id => id === network.id));\n\nconst getMappedSourceNetworks = (targetNetwork, sourceNetworks, transformation) => {\n  const networkMappingItems = getTransformationMappingItemsBySourceType(\n    TRANSFORMATION_MAPPING_ITEM_SOURCE_TYPES.network,\n    transformation\n  );\n  return sourceNetworks.filter(sourceNetwork =>\n    networkMappingItems.some(item => item.destination_id === targetNetwork.id && item.source_id === sourceNetwork.id)\n  );\n};\n\nconst clusterWithNetworksUrl = (id, provider) => {\n  const uri = new URI(`${FETCH_NETWORK_URLS[provider]}/${id}`);\n  uri.addSearch({ attributes: QUERY_ATTRIBUTES[provider] });\n\n  return uri.toString();\n};\n\nconst targetNetworkPromises = (targetClusterIds, targetProvider) =>\n  targetClusterIds.map(\n    id =>\n      new Promise((resolve, reject) => {\n        API.get(clusterWithNetworksUrl(id, targetProvider))\n          .then(res => {\n            const updatedTargetNetworks = res.data[NETWORK_ATTRIBUTES[targetProvider]].map(targetNetwork => ({\n              ...targetNetwork,\n              clusterId: id,\n              providerName: res.data.ext_management_system.name\n            }));\n            resolve({ ...res.data, [NETWORK_ATTRIBUTES[targetProvider]]: updatedTargetNetworks });\n          })\n          .catch(e => reject(e));\n      })\n  );\n\nconst sourceNetworkPromises = sourceClusterIds =>\n  sourceClusterIds.map(\n    id =>\n      new Promise((resolve, reject) => {\n        API.get(clusterWithNetworksUrl(id, 'source'))\n          .then(res => {\n            resolve(\n              res.data.lans.map(lan => ({\n                ...lan,\n                sourceClusterId: id,\n                clusterId: id,\n                providerName: res.data.ext_management_system.name\n              }))\n            );\n          })\n          .catch(e => reject(e));\n      })\n  );\n\nconst publicNetworksUrl = targetProviderId => {\n  const uri = new URI(`${FETCH_NETWORK_URLS.public}/${targetProviderId}/cloud_networks`);\n  uri.addSearch({ expand: 'resources' });\n  return uri.toString();\n};\n\nconst publicNetworksPromises = (clusterMappings, targetProvider) => {\n  if (!HAS_CLOUD_NETWORKS[targetProvider]) return [Promise.resolve([])];\n  return clusterMappings.map(\n    mapping =>\n      new Promise((resolve, reject) => {\n        API.get(publicNetworksUrl(mapping.ext_management_system.id))\n          .then(res =>\n            resolve(\n              res.data.resources.map(network => ({\n                ...network,\n                providerName: mapping.ext_management_system.name,\n                clusterId: mapping.id\n              }))\n            )\n          )\n          .catch(e => reject(e));\n      })\n  );\n};\n\nexport const createNetworksMappings = (transformation, targetProvider, clusterMappings) =>\n  new Promise((resolve, reject) => {\n    const targetClusterIds = getTransformationMappingItemsByDestinationType(\n      TRANSFORMATION_MAPPING_ITEM_DESTINATION_TYPES[targetProvider].cluster,\n      transformation\n    ).map(item => item.destination_id);\n    const sourceClusterIds = getTransformationMappingItemsBySourceType(\n      TRANSFORMATION_MAPPING_ITEM_SOURCE_TYPES.cluster,\n      transformation\n    ).map(item => item.source_id);\n    const targetNetworkIds = getTransformationMappingItemsByDestinationType(\n      TRANSFORMATION_MAPPING_ITEM_DESTINATION_TYPES[targetProvider].network,\n      transformation\n    ).map(item => item.destination_id);\n\n    Promise.all([\n      Promise.all(targetNetworkPromises(targetClusterIds, targetProvider)),\n      Promise.all(sourceNetworkPromises(sourceClusterIds)),\n      Promise.all(publicNetworksPromises(clusterMappings, targetProvider))\n    ])\n      .then(res => {\n        const networksMappings = [];\n        const [targetClustersWithNetworks, sourceNetworkResults, publicNetworksResults] = res;\n        const sourceNetworks = sourceNetworkResults.reduce(\n          (networks, resolvedPromise) => [...networks, ...resolvedPromise],\n          []\n        );\n        const publicNetworks = publicNetworksResults.reduce(\n          (networks, resolvedPromise) => [...networks, ...resolvedPromise],\n          []\n        );\n        targetClustersWithNetworks.forEach(mapping => {\n          const privateNetworks = mapping[NETWORK_ATTRIBUTES[targetProvider]];\n          const nodes = getMappedTargetNetworks(combineNetworks(privateNetworks, publicNetworks), targetNetworkIds).map(\n            targetNetwork => ({\n              ...targetNetworkWithTreeViewAttrs(targetNetwork),\n              nodes: getMappedSourceNetworks(targetNetwork, sourceNetworks, transformation).map(network =>\n                sourceNetworkWithTreeViewAttrs(network, { id: network.sourceClusterId })\n              )\n            })\n          );\n\n          networksMappings.push({\n            ...mapping,\n            text: mapping.name,\n            selectable: false,\n            state: {\n              expanded: true\n            },\n            nodes\n          });\n        });\n\n        resolve(networksMappings);\n      })\n      .catch(e => reject(e));\n  });\n","import { connect } from 'react-redux';\nimport MappingWizardNetworksStep from './MappingWizardNetworksStep';\nimport * as MappingWizardNetworksStepActions from './MappingWizardNetworksStepActions';\nimport { showAlertAction } from '../../MappingWizardActions';\nimport { uniqueNetworks, combineNetworks } from './MappingWizardNetworksStepSelectors';\n\nimport reducer from './MappingWizardNetworksStepReducer';\n\nexport const reducers = { mappingWizardNetworksStep: reducer };\n\nconst mapStateToProps = (\n  { mappingWizardNetworksStep, form, mappingWizardGeneralStep: { editingMapping } },\n  ownProps\n) => ({\n  ...mappingWizardNetworksStep,\n  ...ownProps.data,\n  editingMapping,\n  clusterMappings: form.mappingWizardClustersStep.values.clusterMappings,\n  groupedSourceNetworks: uniqueNetworks(mappingWizardNetworksStep.sourceNetworks),\n  groupedTargetNetworks: uniqueNetworks(\n    combineNetworks(mappingWizardNetworksStep.targetNetworks, mappingWizardNetworksStep.publicCloudNetworks)\n  ),\n  targetProvider: form.mappingWizardGeneralStep.values.targetProvider,\n  mappingWizardNetworksStepForm: form.mappingWizardNetworksStep,\n  initialValues: {\n    networksMappings: []\n  }\n});\n\nconst actions = {\n  ...MappingWizardNetworksStepActions,\n  showAlertAction\n};\n\nconst mergeProps = (stateProps, dispatchProps, ownProps) => Object.assign(stateProps, ownProps.data, dispatchProps);\n\nexport default connect(\n  mapStateToProps,\n  actions,\n  mergeProps\n)(MappingWizardNetworksStep);\n","import URI from 'urijs';\n\nimport {\n  getTransformationMappingItemsBySourceType,\n  getTransformationMappingItemsByDestinationType\n} from '../../../../helpers';\nimport API from '../../../../../../../../../../common/API';\nimport {\n  TRANSFORMATION_MAPPING_ITEM_SOURCE_TYPES,\n  TRANSFORMATION_MAPPING_ITEM_DESTINATION_TYPES\n} from '../../../../MappingWizardConstants';\nimport { QUERY_ATTRIBUTES, FETCH_STORAGE_URLS, STORAGE_ATTRIBUTES } from '../../MappingWizardDatastoresStepConstants';\n\nexport const datastoreUsedSpace = (datastore = {}) => datastore.total_space - datastore.free_space;\n\nexport const totalUsedSpace = (datastores = []) =>\n  datastores.reduce((totalSpace, datastore) => (totalSpace += datastoreUsedSpace(datastore)), 0);\n\nexport const targetDatastoreAvailableSpace = (targetDatastore, datastoresStepMappings) => {\n  const datastoresMappings = datastoresStepMappings.reduce(\n    (mappings, targetClusterWithDatastoresMappings) => mappings.concat(targetClusterWithDatastoresMappings.nodes),\n    []\n  );\n\n  const matchingDatastoresMapping = datastoresMappings.find(\n    targetDatastoreWithSourceDatastores => targetDatastoreWithSourceDatastores.id === targetDatastore.id\n  );\n\n  if (datastoresMappings.length > 0 && matchingDatastoresMapping) {\n    return targetDatastore.free_space - totalUsedSpace(matchingDatastoresMapping.nodes);\n  }\n  return targetDatastore.free_space;\n};\n\nexport const sourceDatastoreInfo = sourceDatastore =>\n  sprintf(__('%s \\\\ %s \\\\ %s'), sourceDatastore.providerName, sourceDatastore.datacenterName, sourceDatastore.name);\n\nexport const targetDatastoreInfo = targetDatastore =>\n  sprintf(__('%s \\\\ %s'), targetDatastore.providerName, targetDatastore.name);\n\nexport const targetDatastoreTreeViewInfo = targetDatastore => targetDatastore.name;\n\nexport const targetDatastoreWithTreeviewAttrs = targetDatastore => ({\n  ...targetDatastore,\n  text: targetDatastoreTreeViewInfo(targetDatastore),\n  selectable: true,\n  selected: false,\n  state: {\n    expanded: true\n  }\n});\n\nexport const sourceDatastoreWithTreeviewAttrs = sourceDatastore => ({\n  ...sourceDatastore,\n  text: sourceDatastore.name,\n  icon: 'fa fa-file-o',\n  selectable: true,\n  selected: false\n});\n\nexport const errorMessage = __('The size of the selected source datastores exceeds the available space in the target datastore'); // prettier-ignore\n\nexport const removeSourceDatastore = (datastoresMapping, nodeToRemove) => {\n  const { nodes: sourceDatastores, ...targetDatastore } = datastoresMapping;\n  const updatedSourceDatastores = sourceDatastores.filter(sourceDatastore => sourceDatastore.id !== nodeToRemove.id);\n  return updatedSourceDatastores.length === 0\n    ? undefined\n    : {\n        ...targetDatastore,\n        nodes: updatedSourceDatastores\n      };\n};\n\nexport const updateMappings = (targetClusterWithDatastoresMappings, nodeToRemove) => {\n  const isTargetDatastore = nodeToRemove.nodes;\n  const { nodes: datastoresMappings, ...targetCluster } = targetClusterWithDatastoresMappings;\n\n  const updatedDatastoresMappings = isTargetDatastore\n    ? datastoresMappings.filter(\n        targetDatastoreWithSourceDatastores => targetDatastoreWithSourceDatastores.id !== nodeToRemove.id\n      )\n    : datastoresMappings\n        .map(datastoresMapping => removeSourceDatastore(datastoresMapping, nodeToRemove))\n        .filter(item => item !== undefined);\n\n  return updatedDatastoresMappings.length === 0\n    ? undefined\n    : {\n        ...targetCluster,\n        nodes: updatedDatastoresMappings\n      };\n};\n\nconst getMappedTargetDatastores = (datastores, mappedDatastoreIds) =>\n  datastores.filter(datastore => mappedDatastoreIds.some(id => id === datastore.id));\n\nconst getMappedSourceDatastores = (targetDatastore, sourceDatastores, transformation) => {\n  const datastoreMappingItems = getTransformationMappingItemsBySourceType(\n    TRANSFORMATION_MAPPING_ITEM_SOURCE_TYPES.datastore,\n    transformation\n  );\n  return sourceDatastores.filter(sourceDatastore =>\n    datastoreMappingItems.some(\n      item => item.destination_id === targetDatastore.id && item.source_id === sourceDatastore.id\n    )\n  );\n};\n\nconst clusterWithStoragesUrl = (id, provider) => {\n  const uri = new URI(`${FETCH_STORAGE_URLS[provider]}/${id}`);\n  uri.addSearch({ attributes: QUERY_ATTRIBUTES[provider] });\n\n  return uri.toString();\n};\n\nconst targetDatastorePromises = (targetClusterIds, targetProvider) =>\n  targetClusterIds.map(\n    id =>\n      new Promise((resolve, reject) => {\n        API.get(clusterWithStoragesUrl(id, targetProvider))\n          .then(res => {\n            resolve(res.data);\n          })\n          .catch(e => reject(e));\n      })\n  );\n\nconst sourceDatastorePromises = sourceClusterIds =>\n  sourceClusterIds.map(\n    id =>\n      new Promise((resolve, reject) => {\n        API.get(clusterWithStoragesUrl(id, 'source'))\n          .then(res => {\n            resolve(res.data.storages.map(storage => ({ ...storage, sourceClusterId: id })));\n          })\n          .catch(e => reject(e));\n      })\n  );\n\nexport const createDatastoresMappings = (transformation, targetProvider) =>\n  new Promise((resolve, reject) => {\n    const targetClusterIds = getTransformationMappingItemsByDestinationType(\n      TRANSFORMATION_MAPPING_ITEM_DESTINATION_TYPES[targetProvider].cluster,\n      transformation\n    ).map(item => item.destination_id);\n    const sourceClusterIds = getTransformationMappingItemsBySourceType(\n      TRANSFORMATION_MAPPING_ITEM_SOURCE_TYPES.cluster,\n      transformation\n    ).map(item => item.source_id);\n    const targetDatastoreIds = getTransformationMappingItemsByDestinationType(\n      TRANSFORMATION_MAPPING_ITEM_DESTINATION_TYPES[targetProvider].datastore,\n      transformation\n    ).map(item => item.destination_id);\n\n    Promise.all([\n      ...targetDatastorePromises(targetClusterIds, targetProvider),\n      ...sourceDatastorePromises(sourceClusterIds)\n    ])\n      .then(res => {\n        const datastoresMappings = [];\n        const targetClustersWithDatastores = res.filter(resolvedPromise => !resolvedPromise.length);\n        const sourceDatastores = res.reduce((datastores, resolvedPromise) => {\n          if (resolvedPromise.length) {\n            return [...datastores, ...resolvedPromise];\n          }\n          return datastores;\n        }, []);\n        targetClustersWithDatastores.forEach(mapping => {\n          const nodes = getMappedTargetDatastores(mapping[STORAGE_ATTRIBUTES[targetProvider]], targetDatastoreIds).map(\n            targetDatastore => ({\n              ...targetDatastoreWithTreeviewAttrs(targetDatastore),\n              nodes: getMappedSourceDatastores(targetDatastore, sourceDatastores, transformation).map(datastore =>\n                sourceDatastoreWithTreeviewAttrs(datastore)\n              )\n            })\n          );\n\n          datastoresMappings.push({\n            ...mapping,\n            text: mapping.name,\n            selectable: false,\n            state: {\n              expanded: true\n            },\n            nodes\n          });\n        });\n\n        resolve(datastoresMappings);\n      })\n      .catch(e => reject(e));\n  });\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport cx from 'classnames';\n\nimport { Button, TreeView, Spinner } from 'patternfly-react';\n\nconst MappingWizardTreeView = ({ mappings, selectNode, removeNode, removeAll, selectedNode, loading }) => (\n  <div className=\"treeview-container\">\n    <div className={cx('treeview-container--body', { loading })}>\n      <Spinner loading={loading}>\n        {mappings.length > 0 ? (\n          <TreeView nodes={mappings} selectNode={selectNode} highlightOnSelect highlightOnHover />\n        ) : (\n          <div className=\"treeview__is-empty\">\n            <h3>{__('No mappings have been added yet')}</h3>\n          </div>\n        )}\n      </Spinner>\n    </div>\n    <div className=\"treeview-container--buttons\">\n      <Button disabled={mappings.length === 0 || !selectedNode} onClick={removeNode}>\n        {__('Remove Selected')}\n      </Button>{' '}\n      <Button disabled={mappings.length === 0} onClick={removeAll}>\n        {__('Remove All')}\n      </Button>\n    </div>\n  </div>\n);\n\nMappingWizardTreeView.propTypes = {\n  mappings: PropTypes.array,\n  selectNode: PropTypes.func,\n  removeNode: PropTypes.func,\n  removeAll: PropTypes.func,\n  selectedNode: PropTypes.object,\n  loading: PropTypes.bool\n};\n\nexport default MappingWizardTreeView;\n","import { connect } from 'react-redux';\n\nimport MappingWizardDatastoresStep from './MappingWizardDatastoresStep';\nimport * as MappingWizardDatastoresStepActions from './MappingWizardDatastoresStepActions';\nimport { showAlertAction, hideAlertAction } from '../../MappingWizardActions';\n\nimport reducer from './MappingWizardDatastoresStepReducer';\n\nexport const reducers = { mappingWizardDatastoresStep: reducer };\n\nconst mapStateToProps = (\n  {\n    mappingWizardDatastoresStep,\n    mappingWizardGeneralStep: { editingMapping },\n    form: {\n      mappingWizardClustersStep: { values: clustersStepForm },\n      mappingWizardGeneralStep: { values: generalStepForm },\n      mappingWizardDatastoresStep: mappingWizardDatastoresStepForm\n    }\n  },\n  ownProps\n) => ({\n  ...mappingWizardDatastoresStep,\n  ...ownProps.data,\n  editingMapping,\n  mappingWizardDatastoresStepForm,\n  clusterMappings: clustersStepForm.clusterMappings,\n  targetProvider: generalStepForm.targetProvider,\n  initialValues: {\n    datastoresMappings: []\n  }\n});\n\nconst actions = {\n  ...MappingWizardDatastoresStepActions,\n  showAlertAction,\n  hideAlertAction\n};\n\nconst mergeProps = (stateProps, dispatchProps, ownProps) => Object.assign(stateProps, ownProps.data, dispatchProps);\n\nexport default connect(\n  mapStateToProps,\n  actions,\n  mergeProps\n)(MappingWizardDatastoresStep);\n","import { CONVERSION_HOST_TYPES } from '../../../../../../../../common/constants';\n\nexport const sourceClustersFilter = (sourceClustersToFilter, clustersStepMappings) => {\n  const mappedSourceClusters = clustersStepMappings.reduce(\n    (sourceClusters, targetClusterWithSourceClusters) => sourceClusters.concat(targetClusterWithSourceClusters.nodes),\n    []\n  );\n\n  return sourceClustersToFilter.filter(\n    sourceCluster => !mappedSourceClusters.some(mappedSourceCluster => mappedSourceCluster.id === sourceCluster.id)\n  );\n};\n\nexport const conversionHostsFilter = (conversionHosts, providerType) =>\n  conversionHosts.filter(host => host.resource && host.resource.type === CONVERSION_HOST_TYPES[providerType]);\n","import { groupClusterTransformationItemsByDestinationId } from '../../../../helpers';\n\nexport const targetClusterWithExtendedData = targetCluster => ({\n  ...targetCluster,\n  text: targetCluster.name,\n  state: {\n    expanded: true\n  },\n  selectable: true,\n  selected: false\n});\n\nexport const sourceClusterWithExtendedData = sourceCluster => ({\n  ...sourceCluster,\n  text: sourceCluster.name,\n  icon: 'fa fa-file-o'\n});\n\nexport const updateMapping = (clustersStepMapping, targetClusterToAddTo, sourceClustersToAdd) => {\n  const { nodes: sourceClusters, ...targetCluster } = clustersStepMapping;\n\n  if (targetCluster.id === targetClusterToAddTo.id) {\n    return {\n      ...targetCluster,\n      nodes: [\n        ...sourceClusters,\n        ...sourceClustersToAdd.map(sourceCluster => sourceClusterWithExtendedData(sourceCluster))\n      ]\n    };\n  }\n  return clustersStepMapping;\n};\n\nexport const createNewMapping = (targetCluster, sourceClusters) => ({\n  ...targetClusterWithExtendedData(targetCluster),\n  nodes: sourceClusters.map(sourceCluster => sourceClusterWithExtendedData(sourceCluster))\n});\n\nexport const createClusterMappings = (transformationItems, targetClusters, sourceClusters) => {\n  const mappings = groupClusterTransformationItemsByDestinationId(transformationItems);\n\n  if (targetClusters.length && sourceClusters.length) {\n    return Object.keys(mappings).map(key => {\n      const target = targetClusters && targetClusters.find(cluster => cluster.id === key);\n      const sources = sourceClusters && sourceClusters.filter(cluster => mappings[key].some(id => id === cluster.id));\n\n      return createNewMapping(target, sources);\n    });\n  }\n  return [];\n};\n\nexport const providerHasSshKeyPair = (target, providers) => {\n  const provider = providers.find(prov => prov.id === target.ems_id);\n\n  return (\n    provider.authentications &&\n    provider.authentications.some(authentication => authentication.authtype === 'ssh_keypair')\n  );\n};\n","import { connect } from 'react-redux';\n\nimport MappingWizardClustersStep from './MappingWizardClustersStep';\nimport * as MappingWizardClustersStepActions from './MappingWizardClustersStepActions';\nimport { fetchTargetClustersAction } from '../../../../../../../../redux/common/targetResources/targetResourcesActions';\nimport { createClusterMappings } from './components/ClustersStepForm/helpers';\nimport { getTransformationMappingItemsBySourceType } from '../../helpers';\nimport { TRANSFORMATION_MAPPING_ITEM_SOURCE_TYPES, OPENSTACK, RHV } from '../../MappingWizardConstants';\nimport { conversionHostsFilter } from './MappingWizardClustersStepSelectors';\n\nimport reducer from './MappingWizardClustersStepReducer';\n\nexport const reducers = { mappingWizardClustersStep: reducer };\n\nconst mapStateToProps = (\n  {\n    mappingWizardClustersStep,\n    mappingWizardGeneralStep: { editingMapping, conversionHosts },\n    form,\n    targetResources: { isFetchingTargetClusters, isRejectedTargetClusters, targetClusters }\n  },\n  ownProps\n) => ({\n  ...mappingWizardClustersStep,\n  ...ownProps.data,\n  isFetchingTargetClusters,\n  isRejectedTargetClusters,\n  targetClusters,\n  targetProvider: form.mappingWizardGeneralStep.values.targetProvider,\n  rhvConversionHosts: conversionHostsFilter(conversionHosts, RHV),\n  ospConversionHosts: conversionHostsFilter(conversionHosts, OPENSTACK),\n  initialValues: {\n    clusterMappings: editingMapping\n      ? createClusterMappings(\n          getTransformationMappingItemsBySourceType(TRANSFORMATION_MAPPING_ITEM_SOURCE_TYPES.cluster, editingMapping),\n          targetClusters,\n          mappingWizardClustersStep.sourceClusters\n        )\n      : []\n  },\n  enableReinitialize: true,\n  keepDirtyOnReinitialize: true\n});\n\nconst mergeProps = (stateProps, dispatchProps, ownProps) => Object.assign(stateProps, ownProps.data, dispatchProps);\n\nexport default connect(\n  mapStateToProps,\n  { ...MappingWizardClustersStepActions, fetchTargetClustersAction },\n  mergeProps\n)(MappingWizardClustersStep);\n","import { connect } from 'react-redux';\n\nimport MappingWizardGeneralStep from './MappingWizardGeneralStep';\nimport * as MappingWizardGeneralStepActions from './MappingWizardGeneralStepActions';\nimport { showAlertAction, hideAlertAction } from '../../MappingWizardActions';\n\nimport reducer from './MappingWizardGeneralStepReducer';\n\nexport const reducers = { mappingWizardGeneralStep: reducer };\n\nconst mapStateToProps = ({\n  mappingWizardGeneralStep: { editingMapping, conversionHosts },\n  overview: { transformationMappings },\n  form: { mappingWizardGeneralStep }\n}) => ({\n  editingMapping,\n  conversionHosts,\n  transformationMappings,\n  targetProvider:\n    mappingWizardGeneralStep && mappingWizardGeneralStep.values && mappingWizardGeneralStep.values.targetProvider\n});\n\nconst actions = { showAlertAction, hideAlertAction, ...MappingWizardGeneralStepActions };\n\nexport default connect(\n  mapStateToProps,\n  actions\n)(MappingWizardGeneralStep);\n","import { connect } from 'react-redux';\nimport MappingWizard from './MappingWizard';\nimport * as MappingWizardActions from './MappingWizardActions';\nimport { mappingWizardFormFilter } from './MappingWizardSelectors';\n\nimport reducer from './MappingWizardReducer';\n\nexport const reducers = { mappingWizard: reducer };\n\nconst mapStateToProps = (\n  { mappings: { hideMappingWizard }, mappingWizard, form, mappingWizardGeneralStep: { editingMapping } },\n  ownProps\n) => {\n  const selectedForms = mappingWizardFormFilter(form);\n  return {\n    ...mappingWizard,\n    ...selectedForms,\n    ...ownProps.data,\n    hideMappingWizard,\n    editingMapping\n  };\n};\n\nconst mergeProps = (stateProps, dispatchProps, ownProps) => Object.assign(stateProps, ownProps.data, dispatchProps);\n\nexport default connect(\n  mapStateToProps,\n  MappingWizardActions,\n  mergeProps\n)(MappingWizard);\n","import MappingWizardContainer from '../react/screens/App/Mappings/screens/MappingWizard';\nimport MappingWizardGeneralStepContainer from '../react/screens/App/Mappings/screens/MappingWizard/components/MappingWizardGeneralStep';\nimport MappingWizardClustersStepContainer from '../react/screens/App/Mappings/screens/MappingWizard/components/MappingWizardClustersStep';\nimport MappingWizardDatastoresStepContainer from '../react/screens/App/Mappings/screens/MappingWizard/components/MappingWizardDatastoresStep';\nimport MappingWizardNetworksStepContainer from '../react/screens/App/Mappings/screens/MappingWizard/components/MappingWizardNetworksStep';\nimport MappingWizardResultsStepContainer from '../react/screens/App/Mappings/screens/MappingWizard/components/MappingWizardResultsStep';\n\nimport PlanWizardVMStepContainer from '../react/screens/App/Overview/screens/PlanWizard/components/PlanWizardVMStep';\nimport PlanWizardResultsStepContainer from '../react/screens/App/Overview/screens/PlanWizard/components/PlanWizardResultsStep';\nimport PlanWizardContainer from '../react/screens/App/Overview/screens/PlanWizard';\nimport PlanWizardAdvancedOptionsStepContainer from '../react/screens/App/Overview/screens/PlanWizard/components/PlanWizardAdvancedOptionsStep';\nimport PlanWizardInstancePropertiesStepContainer from '../react/screens/App/Overview/screens/PlanWizard/components/PlanWizardInstancePropertiesStep';\n\nimport OverviewContainer from '../react/screens/App/Overview';\nimport SettingsContainer from '../react/screens/App/Settings';\nimport PlanContainer from '../react/screens/App/Plan';\nimport MappingsContainer from '../react/screens/App/Mappings';\nimport NotificationList from '../react/screens/App/common/NotificationList';\nimport IsoDate from './dates/IsoDate';\nimport LongDateTime from './dates/LongDateTime';\nimport RelativeDateTime from './dates/RelativeDateTime';\nimport ShortDateTime from './dates/ShortDateTime';\n\n/**\n * NOTE: This should not exist, predefining (default) props should be in components not in some registry\n * This should be deleted and all the data should be moved to popper location.\n * If you want to achieve adaptability, the simplest way is to move it into some redux store and connect components that need this\n */\nexport const coreComponents = [\n  {\n    name: 'MappingWizardContainer',\n    type: MappingWizardContainer,\n    store: true\n  },\n  {\n    name: 'MappingWizardGeneralStepContainer',\n    type: MappingWizardGeneralStepContainer,\n    store: true\n  },\n  {\n    name: 'MappingWizardClustersStepContainer',\n    type: MappingWizardClustersStepContainer,\n    store: true\n  },\n  {\n    name: 'MappingWizardDatastoresStepContainer',\n    type: MappingWizardDatastoresStepContainer,\n    store: true\n  },\n  {\n    name: 'MappingWizardNetworksStepContainer',\n    type: MappingWizardNetworksStepContainer,\n    store: true\n  },\n  {\n    name: 'MappingWizardResultsStepContainer',\n    type: MappingWizardResultsStepContainer\n  },\n  {\n    name: 'PlanWizardVMStepContainer',\n    type: PlanWizardVMStepContainer\n  },\n  {\n    name: 'PlanWizardResultsStepContainer',\n    type: PlanWizardResultsStepContainer\n  },\n  {\n    name: 'PlanWizardContainer',\n    type: PlanWizardContainer,\n    data: {\n      url: '/api/migrationPlans' // did not find this prop in the PlanWizard component\n    },\n    store: true\n  },\n  {\n    name: 'PlanWizardInstancePropertiesStepContainer',\n    type: PlanWizardInstancePropertiesStepContainer,\n    store: true\n  },\n  {\n    name: 'PlanWizardAdvancedOptionsStepContainer',\n    type: PlanWizardAdvancedOptionsStepContainer,\n    store: true\n  },\n  {\n    name: 'OverviewContainer',\n    type: OverviewContainer,\n    store: true\n  },\n  {\n    name: 'SettingsContainer',\n    type: SettingsContainer,\n    store: true\n  },\n  {\n    name: 'PlanContainer',\n    type: PlanContainer,\n    store: true\n  },\n  {\n    name: 'MappingsContainer',\n    type: MappingsContainer,\n    store: true\n  },\n  {\n    name: 'NotificationList',\n    type: NotificationList,\n    data: true,\n    store: true\n  },\n  {\n    name: 'RelativeDateTime',\n    type: RelativeDateTime,\n    data: true,\n    store: false\n  },\n  {\n    name: 'LongDateTime',\n    type: LongDateTime,\n    data: true,\n    store: false\n  },\n  {\n    name: 'ShortDateTime',\n    type: ShortDateTime,\n    data: true,\n    store: false\n  },\n  {\n    name: 'IsoDate',\n    type: IsoDate,\n    data: true,\n    store: false\n  }\n];\n\nexport const componentSettings = component => coreComponents.find(n => n.type === component);\n","const { http } = window;\n\nexport default {\n  get(url, headers = {}, params = {}) {\n    return http.get(url, {\n      transformResponse: e => ({ data: e }),\n      headers,\n      params\n    });\n  },\n  post(url, data = {}, headers = {}) {\n    return http.post(url, data, {\n      headers,\n      transformResponse: e => ({ data: e })\n    });\n  }\n};\n","import URI from 'urijs';\nimport API from '../../../common/API';\n\nimport { FETCH_V2V_TARGET_CLUSTERS } from './targetResourcesConstants';\n\nconst _getTargetClustersActionCreator = url => dispatch =>\n  dispatch({\n    type: FETCH_V2V_TARGET_CLUSTERS,\n    payload: API.get(url)\n  });\n\nexport const fetchTargetClustersAction = url => {\n  const uri = new URI(url);\n  return _getTargetClustersActionCreator(uri.toString());\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Field } from 'redux-form';\nimport { required } from 'redux-form-validators';\nimport TextFileInput from './TextFileInput';\nimport { FormField } from './FormField';\n\nconst requiredWithMessage = required({ msg: __('This field is required') });\nconst bodyIsRequired = value => requiredWithMessage(value.body);\n\nconst SshKeyField = props => (\n  <Field component={FormField} required validate={[bodyIsRequired]} {...props}>\n    {({ input: { value, onChange, onBlur } }) => (\n      <TextFileInput\n        help={__('Upload your SSH key file or paste its contents below.')}\n        value={value}\n        onChange={onChange}\n        onBlur={onBlur}\n      />\n    )}\n  </Field>\n);\n\nSshKeyField.propTypes = {\n  name: PropTypes.string.isRequired,\n  label: PropTypes.string.isRequired,\n  controlId: PropTypes.string.isRequired\n};\n\nexport default SshKeyField;\n","export const V2V_FETCH_SERVERS = 'V2V_FETCH_SERVERS';\nexport const V2V_FETCH_SETTINGS = 'V2V_FETCH_SETTINGS';\nexport const V2V_PATCH_SETTINGS = 'V2V_PATCH_SETTINGS';\nexport const FETCH_V2V_CONVERSION_HOSTS = 'FETCH_V2V_CONVERSION_HOSTS';\nexport const FETCH_V2V_CONVERSION_HOST_TASKS = 'FETCH_V2V_CONVERSION_HOST_TASKS';\nexport const SHOW_V2V_CONVERSION_HOST_WIZARD = 'SHOW_V2V_CONVERSION_HOST_WIZARD';\nexport const HIDE_V2V_CONVERSION_HOST_WIZARD = 'HIDE_V2V_CONVERSION_HOST_WIZARD';\nexport const V2V_CONVERSION_HOST_WIZARD_EXITED = 'V2V_CONVERSION_HOST_WIZARD_EXITED';\nexport const POST_V2V_CONVERSION_HOSTS = 'POST_V2V_CONVERSION_HOSTS';\nexport const SET_V2V_CONVERSION_HOST_TO_DELETE = 'SET_V2V_CONVERSION_HOST_TO_DELETE';\nexport const SHOW_V2V_CONVERSION_HOST_DELETE_MODAL = 'SHOW_V2V_CONVERSION_HOST_DELETE_MODAL';\nexport const HIDE_V2V_CONVERSION_HOST_DELETE_MODAL = 'HIDE_V2V_CONVERSION_HOST_DELETE_MODAL';\nexport const DELETE_V2V_CONVERSION_HOST = 'DELETE_V2V_CONVERSION_HOST';\nexport const SET_V2V_CONVERSION_HOST_TASK_TO_RETRY = 'SET_V2V_CONVERSION_HOST_TASK_TO_RETRY';\nexport const SHOW_V2V_CONVERSION_HOST_RETRY_MODAL = 'SHOW_V2V_CONVERSION_HOST_RETRY_MODAL';\nexport const HIDE_V2V_CONVERSION_HOST_RETRY_MODAL = 'HIDE_V2V_CONVERSION_HOST_RETRY_MODAL';\nexport const V2V_CONVERSION_HOST_RETRY_MODAL_EXITED = 'V2V_CONVERSION_HOST_RETRY_MODAL_EXITED';\n","import getMostRecentRequest from '../common/getMostRecentRequest';\nimport { urlBuilder } from './components/Migrations/helpers';\nimport { TRANSFORMATION_PLAN_REQUESTS_URL } from './OverviewConstants';\nimport { getMappingType } from '../Mappings/components/InfrastructureMappingsList/helpers';\nimport { OPENSTACK } from '../Mappings/screens/MappingWizard/MappingWizardConstants';\nimport { attachTargetProvider } from './helpers';\n\nexport const notStartedTransformationPlansFilter = transformationPlans =>\n  transformationPlans.filter(transformationPlan => transformationPlan.miq_requests.length === 0);\n\nexport const activeTransformationPlansFilter = (transformationPlans, planId) =>\n  transformationPlans.filter(transformationPlan => {\n    if (transformationPlan.id === planId) {\n      return true;\n    }\n    if (transformationPlan.miq_requests.length > 0) {\n      const mostRecentRequest = getMostRecentRequest(transformationPlan.miq_requests);\n      return (\n        mostRecentRequest.request_state === 'active' ||\n        mostRecentRequest.request_state === 'pending' ||\n        (mostRecentRequest.approval_state === 'denied' && !mostRecentRequest.options.denial_acknowledged)\n      );\n    }\n    return false;\n  });\n\nexport const finishedTransformationPlansFilter = transformationPlans =>\n  transformationPlans.filter(transformationPlan => {\n    if (transformationPlan.miq_requests.length > 0) {\n      const mostRecentRequest = getMostRecentRequest(transformationPlan.miq_requests);\n      return (\n        (mostRecentRequest.request_state === 'finished' && mostRecentRequest.approval_state !== 'denied') ||\n        mostRecentRequest.request_state === 'failed' ||\n        (mostRecentRequest.approval_state === 'denied' && mostRecentRequest.options.denial_acknowledged)\n      );\n    }\n    return false;\n  });\n\nexport const finishedWithErrorTransformationPlansFilter = transformationPlans =>\n  transformationPlans.filter(transformationPlan => {\n    if (transformationPlan.miq_requests.length > 0) {\n      const mostRecentRequest = getMostRecentRequest(transformationPlan.miq_requests);\n      return (\n        (mostRecentRequest.request_state === 'finished' && mostRecentRequest.status === 'Error') ||\n        mostRecentRequest.approval_state === 'denied'\n      );\n    }\n    return false;\n  });\n\nexport const requestsProcessingCancellationFilter = transformationPlans =>\n  transformationPlans.reduce((requests, plan) => {\n    if (plan.miq_requests.length) {\n      const mostRecentRequest = getMostRecentRequest(plan.miq_requests);\n\n      if (mostRecentRequest.cancelation_status) {\n        return [...requests, urlBuilder(TRANSFORMATION_PLAN_REQUESTS_URL, mostRecentRequest.id)];\n      }\n    }\n    return requests;\n  }, []);\n\nexport const combineRequestsProcessingCancellation = (requestsFromMemory, requestsFromDb) => [\n  ...new Set([...requestsFromMemory, ...requestsFromDb])\n];\n\nexport const attachTargetProviderToOspPlans = (plans, providers, cloudTenants) =>\n  plans.map(plan => {\n    if (!plan.transformation_mapping) {\n      return plan;\n    }\n\n    if (getMappingType(plan.transformation_mapping.transformation_mapping_items) === OPENSTACK) {\n      return attachTargetProvider(plan, providers, cloudTenants, OPENSTACK);\n    }\n\n    return plan;\n  });\n","import getMostRecentRequest from '../common/getMostRecentRequest';\nimport { TRANSFORMATION_MAPPING_ITEM_DESTINATION_TYPES } from '../Mappings/screens/MappingWizard/MappingWizardConstants';\n\nexport const planTransmutation = (plans = [], mappings = []) =>\n  plans.map(plan => {\n    const request = getMostRecentRequest(plan.miq_requests);\n    return {\n      ...plan,\n      infraMappingName: plan.transformation_mapping && plan.transformation_mapping.name,\n      status: request ? request.status : null,\n      configVmLength: plan.options.config_info.actions.length,\n      scheduleTime: plan.schedules ? new Date(plan.schedules[0].run_at.start_time).getTime() : null\n    };\n  });\n\nexport const attachTargetProvider = (plan, providers, clusters, targetProviderType) => {\n  if (!plan.transformation_mapping) {\n    return plan;\n  }\n\n  const {\n    transformation_mapping: { transformation_mapping_items }\n  } = plan;\n  const clusterMapping = transformation_mapping_items.find(\n    item => item.destination_type === TRANSFORMATION_MAPPING_ITEM_DESTINATION_TYPES[targetProviderType].cluster\n  );\n  const targetCluster = clusters.find(cluster => cluster.id === clusterMapping.destination_id);\n  if (targetCluster === undefined) {\n    return plan;\n  }\n  const targetProvider = providers.find(provider => provider.id === targetCluster.ems_id);\n\n  return { ...plan, targetProvider };\n};\n","import { array, string, object } from 'yup';\n\nexport const mappingsSchema = array()\n  .of(\n    object().shape({\n      href: string().required(),\n      id: string().required(),\n      name: string().required(),\n      created_at: string().required(),\n      service_templates: array()\n        .of(\n          object().shape({\n            id: string().required(),\n            name: string().required()\n          })\n        )\n        .nullable(),\n      transformation_mapping_items: array()\n        .of(\n          object().shape({\n            id: string().required(),\n            source_id: string().required(),\n            source_type: string().required(),\n            destination_id: string().required(),\n            destination_type: string().required(),\n            transformation_mapping_id: string().required()\n          })\n        )\n        .required()\n    })\n  )\n  .nullable();\n","export const V2V_POST_EDIT_PLAN_NAME = 'V2V_POST_EDIT_PLAN_NAME';\n","export const asyncValidate = (values, dispatch, props) =>\n  new Promise((resolve, reject) => {\n    const { name: newPlanName } = values;\n    const { transformationPlans, archivedTransformationPlans, editingPlan } = props;\n    const existingTransformationPlanNames = transformationPlans.reduce(\n      (names, plan) => [...names, plan.name.trim()],\n      []\n    );\n    const existingArchivedPlanNames = archivedTransformationPlans.reduce(\n      (names, plan) => [...names, plan.name.trim()],\n      []\n    );\n\n    const allPlanNames = [...existingTransformationPlanNames, ...existingArchivedPlanNames];\n    const duplicateName = allPlanNames.find(existingPlanName => existingPlanName === newPlanName.trim());\n    const duplicateIsEditingPlanName = editingPlan && duplicateName === editingPlan.name;\n\n    if (duplicateName && !duplicateIsEditingPlanName) {\n      if (props.showAlertAction) props.showAlertAction(sprintf(__('Name %s already exists'), newPlanName));\n      const error = { name: __('Plan name already exists. Enter a unique name.') };\n      reject(error);\n    } else {\n      resolve();\n    }\n  });\n\nexport const onChange = (values, dispatch, props) => {\n  if (props.valid) {\n    if (props.hideAlertAction && props.alertType === 'error') props.hideAlertAction();\n  }\n};\n","import { connect } from 'react-redux';\nimport EditPlanNameModal from './EditPlanNameModal';\nimport { findEditingPlan } from '../../screens/PlanWizard/PlanWizardSelectors';\nimport * as EditPlanNameActions from './EditPlanNameActions';\n\nimport reducer from './EditPlanNameReducer';\n\nexport const reducers = { editPlanName: reducer };\n\nconst mapStateToProps = ({ editPlanName, overview, form }) => {\n  const plans = [...overview.transformationPlans, ...overview.archivedTransformationPlans];\n  const editingPlan = findEditingPlan(plans, overview.editingPlanId);\n  return {\n    ...editPlanName,\n    editPlanNameModal: form && form.editPlanNameModal,\n    initialValues: {\n      name: editingPlan ? editingPlan.name : '',\n      description: editingPlan ? editingPlan.description : ''\n    },\n    enableReinitialize: true,\n    editingPlan\n  };\n};\n\nexport default connect(\n  mapStateToProps,\n  EditPlanNameActions\n)(EditPlanNameModal);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Modal, Button, Grid, noop } from 'patternfly-react';\n\n// Note: This is in the process of being moved to `patternfly-react`.\n// TODO: Replace this implementation with an import\n\nconst ConfirmModal = props => {\n  const {\n    icon,\n    title,\n    body,\n    cancelButtonLabel,\n    confirmButtonLabel,\n    onCancel,\n    onConfirm,\n    disableCancelButton,\n    disableConfirmButton,\n    ...otherProps\n  } = props;\n  return (\n    <Modal {...otherProps} onHide={onCancel} backdrop=\"static\">\n      <Modal.Header>\n        <Modal.CloseButton onClick={onCancel} />\n        <Modal.Title>{title}</Modal.Title>\n      </Modal.Header>\n      <Modal.Body>\n        {!icon ? (\n          body\n        ) : (\n          <Grid.Row className=\"show-grid\">\n            <Grid.Col xsHidden md={2} className=\"text-right\">\n              {icon}\n            </Grid.Col>\n            <Grid.Col xs={12} md={10}>\n              {body}\n            </Grid.Col>\n          </Grid.Row>\n        )}\n      </Modal.Body>\n      <Modal.Footer>\n        {cancelButtonLabel && (\n          <Button bsStyle=\"default\" className=\"btn-cancel\" onClick={onCancel} disabled={disableCancelButton}>\n            {cancelButtonLabel}\n          </Button>\n        )}\n        <Button bsStyle=\"primary\" onClick={onConfirm} disabled={disableConfirmButton}>\n          {confirmButtonLabel}\n        </Button>\n      </Modal.Footer>\n    </Modal>\n  );\n};\n\nConfirmModal.propTypes = {\n  show: PropTypes.bool,\n  title: PropTypes.string,\n  icon: PropTypes.node,\n  body: PropTypes.node,\n  cancelButtonLabel: PropTypes.string,\n  confirmButtonLabel: PropTypes.string,\n  onCancel: PropTypes.func,\n  onConfirm: PropTypes.func,\n  disableCancelButton: PropTypes.bool,\n  disableConfirmButton: PropTypes.bool\n};\n\nConfirmModal.defaultProps = {\n  show: false,\n  title: __('Confirm'),\n  icon: null,\n  body: <p>{__('Are you sure?')}</p>,\n  cancelButtonLabel: __('Cancel'),\n  confirmButtonLabel: __('Yes'),\n  onCancel: noop,\n  onConfirm: noop\n};\n\nexport default ConfirmModal;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { MenuItem } from 'patternfly-react';\n\nconst DeleteMigrationMenuItem = ({\n  showConfirmModalAction,\n  hideConfirmModalAction,\n  deleteTransformationPlanAction,\n  addNotificationAction,\n  fetchTransformationPlansAction,\n  deleteTransformationPlanUrl,\n  fetchTransformationPlansUrl,\n  fetchArchivedTransformationPlansUrl,\n  planId,\n  planName,\n  archived,\n  fetchTransformationMappingsAction,\n  fetchTransformationMappingsUrl\n}) => {\n  const confirmModalBaseProps = {\n    title: __('Delete Migration Plan'),\n    body: (\n      <p>\n        {__('Are you sure you want to delete the migration plan ')}\n        <strong>{planName}</strong>?\n      </p>\n    ),\n    confirmButtonLabel: __('Delete')\n  };\n\n  const onConfirm = () => {\n    showConfirmModalAction({\n      ...confirmModalBaseProps,\n      disableCancelButton: true,\n      disableConfirmButton: true\n    });\n    deleteTransformationPlanAction(deleteTransformationPlanUrl, planId)\n      .then(() => {\n        addNotificationAction({\n          message: sprintf(__('%s successfully deleted'), planName),\n          notificationType: 'success'\n        });\n        return fetchTransformationPlansAction({\n          url: !archived ? fetchTransformationPlansUrl : fetchArchivedTransformationPlansUrl,\n          archived\n        });\n      })\n      .then(() => fetchTransformationMappingsAction(fetchTransformationMappingsUrl))\n      .then(() => {\n        hideConfirmModalAction();\n      });\n  };\n\n  return (\n    <MenuItem\n      onClick={e => {\n        e.stopPropagation();\n        showConfirmModalAction({\n          ...confirmModalBaseProps,\n          onConfirm\n        });\n      }}\n    >\n      {__('Delete plan')}\n    </MenuItem>\n  );\n};\n\nDeleteMigrationMenuItem.propTypes = {\n  showConfirmModalAction: PropTypes.func,\n  hideConfirmModalAction: PropTypes.func,\n  deleteTransformationPlanAction: PropTypes.func,\n  addNotificationAction: PropTypes.func,\n  fetchTransformationPlansAction: PropTypes.func,\n  deleteTransformationPlanUrl: PropTypes.string,\n  fetchTransformationPlansUrl: PropTypes.string,\n  fetchArchivedTransformationPlansUrl: PropTypes.string,\n  planId: PropTypes.string,\n  planName: PropTypes.string,\n  archived: PropTypes.bool,\n  fetchTransformationMappingsAction: PropTypes.func,\n  fetchTransformationMappingsUrl: PropTypes.string\n};\n\nDeleteMigrationMenuItem.defaultProps = {\n  archived: false\n};\n\nexport default DeleteMigrationMenuItem;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Button, MenuItem, Icon } from 'patternfly-react';\nimport { formatDateTime } from '../../../../../../components/dates/MomentDate';\n\nconst ScheduleMigrationButtons = ({\n  showConfirmModalAction,\n  hideConfirmModalAction,\n  loading,\n  toggleScheduleMigrationModal,\n  scheduleMigration,\n  fetchTransformationPlansAction,\n  fetchTransformationPlansUrl,\n  plan,\n  isMissingMapping,\n  migrationScheduled,\n  migrationStarting,\n  showInitialScheduleButton\n}) => {\n  const confirmationWarningText = (\n    <React.Fragment>\n      <p>\n        {sprintf(\n          __('Are you sure you want to unschedule plan %s  targeted to run on %s ?'),\n          plan.name,\n          formatDateTime(migrationScheduled)\n        )}\n      </p>\n    </React.Fragment>\n  );\n\n  const confirmModalProps = {\n    title: __('Unschedule Migration Plan'),\n    body: confirmationWarningText,\n    icon: <Icon className=\"confirm-warning-icon\" type=\"pf\" name=\"warning-triangle-o\" />,\n    confirmButtonLabel: __('Unschedule')\n  };\n\n  const onConfirm = () => {\n    scheduleMigration({\n      plan\n    }).then(() => {\n      fetchTransformationPlansAction({\n        url: fetchTransformationPlansUrl,\n        archived: false\n      });\n    });\n    hideConfirmModalAction();\n  };\n\n  const editScheduleDisabled = isMissingMapping || loading === plan.href || migrationStarting;\n\n  return (\n    <React.Fragment>\n      {showInitialScheduleButton && (\n        <Button\n          id={`schedule_${plan.id}`}\n          onClick={e => {\n            e.stopPropagation();\n            toggleScheduleMigrationModal({ plan });\n          }}\n          disabled={isMissingMapping || loading === plan.href || plan.schedule_type}\n        >\n          {__('Schedule')}\n        </Button>\n      )}\n      {!showInitialScheduleButton && (\n        <React.Fragment>\n          <MenuItem\n            id={`edit_schedule_${plan.id}`}\n            onClick={e => {\n              e.stopPropagation();\n              if (!editScheduleDisabled) {\n                toggleScheduleMigrationModal({ plan });\n              }\n            }}\n            disabled={editScheduleDisabled}\n          >\n            {__('Edit schedule')}\n          </MenuItem>\n          <MenuItem\n            id={`unschedule_${plan.id}`}\n            onClick={e => {\n              e.stopPropagation();\n              if (!editScheduleDisabled) {\n                showConfirmModalAction({\n                  ...confirmModalProps,\n                  onConfirm\n                });\n              }\n            }}\n            disabled={editScheduleDisabled}\n          >\n            {__('Delete schedule')}\n          </MenuItem>\n        </React.Fragment>\n      )}\n    </React.Fragment>\n  );\n};\n\nScheduleMigrationButtons.propTypes = {\n  showConfirmModalAction: PropTypes.func,\n  hideConfirmModalAction: PropTypes.func,\n  loading: PropTypes.string,\n  toggleScheduleMigrationModal: PropTypes.func,\n  scheduleMigration: PropTypes.func,\n  fetchTransformationPlansAction: PropTypes.func,\n  fetchTransformationPlansUrl: PropTypes.string,\n  plan: PropTypes.object,\n  isMissingMapping: PropTypes.bool,\n  migrationScheduled: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  migrationStarting: PropTypes.bool,\n  showInitialScheduleButton: PropTypes.bool\n};\n\nexport default ScheduleMigrationButtons;\n","export const MIGRATIONS_NOT_STARTED_SORT_FIELDS = [\n  { id: 'name', title: __('Name'), isNumeric: false },\n  {\n    id: 'infraMappingName',\n    title: __('Infrastructure Mapping'),\n    isNumeric: false\n  },\n  {\n    id: 'configVmLength',\n    title: __('Number of VMs'),\n    isNumeric: true\n  },\n  { id: 'scheduleTime', title: __('Scheduled Time'), isNumeric: true }\n];\n\nexport const MIGRATIONS_COMPLETED_SORT_FIELDS = [\n  { id: 'name', title: __('Name'), isNumeric: false },\n  { id: 'status', title: __('Status'), isNumeric: false }\n];\n\nexport const MIGRATIONS_ARCHIVED_SORT_FIELDS = [{ id: 'name', title: __('Name'), isNumeric: false }];\n\nexport const MIGRATIONS_FILTER_TYPES = [\n  {\n    id: 'name',\n    title: __('Name'),\n    placeholder: __('Filter by Name'),\n    filterType: 'text'\n  },\n  {\n    id: 'description',\n    title: __('Description'),\n    placeholder: __('Filter by Description'),\n    filterType: 'text'\n  },\n  {\n    id: 'infraMappingName',\n    title: __('Infrastructure Mapping'),\n    placeholder: __('Filter by Mapping'),\n    filterType: 'text'\n  }\n];\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Button, Modal } from 'patternfly-react';\nimport ScheduleMigrationModalBody from './ScheduleMigrationModalBody';\nimport getPlanScheduleInfo from '../Migrations/helpers/getPlanScheduleInfo';\n\nclass ScheduleMigrationModal extends React.Component {\n  state = { dateTimeInput: '' };\n\n  render() {\n    const {\n      toggleScheduleMigrationModal,\n      scheduleMigrationModal,\n      scheduleMigrationPlan,\n      scheduleMigration,\n      fetchTransformationPlansAction,\n      fetchTransformationPlansUrl\n    } = this.props;\n\n    const { migrationScheduled } = getPlanScheduleInfo(scheduleMigrationPlan);\n\n    const handleChange = event => {\n      this.setState({ dateTimeInput: event });\n    };\n\n    const modalClose = () => {\n      toggleScheduleMigrationModal();\n      handleChange();\n    };\n\n    return (\n      <Modal show={scheduleMigrationModal} onHide={modalClose} backdrop=\"static\">\n        <Modal.Header>\n          <Modal.CloseButton onClick={modalClose} />\n          <Modal.Title>{__('Schedule Migration Plan')}</Modal.Title>\n        </Modal.Header>\n        <Modal.Body>\n          <ScheduleMigrationModalBody handleChange={handleChange} defaultDate={migrationScheduled || ''} />\n        </Modal.Body>\n        <Modal.Footer>\n          <Button bsStyle=\"default\" className=\"btn-cancel\" onClick={modalClose}>\n            {__('Cancel')}\n          </Button>\n          <Button\n            bsStyle=\"primary\"\n            disabled={!this.state.dateTimeInput}\n            onClick={() => {\n              scheduleMigration({\n                plan: scheduleMigrationPlan,\n                scheduleTime: this.state.dateTimeInput\n              }).then(() => {\n                fetchTransformationPlansAction({\n                  url: fetchTransformationPlansUrl,\n                  archived: false\n                });\n              });\n              handleChange();\n            }}\n          >\n            {__('Schedule')}\n          </Button>\n        </Modal.Footer>\n      </Modal>\n    );\n  }\n}\n\nScheduleMigrationModal.propTypes = {\n  scheduleMigrationModal: PropTypes.bool,\n  toggleScheduleMigrationModal: PropTypes.func,\n  scheduleMigrationPlan: PropTypes.object,\n  scheduleMigration: PropTypes.func,\n  fetchTransformationPlansAction: PropTypes.func,\n  fetchTransformationPlansUrl: PropTypes.string\n};\n\nexport default ScheduleMigrationModal;\n","export const MAX_LENGTH_NAMES = 24;\nexport const MAX_LENGTH_DESCRIPTIONS = 128;\n\nconst maxLengthIs = __('Maximum length is %s characters.');\nconst requiredMaxLengthIs = __('Required. Maximum length is %s characters.');\nconst youHaveReachedMax = __('You have reached the maximum length of %s characters.');\n\nexport const validation = {\n  name: {\n    help: sprintf(maxLengthIs, MAX_LENGTH_NAMES),\n    requiredMessage: sprintf(requiredMaxLengthIs, MAX_LENGTH_NAMES),\n    maxLength: MAX_LENGTH_NAMES,\n    maxLengthWarning: sprintf(youHaveReachedMax, MAX_LENGTH_NAMES)\n  },\n  description: {\n    help: sprintf(maxLengthIs, MAX_LENGTH_DESCRIPTIONS),\n    maxLength: MAX_LENGTH_DESCRIPTIONS,\n    maxLengthWarning: sprintf(youHaveReachedMax, MAX_LENGTH_DESCRIPTIONS)\n  }\n};\n\nexport const OPENSTACK = 'openstack';\nexport const RHV = 'rhevm';\n\nexport const V2V_TARGET_PROVIDERS = [\n  {\n    name: __('Red Hat Virtualization'),\n    id: RHV,\n    type: 'ManageIQ::Providers::Redhat::InfraManager'\n  },\n  {\n    name: __('Red Hat OpenStack Platform'),\n    id: OPENSTACK,\n    type: 'ManageIQ::Providers::Openstack::CloudManager'\n  }\n];\n\nexport const CONVERSION_HOST_TYPES = {\n  [RHV]: 'ManageIQ::Providers::Redhat::InfraManager::Host',\n  [OPENSTACK]: 'ManageIQ::Providers::Openstack::CloudManager::Vm'\n};\n","export const INFRA_MAPPINGS_FILTER_TYPES = [\n  {\n    id: 'name',\n    title: __('Name'),\n    placeholder: __('Filter by Name'),\n    filterType: 'text'\n  },\n  {\n    id: 'description',\n    title: __('Description'),\n    placeholder: __('Filter by Description'),\n    filterType: 'text'\n  }\n];\n\nexport const INFRA_MAPPINGS_SORT_FIELDS = [\n  {\n    id: 'name',\n    title: __('Name'),\n    isNumeric: false\n  },\n  {\n    id: 'associatedPlansCount',\n    title: __('Number of Associated Plans'),\n    isNumeric: true\n  }\n];\n\nexport const MAPPING_TYPE_RESOURCE_MAP = {\n  openstack: {\n    networks: {\n      source: 'Lan',\n      target: 'CloudNetwork'\n    }\n  },\n  rhevm: {\n    networks: {\n      source: 'Lan',\n      target: 'Lan'\n    }\n  }\n};\n","export const urlBuilder = (hrefSlug, id) => `${hrefSlug}/${id}`;\n","const commonUtilitiesHelper = {\n  getMostRecentEntityByCreationDate: entities =>\n    entities && entities.reduce((prev, current) => (prev.created_on > current.created_on ? prev : current)),\n\n  groupBy: (items, key) =>\n    items &&\n    items.reduce(\n      (result, item) => ({\n        ...result,\n        [item[key]]: [...(result[item[key]] || []), item]\n      }),\n      {}\n    ),\n\n  flatten: (arrayItems, flattenedArray) =>\n    arrayItems && arrayItems.map(task => task.map(arrayElement => flattenedArray.push(arrayElement)))\n};\n\nexport default commonUtilitiesHelper;\n","export const stepIDs = {\n  locationStep: 'conversionHostWizardLocationStep',\n  hostsStep: 'conversionHostWizardHostsStep',\n  authenticationStep: 'conversionHostWizardAuthenticationStep',\n  resultsStep: 'conversionHostWizardResultsStep'\n};\n\nexport const VDDK = 'VDDK';\nexport const SSH = 'SSH';\n"],"sourceRoot":""}
# -*- encoding: utf-8 -*-
# stub: manageiq-providers-google 0.1.0 ruby lib

Gem::Specification.new do |s|
  s.name = "manageiq-providers-google".freeze
  s.version = "0.1.0"

  s.required_rubygems_version = Gem::Requirement.new(">= 0".freeze) if s.respond_to? :required_rubygems_version=
  s.require_paths = ["lib".freeze]
  s.authors = ["ManageIQ Developers".freeze]
  s.date = "2019-05-08"
  s.description = "Google Provider for ManageIQ".freeze
  s.files = ["app/models/manageiq/providers/google".freeze, "app/models/manageiq/providers/google/cloud_manager".freeze, "app/models/manageiq/providers/google/cloud_manager.rb".freeze, "app/models/manageiq/providers/google/cloud_manager/auth_key_pair.rb".freeze, "app/models/manageiq/providers/google/cloud_manager/availability_zone.rb".freeze, "app/models/manageiq/providers/google/cloud_manager/cloud_volume_snapshot.rb".freeze, "app/models/manageiq/providers/google/cloud_manager/event_catcher".freeze, "app/models/manageiq/providers/google/cloud_manager/event_catcher.rb".freeze, "app/models/manageiq/providers/google/cloud_manager/event_catcher/runner.rb".freeze, "app/models/manageiq/providers/google/cloud_manager/event_catcher/stream.rb".freeze, "app/models/manageiq/providers/google/cloud_manager/event_parser.rb".freeze, "app/models/manageiq/providers/google/cloud_manager/flavor.rb".freeze, "app/models/manageiq/providers/google/cloud_manager/metrics_capture.rb".freeze, "app/models/manageiq/providers/google/cloud_manager/metrics_collector_worker".freeze, "app/models/manageiq/providers/google/cloud_manager/metrics_collector_worker.rb".freeze, "app/models/manageiq/providers/google/cloud_manager/metrics_collector_worker/runner.rb".freeze, "app/models/manageiq/providers/google/cloud_manager/provision".freeze, "app/models/manageiq/providers/google/cloud_manager/provision.rb".freeze, "app/models/manageiq/providers/google/cloud_manager/provision/cloning.rb".freeze, "app/models/manageiq/providers/google/cloud_manager/provision/disk.rb".freeze, "app/models/manageiq/providers/google/cloud_manager/provision/state_machine.rb".freeze, "app/models/manageiq/providers/google/cloud_manager/provision_workflow.rb".freeze, "app/models/manageiq/providers/google/cloud_manager/refresh_parser.rb".freeze, "app/models/manageiq/providers/google/cloud_manager/refresh_worker".freeze, "app/models/manageiq/providers/google/cloud_manager/refresh_worker.rb".freeze, "app/models/manageiq/providers/google/cloud_manager/refresh_worker/runner.rb".freeze, "app/models/manageiq/providers/google/cloud_manager/refresher.rb".freeze, "app/models/manageiq/providers/google/cloud_manager/template.rb".freeze, "app/models/manageiq/providers/google/cloud_manager/vm".freeze, "app/models/manageiq/providers/google/cloud_manager/vm.rb".freeze, "app/models/manageiq/providers/google/cloud_manager/vm/operations".freeze, "app/models/manageiq/providers/google/cloud_manager/vm/operations.rb".freeze, "app/models/manageiq/providers/google/cloud_manager/vm/operations/guest.rb".freeze, "app/models/manageiq/providers/google/cloud_manager/vm/operations/power.rb".freeze, "app/models/manageiq/providers/google/event_catcher_mixin.rb".freeze, "app/models/manageiq/providers/google/inventory".freeze, "app/models/manageiq/providers/google/inventory.rb".freeze, "app/models/manageiq/providers/google/inventory/collector".freeze, "app/models/manageiq/providers/google/inventory/collector.rb".freeze, "app/models/manageiq/providers/google/inventory/collector/cloud_manager.rb".freeze, "app/models/manageiq/providers/google/inventory/collector/network_manager.rb".freeze, "app/models/manageiq/providers/google/inventory/parser".freeze, "app/models/manageiq/providers/google/inventory/parser.rb".freeze, "app/models/manageiq/providers/google/inventory/parser/cloud_manager.rb".freeze, "app/models/manageiq/providers/google/inventory/parser/network_manager.rb".freeze, "app/models/manageiq/providers/google/inventory/persister".freeze, "app/models/manageiq/providers/google/inventory/persister.rb".freeze, "app/models/manageiq/providers/google/inventory/persister/cloud_manager.rb".freeze, "app/models/manageiq/providers/google/inventory/persister/definitions".freeze, "app/models/manageiq/providers/google/inventory/persister/definitions/cloud_collections.rb".freeze, "app/models/manageiq/providers/google/inventory/persister/definitions/network_collections.rb".freeze, "app/models/manageiq/providers/google/inventory/persister/network_manager.rb".freeze, "app/models/manageiq/providers/google/manager_mixin.rb".freeze, "app/models/manageiq/providers/google/network_manager".freeze, "app/models/manageiq/providers/google/network_manager.rb".freeze, "app/models/manageiq/providers/google/network_manager/cloud_network.rb".freeze, "app/models/manageiq/providers/google/network_manager/cloud_subnet.rb".freeze, "app/models/manageiq/providers/google/network_manager/floating_ip.rb".freeze, "app/models/manageiq/providers/google/network_manager/load_balancer.rb".freeze, "app/models/manageiq/providers/google/network_manager/load_balancer_health_check.rb".freeze, "app/models/manageiq/providers/google/network_manager/load_balancer_listener.rb".freeze, "app/models/manageiq/providers/google/network_manager/load_balancer_pool.rb".freeze, "app/models/manageiq/providers/google/network_manager/load_balancer_pool_member.rb".freeze, "app/models/manageiq/providers/google/network_manager/network_port.rb".freeze, "app/models/manageiq/providers/google/network_manager/network_router.rb".freeze, "app/models/manageiq/providers/google/network_manager/refresh_parser.rb".freeze, "app/models/manageiq/providers/google/network_manager/refresh_worker".freeze, "app/models/manageiq/providers/google/network_manager/refresh_worker.rb".freeze, "app/models/manageiq/providers/google/network_manager/refresh_worker/runner.rb".freeze, "app/models/manageiq/providers/google/network_manager/refresher.rb".freeze, "app/models/manageiq/providers/google/network_manager/security_group.rb".freeze, "app/models/manageiq/providers/google/refresh_helper_methods.rb".freeze, "app/models/manageiq/providers/google/resource.rb".freeze, "config/initializers/gettext.rb".freeze, "config/settings.yml".freeze, "lib/manageiq-providers-google.rb".freeze, "lib/manageiq/providers".freeze, "lib/manageiq/providers/google".freeze, "lib/manageiq/providers/google.rb".freeze, "lib/manageiq/providers/google/engine.rb".freeze, "lib/manageiq/providers/google/version.rb".freeze, "lib/tasks/README.md".freeze, "lib/tasks/google.rake".freeze, "lib/tasks_private".freeze, "lib/tasks_private/spec.rake".freeze]
  s.homepage = "https://github.com/ManageIQ/manageiq-providers-google".freeze
  s.licenses = ["Apache-2.0".freeze]
  s.rubygems_version = "2.6.14.1".freeze
  s.summary = "Google Provider for ManageIQ".freeze

  s.installed_by_version = "2.6.14.1" if s.respond_to? :installed_by_version

  if s.respond_to? :specification_version then
    s.specification_version = 4

    if Gem::Version.new(Gem::VERSION) >= Gem::Version.new('1.2.0') then
      s.add_runtime_dependency(%q<fog-google>.freeze, ["< 2.0.0", ">= 1.8.1"])
      s.add_development_dependency(%q<codeclimate-test-reporter>.freeze, ["~> 1.0.0"])
      s.add_development_dependency(%q<simplecov>.freeze, [">= 0"])
    else
      s.add_dependency(%q<fog-google>.freeze, ["< 2.0.0", ">= 1.8.1"])
      s.add_dependency(%q<codeclimate-test-reporter>.freeze, ["~> 1.0.0"])
      s.add_dependency(%q<simplecov>.freeze, [">= 0"])
    end
  else
    s.add_dependency(%q<fog-google>.freeze, ["< 2.0.0", ">= 1.8.1"])
    s.add_dependency(%q<codeclimate-test-reporter>.freeze, ["~> 1.0.0"])
    s.add_dependency(%q<simplecov>.freeze, [">= 0"])
  end
end
